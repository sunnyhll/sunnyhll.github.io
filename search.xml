<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode 523 Continuous Subarray Sum</title>
    <url>/2018/05/13/Algorithms/Leetcode-523-Continuous-Subarray-Sum/</url>
    <content><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.</p>
<p>Example 1:</p>
<p>Input: [23, 2, 4, 6, 7],  k&#x3D;6</p>
<p>Output: True</p>
<p>Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.</p>
<p>Example 2:</p>
<p>Input: [23, 2, 6, 4, 7],  k&#x3D;6</p>
<p>Output: True</p>
<p>Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42. 42 is a mutiple of 6 and 7 and n&#x3D;7.</p>
<p>Note:</p>
<ol>
<li>The length of the array won’t exceed 10,000.</li>
<li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>本题是一个经典的动态规划问题，此类问题的特征是，需要在穷举的可能性中找到一个最优化的解，从而求出所需问题的答案。本题的目标是找到所有和为K的连续子数组的个数。虽然本题没有直接提问一个最优解的概念，但是其实和为K的连续子数组的个数就是在穷举所有可能性后得出的并且是唯一的结果。</p>
<p>本题的解题思路是采用是动态规划思想，一般来讲，动态规划题目的解题思路如下：</p>
<ol>
<li>找出最优解性质，并刻画其结构特征;</li>
<li>递归的定义最优值;</li>
<li>自底向上的方式算出最优值；</li>
<li>根据计算最优值时得到的信息构造最优解。</li>
</ol>
<blockquote>
<p>动态规划解题的前提假设是：问题的最优解包含着其自问题的最优解。此种性质称为最优子结构性质。最优子结构性质不难通过反证法证明。</p>
</blockquote>
<blockquote>
<p>递归关系的建立，是基于已有的前提最优解，所以不难在此基础上推导出递增关系。</p>
</blockquote>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题中，连续子数组的和是可以通过数组前缀和算出来的。两个长度不同的数组S[i], S[j]的前缀和相减就能计算出子数组S[(i+1)~j]的和。</p>
<blockquote>
<p>数组前缀和定义：一个数组从0号元素相加到k号元素则是该数组的第k个前缀和。下文用Sum(k)表示。</p>
</blockquote>
<p>假设已知长度为k的所有长度大于2的子数组后缀和中，是K的整数倍的有a(k)个，则当在k+1的情况下，a(k+1)则是a(k)+所有k的子数组后缀和中值为K的整数倍-a[k+1]的个数。</p>
<blockquote>
<p>数组后缀和定义：一个数组从最后一个元素加到倒数第k的元素，是该数组的第k个后缀和。</p>
</blockquote>
<p>长度为k的数组的所有子数组的后缀和计算，可以利用数组的前缀和计算出。a(k)情况下，其后缀和的集合为第k个前缀和减去第i个前缀和(0&lt;&#x3D;i&lt;k)的数集。</p>
<p>为求得所有k的子数组后缀和中值为K的整数倍-a[k+1]的个数，需要求出所有k的整倍数-a[k+1]的个数。循环终止于当k的倍数大于整个序列和。</p>
<h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>本程序需要维护一个HashMap，每个key都是一个前缀和，value则是前缀和的子数组个数。从而在每步的计算中能够利用这个数据结构最优查找速度。</p>
<p>每步的运算设计思想是找到重复的子问题，从而能在一步一步地推中找到第n步的答案。每步的计算中需要找到第k后缀和中符合条件的解，也就是HashMap中key值为sum-K_multiple的value。计算公式推导如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第k后缀和中符合条件的解</span><br><span class="line">    =[所有K的整倍数a[k+1]-为a[k]后缀和的]value</span><br><span class="line">    =[所有K的整倍数-a[k+1]为(Sum(k)-Sum(i))]的value, i=0,1,...,k-2中某值</span><br><span class="line">    =[所有K的整倍数为(Sum(k+1)-Sum(i))]的value</span><br><span class="line">    =[Sum(i)中值为(Sum(k+1)-所有K的整数倍)]的value</span><br></pre></td></tr></table></figure>

<p>本算法需要计算从0到n的所有子数组前缀和并进行O(1)的HashMap查找，所以最终的复杂度为O(n)。</p>
<h3 id="实现技巧"><a href="#实现技巧" class="headerlink" title="实现技巧"></a>实现技巧</h3><p>边界条件考虑：</p>
<ol>
<li><p>长度至少为2的子数组；</p>
<p> 对于存在单个数为K的整数倍的数组，单数的情况是不能统计进最终结果的，所以需要在查找匹配的情况下去检查Sum(i)是否为previous_sum。如果是且value&#x3D;1就需要剔除该种情况。</p>
</li>
<li><p>非负序列</p>
<p> 注意，value是可以不为1的，因为非负序列是可以存在连续的0元素。</p>
</li>
<li><p>K的整数倍</p>
<p> K的整数倍包括负数倍，也包括0倍，所以需要考虑K&lt;0是将K转化为正数，因为同解。</p>
</li>
<li><p>K为零的情况</p>
<p> K为零的情况需要特殊考虑，主要是因为算法可以大大简化为查找连续两个0的算法。也因为K为零会使求余数运算符无法使用。</p>
</li>
<li><p>循环次数过多超时问题</p>
<p> 此属于算法优化问题，当Sum(k+1)本身就是K的整数倍的时候，可以直接跳过K的整数倍递增的查找运算，从而避免K过小，序列元素值过大而造成的超时问题。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkSubarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//special consideration for k=0 case</span></span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; nums.length; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt; <span class="number">0</span> &amp;&amp; nums[i] == <span class="number">0</span> &amp;&amp; nums[i-<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// revert to positive value to get same solution</span></span><br><span class="line">        <span class="keyword">if</span>(k &lt; <span class="number">0</span>)</span><br><span class="line">            k = -k;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">previous_sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt; ();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; nums.length; ++i)&#123;</span><br><span class="line">            sum += nums[i];            </span><br><span class="line">            <span class="comment">//check sum(k+1) first</span></span><br><span class="line">            <span class="keyword">if</span>(sum%k == <span class="number">0</span> &amp;&amp; i &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//iterate to search</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">k_multiple</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(k_multiple&lt;sum )&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(sum-k_multiple))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(sum-k_multiple == previous_sum &amp;&amp; map.get(previous_sum) == <span class="number">1</span>)&#123;</span><br><span class="line">                        k_multiple += k;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;                        </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;                    </span><br><span class="line">                k_multiple += k;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="comment">//memroize sum(k)</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum))</span><br><span class="line">                map.put(sum, map.get(sum)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map.put(sum, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// store previoius sum(k) to avoid length=1 subarraies</span></span><br><span class="line">            previous_sum = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 560: Subarray Sum Equals K</title>
    <url>/2018/04/14/Algorithms/Leetcode-560-Subarray-Sum-Equals-K/</url>
    <content><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.</p>
<p>Example 1:</p>
<p>Input:nums &#x3D; [1,1,1], k &#x3D; 2</p>
<p>Output: 2</p>
<p>Note:<br>The length of the array is in range [1, 20,000].<br>The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题不属于某类经典类型的算法题。本题的解题关键在于深刻理解子数组和的计算方法，以及和为K的子数组和个数的求解技巧。</p>
<p>首先，需要求得长度为n的数组的和为K的连续子数组的个数，设为A(n)。统计连续子数组的和，以及和的分布则成为解题的前提条件。在统计连续子数组的和的过程中，我们可以采用穷举法，将所有子数组的和都进行一次统计，也能运用一些巧妙的方法，只统计部分子数组的和的个数，计算出和为K的子数组和的个数。</p>
<p>为了达到优化子数组和统计的方法，可以仔细思考子数组和的计算方法。不难得出，子数组和的计算方法其实源于两个从零开始的数组和之差。也就是说，假设从A[m]到A[n]之间的子数组和S[m<del>n] &#x3D; S[0</del>n] - S[0-m]。如果在已知S[0~i] (i&#x3D;0,…,n-1)的值，就能轻松求解出所有子数组的和。</p>
<p>然而，这样的方法用于求所有的子数组的和，并不能简化计算复杂度。要找到和为K的子数组的个数，就等于需要便利S[0<del>i] (i&#x3D;0,…,n)，并且找出末尾为第i个元素的子数组序列和为K的个数。由此不难推出，末尾为第i个元素的子数组序列和为K的个数，等价于S[m</del>i] (m&#x3D;1,…,i-1)中和为K的个数，也等价于S[0<del>m] (m&#x3D;1,…,i-1)中和为S[0</del>i]-K的子数组个数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number(末尾为第i个元素的子数组序列和为K的个数)=Number(S[0~m] (m=1,...,i-1)中和为S[0~i]-K的子数组个数);</span><br><span class="line"></span><br><span class="line">Number(n长数组子数组序列和为K的个数)=sigma(Number(末尾为第i个元素的子数组序列和为K的个数)) (i=0,...n-1)</span><br></pre></td></tr></table></figure>

<h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>本题解的优劣则取决于统计子数组和的计算量。</p>
<ol>
<li>运用hashmap数据结构存取所有的子数组和，经过两次for循环遍历得出所有子数组可能性下的和的值，并统计入hashmap中。本解法的时间复杂度是O(n^2)。</li>
<li>优化后的算法采用hashmap数据结构存取S[0~i] (i&#x3D;0,…n-1)，并且在每次计算后计算以i结尾的连续子数组和为K的个数。将所有数字相加则为综合。本解法的时间复杂度是O(n)。</li>
</ol>
<h3 id="实现技巧"><a href="#实现技巧" class="headerlink" title="实现技巧"></a>实现技巧</h3><blockquote>
<p>边界条件考虑：</p>
<ul>
<li>K&#x3D;0的情况。</li>
<li>K&#x3D;S[0~i] (i&#x3D;0,…,n-1)中的任意一个情况</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt; ();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; nums.length; ++i)&#123;</span><br><span class="line">            sum += nums[i];  </span><br><span class="line">            <span class="comment">// don&#x27;t forget margin k = 0, check previous count before adding this count to avoid confustion.</span></span><br><span class="line">            <span class="keyword">if</span>( map.containsKey(sum-k))</span><br><span class="line">                total += map.get(sum-k);</span><br><span class="line">            <span class="keyword">if</span>(k == sum)</span><br><span class="line">                total += <span class="number">1</span>;</span><br><span class="line">               </span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum))</span><br><span class="line">                map.put(sum, map.get(sum)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map.put(sum, <span class="number">1</span>);                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 60: Permutation Sequence</title>
    <url>/2018/04/12/Algorithms/Leetcode-60-Permutation-Sequence/</url>
    <content><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p>
<p>By listing and labeling all of the permutations in order,<br>We get the following sequence (ie, for n &#x3D; 3):</p>
<p>“123”</p>
<p>“132”</p>
<p>“213”</p>
<p>“231”</p>
<p>“312”</p>
<p>“321”</p>
<p>Given n and k, return the kth permutation sequence.</p>
<p>Note: Given n will be between 1 and 9 inclusive.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>寻找排列顺序规律，可以得出如下排序规律：</p>
<ol>
<li><p>整个排序可以划分成n个小排序。以1为首，[2, 3]的子序列排序。以2为首，[1, 3]的子序列排序， 以3为首，[1, 2]的子序列排序。</p>
</li>
<li><p>再次划分，则可以将以1为首的排序中，分成以2为第二位， [3]的全排列，和以3为第二位，[2]的全排列。</p>
</li>
<li><p>逐次划分，分别能将长度为n的序列分解成n个(n-1)全排列，n*(n-1)个(n-2)的全排列，…n!个(1)的全排列。</p>
</li>
</ol>
<h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>在知晓序列排序规律后，可以着手考虑将第k个元素找到。搜索定位的思想类似于一棵树的节点查找，这棵树的结构已经找到：第一层儿子有n个，第二层的孙子节点共有n*(n-1)个，且每个儿子拥有(n-1)个儿子，以此类推。</p>
<p>而第k个元素对应的元素如何计算出呢？根据这棵树的特点，我们可以做出如下设计，使得从树根到第k个节点的路径就是我们所需要的元素。</p>
<ol>
<li><p>假设树根节点是个空节点，其的n个儿子分别为1, 2, 3, 4, 5,…, n。</p>
</li>
<li><p>第一层的节点1拥有(n-1)个儿子，分别为2, 3, 4, 5,…n。</p>
</li>
<li><p>第二层节点2拥有(n-2)个儿子，分别为3, 4, 5,…n。 而第二层节点3拥有N(n-2)个儿子，分别为2, 4, 5,…n。尤其需要注意，儿子的顺序是除开父亲节点后的顺序结构。</p>
</li>
</ol>
<p>时间复杂度树的高度，为O(n)。</p>
<h3 id="实现技巧"><a href="#实现技巧" class="headerlink" title="实现技巧"></a>实现技巧</h3><blockquote>
<p>从1到n的全排列值计算具有较高的代码重复性， 可以用如下算法进行缓存，从而减少反复计算产生的时间消耗。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dynamic length int array declaration!!!</span></span><br><span class="line"><span class="type">int</span>[] factorial = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line"><span class="comment">// create an array of factorial lookup</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    factorial[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        sum *= i;</span><br><span class="line">        factorial[i] = sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于元素生成，可以运用List<Integer>类型的灵活性而避免在元素中挪动数字造成的时间开销。即使int array也可以作为一种高效的数据结构。</p>
</blockquote>
<blockquote>
<p>在程序实现中，递归算法会产生较高的空间开销，在for循环可以完成计算的情况下，优先采用后者。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a list of numbers to get indices</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">    numbers.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// numbers = &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">k--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> k/factorial[n-i];</span><br><span class="line">        sb.append(String.valueOf(numbers.get(index)));</span><br><span class="line">        numbers.remove(index);</span><br><span class="line">        k-=index*factorial[n-i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> String.valueOf(sb);</span><br></pre></td></tr></table></figure>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Permutation</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 5 Components &amp; Templates</title>
    <url>/2018/10/02/JS/Angular-5-template-syntax/</url>
    <content><![CDATA[<h1 id="Angular-binding-brief-introduction"><a href="#Angular-binding-brief-introduction" class="headerlink" title="Angular binding brief introduction"></a>Angular binding brief introduction</h1><p>This blog is talking about the template syntax of Angular 5. The reference topic is at <a href="https://angular.io/guide/template-syntax">https://angular.io/guide/template-syntax</a>.</p>
<h2 id="Angular-one-way-binding-with-DOM-elements"><a href="#Angular-one-way-binding-with-DOM-elements" class="headerlink" title="Angular one-way binding with DOM elements"></a>Angular one-way binding with DOM elements</h2><p>For DOM elmenets that does simple display, Angular one-way binding is very useful. For example, pure text, or un-editable tables, one-way binding can quick get rendered by directly binding the Angular variable or using *ngFor iteration. There are three examples of one-way binding in the html template. THe binding objective can be expression, which does not change variables.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;username&#125;&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- pure one-way interpolation with &#123;&#123;&#125;&#125; syntax--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> [<span class="attr">value</span>]=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="comment">&lt;!-- DOM property with [] binding --&gt;</span></span><br><span class="line">bind-target=&quot;expression&quot; <span class="comment">&lt;!-- bind- prefix target binding--&gt;</span></span><br></pre></td></tr></table></figure>
<p>** Remember to user [] brackets to make the DOM property actively linked with Angular variables, otherwise the binding is worked as string type initialization only.</p>
<h2 id="Angular-two-way-binding-with-DOM-elements"><a href="#Angular-two-way-binding-with-DOM-elements" class="headerlink" title="Angular two-way binding with DOM elements"></a>Angular two-way binding with DOM elements</h2><p>For DOM elements that also can have user interactions like input elements, select elments, two-way binding or event binding is required to allow Angular know about the user action. The grammar to bind a two-way variable is to use [(target)].</p>
<p>There are some examples of Angular two-way binding:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="comment">&lt;!-- property, like ngModel for form elements, with [()] syntax--&gt;</span></span><br><span class="line">bindon-target=&quot;expression&quot; <span class="comment">&lt;!-- bindon- prefix target two-way binding--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Angular-event-binding-with-DOM-elements"><a href="#Angular-event-binding-with-DOM-elements" class="headerlink" title="Angular event binding with DOM elements"></a>Angular event binding with DOM elements</h2><p>Some DOM elements are not interact with text but events link click or text change, Angular also provides sytax for event binding so it can track user’s behavior based on DOM events. Vairables, like #event template input variable (let here), and template reference variable (#heroForm), which can be passed to the event handlers. The grammar to bind a event of a DOM is to use parenthesis with Angular event like (click). Event handlers can only be statements like methods of the component instance.</p>
<p>There are some examples of Angular event bindings:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">(click)=&quot;click($event)&quot; <span class="comment">&lt;!-- use DOM property binding with () syntax--&gt;</span></span><br><span class="line">on-target=&quot;statement&quot;  <span class="comment">&lt;!-- use on- prefix target binding --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Angular-template-binding-targets"><a href="#Angular-template-binding-targets" class="headerlink" title="Angular template binding targets"></a>Angular template binding targets</h1><p>It’s not hard to see, binding targets in Angular includes HTML properties and events as below table.</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Target</th>
<th align="left">Examples</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Property</td>
<td align="left">Element property,<br>Component property,<br>Directive property</td>
<td align="left"><code> &lt;img [src]=&quot;heroImageUrl&quot;&gt;</code><br><code>&lt;app-hero-detail [hero]=&quot;currentHero&quot;&gt;&lt;/app-hero-detail&gt;</code><br><code>&lt;div [ngClass]=&quot;&#123;&#39;special&#39;: isSpecial&#125;&quot;&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td align="left">Event</td>
<td align="left">Element event,<br>Component event,<br>Directive event</td>
<td align="left"><code>&lt;button (click)=&quot;onSave()&quot;&gt;Save&lt;/button&gt;</code><br><code>&lt;app-hero-detail (deleteRequest)=&quot;deleteHero()&quot;&gt;&lt;/app-hero-detail&gt;</code><br><code>&lt;div (myClick)=&quot;clicked=$event&quot; clickable&gt;click me&lt;/div&gt;</code></td>
</tr>
<tr>
<td align="left">Two-way</td>
<td align="left">Event and property</td>
<td align="left"><code>&lt;input [(ngModel)]=&quot;name&quot;&gt;</code></td>
</tr>
<tr>
<td align="left">Attributes</td>
<td align="left">Attribute (the exception)</td>
<td align="left"><code>&lt;button [attr.aria-label]=&quot;help&quot;&gt;help&lt;/button&gt;</code></td>
</tr>
<tr>
<td align="left">Class</td>
<td align="left">class property</td>
<td align="left"><code> &lt;div [class.special]=&quot;isSpecial&quot;&gt;Special&lt;/div&gt;</code></td>
</tr>
<tr>
<td align="left">Style</td>
<td align="left">style property</td>
<td align="left"><code>&lt;button [style.color]=&quot;isSpecial ? &#39;red&#39; : &#39;green&#39;&quot;&gt;</code></td>
</tr>
</tbody></table>
<p>Besides, Angular also supports built-in directives as below table.</p>
<table>
<thead>
<tr>
<th align="left">Directive Type</th>
<th align="left">Target</th>
<th align="left">Use Case</th>
<th align="left">Examples</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Attribute</td>
<td align="left">NgClass</td>
<td align="left">add and remove a set of CSS classes</td>
<td align="left"><code>&lt;!-- toggle the &quot;special&quot; class on/off with a property --&gt;</code><br><code>&lt;div [class.special]=&quot;isSpecial&quot;&gt;The class binding is special&lt;/div&gt;</code></td>
</tr>
<tr>
<td align="left">Attribute</td>
<td align="left">NgStyle</td>
<td align="left">add and remove a set of HTML styles</td>
<td align="left"><code>&lt;button [style.color]=&quot;isSpecial ? &#39;red&#39; : &#39;green&#39;&quot;&gt;</code></td>
</tr>
<tr>
<td align="left">Attribute</td>
<td align="left">NgModel</td>
<td align="left">two-way data binding to an HTML form element</td>
<td align="left"><code>&lt;input [(ngModel)]=&quot;name&quot;&gt;</code></td>
</tr>
<tr>
<td align="left">Structural</td>
<td align="left">NgIf</td>
<td align="left">conditionally add or remove an element from the DOM</td>
<td align="left"><code>&lt;app-hero-detail *ngIf=&quot;isActive&quot;&gt;&lt;/app-hero-detail&gt;</code></td>
</tr>
<tr>
<td align="left">Structural</td>
<td align="left">NgSwitch</td>
<td align="left">a set of directives that switch among alternative views</td>
<td align="left"><code>&lt;div *ngFor=&quot;let hero of heroes&quot;&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</code></td>
</tr>
<tr>
<td align="left">Structural</td>
<td align="left">NgForOf</td>
<td align="left">repeat a template for each item in a list</td>
<td align="left"><code>&lt;div [ngSwitch]=&quot;currentHero.emotion&quot;&gt;</code><br><code>&lt;app-happy-hero    *ngSwitchCase=&quot;&#39;happy&#39;&quot;    [hero]=&quot;currentHero&quot;&gt;&lt;/app-happy-hero&gt;</code><br><code>&lt;app-sad-hero      *ngSwitchCase=&quot;&#39;sad&#39;&quot;      [hero]=&quot;currentHero&quot;&gt;&lt;/app-sad-hero&gt;</code><br><code>&lt;/div&gt;</code></td>
</tr>
</tbody></table>
<h2 id="Template-reference-variables"><a href="#Template-reference-variables" class="headerlink" title="Template reference variables"></a>Template reference variables</h2><p>A template reference variable is often a reference to a DOM element within a template. It can also be a reference to an Angular component or directive or a web component.<br>Use the hash symbol (#) to declare a reference variable. The #phone declares a phone variable on an <code>&lt;input&gt;</code> element.</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lots of other elements --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;callPhone(phone.value)&quot;</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Template-expression-operators"><a href="#Template-expression-operators" class="headerlink" title="Template expression operators"></a>Template expression operators</h2><p>The template expression language employs a subset of JavaScript syntax supplemented with a few special operators for specific scenarios. The next sections cover two of these operators: pipe and safe navigation operator.</p>
<h3 id="The-pipe-operator"><a href="#The-pipe-operator" class="headerlink" title="The pipe operator ( | )"></a>The pipe operator ( | )</h3><p>Angular pipes are a good choice for small transformations such as these. Pipes are simple functions that accept an input value and return a transformed value. They’re easy to apply within template expressions, using the pipe operator (|):</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Title through uppercase pipe: &#123;&#123;title | uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="The-safe-navigation-operator-and-null-property-paths"><a href="#The-safe-navigation-operator-and-null-property-paths" class="headerlink" title="The safe navigation operator ( ?. ) and null property paths"></a>The safe navigation operator ( ?. ) and null property paths</h3><p>The Angular safe navigation operator (?.) is a fluent and convenient way to guard against null and undefined values in property paths. Here it is, protecting against a view render failure if the currentHero is null.</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">The current hero&#x27;s name is &#123;&#123;currentHero?.name&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>The Angular non-null assertion operator (!) serves the same purpose in an Angular template.</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--No hero, no text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;hero&quot;</span>&gt;</span></span><br><span class="line">  The hero&#x27;s name is &#123;&#123;hero!.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="The-any-type-cast-function-any"><a href="#The-any-type-cast-function-any" class="headerlink" title="The $any type cast function ($any(  ))"></a>The $any type cast function ($any( <expression> ))</h3><p>Sometimes a binding expression will be reported as a type error and it is not possible or difficult to fully specify the type. To silence the error, you can use the $any cast function to cast the expression to the any type.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Accessing an undeclared member --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  The hero&#x27;s marker is &#123;&#123;$any(hero).marker&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Angular-binding-different-component-properties"><a href="#Angular-binding-different-component-properties" class="headerlink" title="Angular binding different component properties"></a>Angular binding different component properties</h1><p>We usually binding a template to its own component class. In such binding expressions, the component’s property or method is to the right of the (&#x3D;).</p>
<p>The Angular compiler won’t bind to properties of a different component unless they are Input or Output properties. You can’t use the TypeScript public and private access modifiers to shape the component’s public binding API.</p>
<h2 id="Declaring-Input-and-Output-properties"><a href="#Declaring-Input-and-Output-properties" class="headerlink" title="Declaring Input and Output properties"></a>Declaring Input and Output properties</h2><p>An Input property is a settable property annotated with an @Input decorator. Values flow into the property when it is data bound with a property binding<br>An Output property is an observable property annotated with an @Output decorator. The property almost always returns an Angular EventEmitter. Values flow out of the component as events bound with an event binding.</p>
<p>Example:</p>
<p>In the sample for this guide, the bindings to HeroDetailComponent do not fail because the data bound properties are annotated with @Input() and @Output() decorators.</p>
<p>In src&#x2F;app&#x2F;app.component.html file, below code will through compile error as template of app component does not recognize the property of hero-detail component:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-hero-detail</span> [<span class="attr">hero</span>]=<span class="string">&quot;currentHero&quot;</span> (<span class="attr">deleteRequest</span>)=<span class="string">&quot;deleteHero($event)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-hero-detail</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In src&#x2F;app&#x2F;hero-detail.component.ts file, set @Input and @Output decorator with corresponding properties. Then the error is resolved.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">inputs</span>: [<span class="string">&#x27;hero&#x27;</span>],</span><br><span class="line">  <span class="attr">outputs</span>: [<span class="string">&#x27;deleteRequest&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Input</span>()  <span class="attr">hero</span>: <span class="title class_">Hero</span>;</span><br><span class="line"><span class="meta">@Output</span>() deleteRequest = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="title class_">Hero</span>&gt;();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 901 Online Stock Span</title>
    <url>/2018/10/11/Algorithms/Leetcode-901-Online-Stock-Span/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Write a class StockSpanner which collects daily price quotes for some stock, and returns the span of that stock’s price for the current day.</p>
<p>The span of the stock’s price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today’s price.</p>
<p>For example, if the price of a stock over the next 7 days were [100, 80, 60, 70, 60, 75, 85], then the stock spans would be [1, 1, 1, 2, 1, 4, 6].</p>
<p>Example 1:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: [<span class="string">&quot;StockSpanner&quot;</span>,<span class="string">&quot;next&quot;</span>,<span class="string">&quot;next&quot;</span>,<span class="string">&quot;next&quot;</span>,<span class="string">&quot;next&quot;</span>,<span class="string">&quot;next&quot;</span>,<span class="string">&quot;next&quot;</span>,<span class="string">&quot;next&quot;</span>], [[],[100],[80],[60],[70],[60],[75],[85]]</span><br><span class="line">Output: [null,1,1,1,2,1,4,6]</span><br><span class="line">Explanation: </span><br><span class="line">First, S = StockSpanner() is initialized.  Then:</span><br><span class="line">S.next(100) is called and returns 1,</span><br><span class="line">S.next(80) is called and returns 1,</span><br><span class="line">S.next(60) is called and returns 1,</span><br><span class="line">S.next(70) is called and returns 2,</span><br><span class="line">S.next(60) is called and returns 1,</span><br><span class="line">S.next(75) is called and returns 4,</span><br><span class="line">S.next(85) is called and returns 6.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Note that (for example) S.next(75) returned 4, because the last 4 prices<br>(including today’s price of 75) were less than or equal to today’s price.</p>
</blockquote>
<p>Note:</p>
<ol>
<li>Calls to StockSpanner.next(int price) will have 1 &lt;&#x3D; price &lt;&#x3D; 10^5.</li>
<li>There will be at most 10000 calls to StockSpanner.next per test case.</li>
<li>There will be at most 150000 calls to StockSpanner.next across all test cases.</li>
<li>The total time limit for this problem has been reduced by 75% for C++, and 50% for all other languages.</li>
</ol>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题考验的是对Java Stack类的熟练使用。</p>
<h2 id="O-n-复杂度思路"><a href="#O-n-复杂度思路" class="headerlink" title="O(n)复杂度思路"></a>O(n)复杂度思路</h2><p>不难发现，运用两个Stack可以灵活的将数组中的数字进行遍历比较，从而得出结果。但是由于Leetcode对于时间复杂度要求较高，因此同为O(n)算法，需要最大化的优化其系数，从而通过时间限制测试。</p>
<p><strong>Leetcode solution中提出的一种简化计算的方法</strong></p>
<p>在仔细分析对比数组的计算结果后，不难得出以下几个结论：</p>
<ul>
<li>当数组元素值减少时,权重结果为1；</li>
<li>当数组元素值增加时，倒推前面小于该值的连续区间可以替换成局部最大值和其局部权重weight。局部最大值即当前元素值；而最末元素的权重，正好是其前面小于该值的连续区间的权重和+1。权重值则为我们需要的返回值。</li>
</ul>
<p>以Example中的数组为例，用Stack&lt;int[]&gt;表示分步计算结果为：</p>
<ol>
<li>[100, 1]</li>
<li>[100, 1], [80, 1]</li>
<li>[100, 1], [80, 1], [60, 1]</li>
<li>[100, 1], [80, 1], <strong>[70, 2]</strong></li>
<li>[100, 1], [80, 1], [70, 2], [60, 1]</li>
<li>[100, 1], [80, 1], <strong>[75, 4]</strong></li>
<li>[100, 1], <strong>[85, 6]</strong><br>…</li>
</ol>
<h2 id="实现技巧"><a href="#实现技巧" class="headerlink" title="实现技巧"></a>实现技巧</h2><p>需要注意的本解法并没有简化时间复杂度，因为在最差情况下（数列递减），计算的复杂度为O(n)。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StockSpanner</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; prices, weights;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StockSpanner</span><span class="params">()</span> &#123;</span><br><span class="line">        prices = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        weights = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!prices.isEmpty() &amp;&amp; prices.peek() &lt;= price) &#123;</span><br><span class="line">            prices.pop();</span><br><span class="line">            w += weights.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prices.push(price);</span><br><span class="line">        weights.push(w);</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 5 with Angular CLI</title>
    <url>/2018/04/19/JS/Angular-5-with-Angular-CLI/</url>
    <content><![CDATA[<h2 id="Angular-5-Overview"><a href="#Angular-5-Overview" class="headerlink" title="Angular 5 Overview"></a>Angular 5 Overview</h2><p>Angular 5的快速开发，测试和部署可以使用Angular CLI工具完成。Angular 5是基于Typescript语言开发的Web前端框架。</p>
<h3 id="Angular-5-quick-start"><a href="#Angular-5-quick-start" class="headerlink" title="Angular 5 quick start"></a>Angular 5 quick start</h3><ul>
<li>Environment Setup</li>
<li>ng command</li>
<li>Project structure definition<blockquote>
<p>More at: <a href="https://angular.io/guide/quickstart">https://angular.io/guide/quickstart</a></p>
</blockquote>
</li>
</ul>
<h3 id="Angular-5-basic-prject-development-tutorial"><a href="#Angular-5-basic-prject-development-tutorial" class="headerlink" title="Angular 5 basic prject development tutorial"></a>Angular 5 basic prject development tutorial</h3><h4 id="Application-shell"><a href="#Application-shell" class="headerlink" title="Application shell"></a>Application shell</h4><p>Angular 5应用的基本框架，可以用ng new {projectname}命令生成，一个简单的Angular项目需要包含一个app module和app component。在app component中，会定义一个<app-root></app-root>控件，作为整个Angular app的入口，一般写在index.html中。</p>
<h4 id="Angular-Component"><a href="#Angular-Component" class="headerlink" title="Angular Component"></a>Angular Component</h4><p>在已经有的app component基础上，可以用ng generate component {dir&#x2F;componetname}命令生成更多的组件，新的组件组成元素和app component一样，也是html模板，ts组件功能定义，和css组件风格。一般意义上，在ts中定义控件directive的名称，在html模板中，可以直接调用该directive。</p>
<p>每个已经创建好的component会被自动import进入app.module.ts文件，从而在Angular应用启动时，能自动寻找到对应的component并加载。如果developer需要在自己定义的component中引用其他component&#x2F;service组件，也需要定义相似的import语句，否则Angualr引擎并不能成功识别调用组件。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Angular components</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Angular application shell</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="comment">//Additional costomized components</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroesComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./heroes/heroes.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroDetailComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hero-detail/hero-detail.component&#x27;</span>;</span><br><span class="line"><span class="comment">//Additional service modules</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hero.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="title class_">HeroesComponent</span>,</span><br><span class="line">    <span class="title class_">HeroDetailComponent</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title class_">HeroService</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [ <span class="title class_">AppComponent</span> ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Angular-Service"><a href="#Angular-Service" class="headerlink" title="Angular Service"></a>Angular Service</h4><p>Angular提供了service module来支持现在Web前端数据获取和更新功能。可以用ng generate service {dir&#x2F;servicename} –module&#x3D;app命令来生成。</p>
<h4 id="Angular-Routing"><a href="#Angular-Routing" class="headerlink" title="Angular Routing"></a>Angular Routing</h4><p>Angular提供了routing来允许Web前端以single page application(SPA)方式渲染多个url的页面。可以用ng generate module app-routing –flat –module&#x3D;app生成app.routing.ts模块。app routing模块隐式定义了<router-outlet></router-outlet>控件，这是一个可以根据输入url进行跳转的控件。一般放在app componet html模板中，作为Angular应用的跳转渲染单元。这个控件本身，并不能提供跳转入口，一般需要写锚，在html模板显式来定义url。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/heroes&quot;</span>&gt;</span>Heroes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/heroes&quot;</span>&gt;</span>Heroes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外，app routing模块本身，定义了url跳转的逻辑。由于Angualar的html模块本身具有嵌套性，因而在routing逻辑中，只要引入自定义的directive控件，就能自动渲染出控件中所嵌套的所有元素。可以说，Angular的程序设计思想，就是基于模板设计的，每个模板都是一个自定义的DOM元素，允许在Angular的控制域中任意的复用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125;             <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="comment">// Angular routing module</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DashboardComponent</span> &#125;   <span class="keyword">from</span> <span class="string">&#x27;./dashboard/dashboard.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroesComponent</span> &#125;      <span class="keyword">from</span> <span class="string">&#x27;./heroes/heroes.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroDetailComponent</span> &#125;  <span class="keyword">from</span> <span class="string">&#x27;./hero-detail/hero-detail.component&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;/dashboard&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">component</span>: <span class="title class_">DashboardComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;detail/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HeroDetailComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;heroes&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HeroesComponent</span> &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [ <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes) ],</span><br><span class="line">  <span class="attr">exports</span>: [ <span class="title class_">RouterModule</span> ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;&#125;      </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Angular-HTTP"><a href="#Angular-HTTP" class="headerlink" title="Angular HTTP"></a>Angular HTTP</h4><p>Angular提供了HttpClient库作为Restful API的utility来完成Web前端的服务器数据交互。在程序中，HttpClient库一般本身不会单独存在于componnet中，而是作为Angular Service模块的底层调用库。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service module</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="comment">// import httpclient Angular module</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span>, <span class="title class_">HttpHeaders</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/observable/of&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError, map, tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Hero</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hero&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessageService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./message.service&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> httpOptions = &#123;</span><br><span class="line">  <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> heroesUrl = <span class="string">&#x27;api/heroes&#x27;</span>;  <span class="comment">// URL to web api</span></span><br><span class="line"> </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> http: HttpClient,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> messageService: MessageService</span>) &#123; &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/** GET heroes from the server */</span></span><br><span class="line">  getHeroes (): <span class="title class_">Observable</span>&lt;<span class="title class_">Hero</span>[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">Hero</span>[]&gt;(<span class="variable language_">this</span>.<span class="property">heroesUrl</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">tap</span>(<span class="function"><span class="params">heroes</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`fetched heroes`</span>)),</span><br><span class="line">        <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="title function_">handleError</span>(<span class="string">&#x27;getHeroes&#x27;</span>, []))</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/** GET hero by id. Return `undefined` when id not found */</span></span><br><span class="line">  getHeroNo404&lt;<span class="title class_">Data</span>&gt;(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">Hero</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.heroesUrl&#125;</span>/?id=<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">Hero</span>[]&gt;(url)</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">map</span>(<span class="function"><span class="params">heroes</span> =&gt;</span> heroes[<span class="number">0</span>]), <span class="comment">// returns a &#123;0|1&#125; element array</span></span><br><span class="line">        <span class="title function_">tap</span>(<span class="function"><span class="params">h</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> outcome = h ? <span class="string">`fetched`</span> : <span class="string">`did not find`</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;outcome&#125;</span> hero id=<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>&lt;<span class="title class_">Hero</span>&gt;(<span class="string">`getHero id=<span class="subst">$&#123;id&#125;</span>`</span>))</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/** GET hero by id. Will 404 if id not found */</span></span><br><span class="line">  <span class="title function_">getHero</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">Hero</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.heroesUrl&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">Hero</span>&gt;(url).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">tap</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`fetched hero id=<span class="subst">$&#123;id&#125;</span>`</span>)),</span><br><span class="line">      <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>&lt;<span class="title class_">Hero</span>&gt;(<span class="string">`getHero id=<span class="subst">$&#123;id&#125;</span>`</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* GET heroes whose name contains search term */</span></span><br><span class="line">  <span class="title function_">searchHeroes</span>(<span class="attr">term</span>: <span class="built_in">string</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">Hero</span>[]&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!term.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">      <span class="comment">// if not search term, return empty hero array.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">of</span>([]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">Hero</span>[]&gt;(<span class="string">`api/heroes/?name=<span class="subst">$&#123;term&#125;</span>`</span>).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">tap</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`found heroes matching &quot;<span class="subst">$&#123;term&#125;</span>&quot;`</span>)),</span><br><span class="line">      <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>&lt;<span class="title class_">Hero</span>[]&gt;(<span class="string">&#x27;searchHeroes&#x27;</span>, []))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//////// Save methods //////////</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/** POST: add a new hero to the server */</span></span><br><span class="line">  addHero (<span class="attr">hero</span>: <span class="title class_">Hero</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">Hero</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">post</span>&lt;<span class="title class_">Hero</span>&gt;(<span class="variable language_">this</span>.<span class="property">heroesUrl</span>, hero, httpOptions).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">tap</span>(<span class="function">(<span class="params">hero: Hero</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`added hero w/ id=<span class="subst">$&#123;hero.id&#125;</span>`</span>)),</span><br><span class="line">      <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>&lt;<span class="title class_">Hero</span>&gt;(<span class="string">&#x27;addHero&#x27;</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/** DELETE: delete the hero from the server */</span></span><br><span class="line">  deleteHero (<span class="attr">hero</span>: <span class="title class_">Hero</span> | <span class="built_in">number</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">Hero</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">typeof</span> hero === <span class="string">&#x27;number&#x27;</span> ? hero : hero.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.heroesUrl&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">delete</span>&lt;<span class="title class_">Hero</span>&gt;(url, httpOptions).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">tap</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`deleted hero id=<span class="subst">$&#123;id&#125;</span>`</span>)),</span><br><span class="line">      <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>&lt;<span class="title class_">Hero</span>&gt;(<span class="string">&#x27;deleteHero&#x27;</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/** PUT: update the hero on the server */</span></span><br><span class="line">  updateHero (<span class="attr">hero</span>: <span class="title class_">Hero</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">put</span>(<span class="variable language_">this</span>.<span class="property">heroesUrl</span>, hero, httpOptions).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">tap</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`updated hero id=<span class="subst">$&#123;hero.id&#125;</span>`</span>)),</span><br><span class="line">      <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>&lt;<span class="built_in">any</span>&gt;(<span class="string">&#x27;updateHero&#x27;</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Handle Http operation that failed.</span></span><br><span class="line"><span class="comment">   * Let the app continue.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">operation</span> - name of the operation that failed</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">result</span> - optional value to return as the observable result</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> handleError&lt;T&gt; (operation = <span class="string">&#x27;operation&#x27;</span>, result?: T) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="attr">error</span>: <span class="built_in">any</span>): <span class="title class_">Observable</span>&lt;T&gt; =&gt; &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> send the error to remote logging infrastructure</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error); <span class="comment">// log to console instead</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> better job of transforming error for user consumption</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;operation&#125;</span> failed: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// Let the app keep running by returning an empty result.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">of</span>(result <span class="keyword">as</span> T);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/** Log a HeroService message with the MessageService */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">log</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageService</span>.<span class="title function_">add</span>(<span class="string">&#x27;HeroService: &#x27;</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HttpClient除了和真正的服务器交互外，还可以和in-memory的数据服务器进行虚拟交互，也就是说，在不修改(略微)原有程序代码的情况下，可以自己运用一个npm package设立一个in-memory的数据服务器，HttpClient并不知道request已经被这个in-memory服务器拦截并返回内存中的数据。</p>
<p>在前后端分离的开发过程中，如果要引用此功能，需要预先安装angular-in-memory-web-api的npm包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install angular-in-memory-web-api@0.5 --save</span><br></pre></td></tr></table></figure>
<p>然后，创建in-memory-data.service模块，存储内存中的数据，作为HttpClient访问交互的相关数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InMemoryDbService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-in-memory-web-api&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InMemoryDataService</span> <span class="keyword">implements</span> <span class="title class_">InMemoryDbService</span> &#123;</span><br><span class="line">  <span class="title function_">createDb</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> heroes = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">name</span>: <span class="string">&#x27;Mr. Nice&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&#x27;Narco&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">13</span>, <span class="attr">name</span>: <span class="string">&#x27;Bombasto&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">14</span>, <span class="attr">name</span>: <span class="string">&#x27;Celeritas&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">15</span>, <span class="attr">name</span>: <span class="string">&#x27;Magneta&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">16</span>, <span class="attr">name</span>: <span class="string">&#x27;RubberMan&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">17</span>, <span class="attr">name</span>: <span class="string">&#x27;Dynama&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&#x27;Dr IQ&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">19</span>, <span class="attr">name</span>: <span class="string">&#x27;Magma&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">&#x27;Tornado&#x27;</span> &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> &#123;heroes&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，在app module模块中引入对in-memory-web-api的引用，和in-memory-data service模块的使用，并配置好in-memeory-server对应的data&#x2F;service来源。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125;       <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125;  <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125;    <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClientModule</span> &#125;    <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import in-memroy-data servier related module </span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClientInMemoryWebApiModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-in-memory-web-api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InMemoryDataService</span> &#125;  <span class="keyword">from</span> <span class="string">&#x27;./in-memory-data.service&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppRoutingModule</span> &#125;     <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125;         <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DashboardComponent</span> &#125;   <span class="keyword">from</span> <span class="string">&#x27;./dashboard/dashboard.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroDetailComponent</span> &#125;  <span class="keyword">from</span> <span class="string">&#x27;./hero-detail/hero-detail.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroesComponent</span> &#125;      <span class="keyword">from</span> <span class="string">&#x27;./heroes/heroes.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroSearchComponent</span> &#125;  <span class="keyword">from</span> <span class="string">&#x27;./hero-search/hero-search.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroService</span> &#125;          <span class="keyword">from</span> <span class="string">&#x27;./hero.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessageService</span> &#125;       <span class="keyword">from</span> <span class="string">&#x27;./message.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessagesComponent</span> &#125;    <span class="keyword">from</span> <span class="string">&#x27;./messages/messages.component&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">    <span class="title class_">HttpClientModule</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// The HttpClientInMemoryWebApiModule module intercepts HTTP requests</span></span><br><span class="line">    <span class="comment">// and returns simulated server responses.</span></span><br><span class="line">    <span class="comment">// Remove it when a real server is ready to receive requests.</span></span><br><span class="line">    <span class="title class_">HttpClientInMemoryWebApiModule</span>.<span class="title function_">forRoot</span>(</span><br><span class="line">      <span class="title class_">InMemoryDataService</span>, &#123; <span class="attr">dataEncapsulation</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="title class_">DashboardComponent</span>,</span><br><span class="line">    <span class="title class_">HeroesComponent</span>,</span><br><span class="line">    <span class="title class_">HeroDetailComponent</span>,</span><br><span class="line">    <span class="title class_">MessagesComponent</span>,</span><br><span class="line">    <span class="title class_">HeroSearchComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [ <span class="title class_">HeroService</span>, <span class="title class_">MessageService</span> ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [ <span class="title class_">AppComponent</span> ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Angular-Data-Model-–-Class"><a href="#Angular-Data-Model-–-Class" class="headerlink" title="Angular Data Model – Class"></a>Angular Data Model – Class</h3><p>In Angular 5, data model is encapsulated through classes, mainly for rendering templates in components. Creating a new class by Angular Cli:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ng generate class &#123;classname&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJs Observables</title>
    <url>/2019/10/19/JS/Angular-Observables/</url>
    <content><![CDATA[<h1 id="What-is-Observable"><a href="#What-is-Observable" class="headerlink" title="What is Observable"></a>What is Observable</h1><p>Observable利用观察者模式，建立了发布者publisher和订阅者subscriber之间的联系。联系本身不会修改发布的信息，只是定义声明了订阅者对发布信息的处理方式。</p>
<p>使用目的：</p>
<ol>
<li><p>流式处理本身是延迟执行的，即在需要数据的一刻进行处理，并且不改变数据本身而是生成一个新的流。多流处理的支持。</p>
</li>
<li><p>异步回调保证了流式处理结果的实时渲染，因此Observable是高性能前端的重要概念。可以将同步方法转换成异步方法。</p>
</li>
<li><p>支持事件处理，动态注册事件及句柄。</p>
</li>
</ol>
<h2 id="创建Observable"><a href="#创建Observable" class="headerlink" title="创建Observable"></a>创建Observable</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="comment">// subscriber/observer is callback functions for this observable.</span></span><br><span class="line"><span class="comment">// &#123;next, error, complete&#125;</span></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// observable can decide how frequency next/error/complete callback is called.</span></span><br><span class="line">    subscriber.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">    subscriber.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line">    subscriber.<span class="title function_">next</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        subscriber.<span class="title function_">next</span>(<span class="number">4</span>);</span><br><span class="line">        subscriber.<span class="title function_">complete</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="title function_">unsubscribe</span>(<span class="params"></span>) &#123;&#125;&#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="传入Observable回调函数-x2F-创建一个subscriber"><a href="#传入Observable回调函数-x2F-创建一个subscriber" class="headerlink" title="传入Observable回调函数&#x2F;创建一个subscriber"></a>传入Observable回调函数&#x2F;创建一个subscriber</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">observable.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;got value &#x27;</span> + x),</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;got error &#x27;</span> + err),</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="创建multicast-Observable"><a href="#创建multicast-Observable" class="headerlink" title="创建multicast Observable"></a>创建multicast Observable</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multicastSequenceSubscriber</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> observers = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timeoutId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span><br><span class="line">        observers.<span class="title function_">push</span>(observer);</span><br><span class="line">        <span class="comment">// start the sequence when firstly subscribed.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( observers.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            timeoutId = <span class="title function_">doSequence</span>(&#123;</span><br><span class="line">                <span class="title function_">next</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                    <span class="comment">// 将所有observer封装成一个observer</span></span><br><span class="line">                    observers.<span class="title function_">forEach</span>(<span class="function"><span class="params">obs</span> =&gt;</span> obs.<span class="title function_">next</span>(val));</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="title function_">complete</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    observers.<span class="title function_">slice</span>(<span class="number">0</span>).<span class="title function_">forEach</span>( <span class="function"><span class="params">obs</span> =&gt;</span> obs.<span class="title function_">complete</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, seq, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title function_">unsubscribe</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//remove observer</span></span><br><span class="line">                observers.<span class="title function_">splice</span>(observers.<span class="title function_">indexOf</span>(observer), <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// cancel subscription if no observers.</span></span><br><span class="line">                <span class="keyword">if</span>(observers.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multicastObservable = <span class="keyword">new</span> <span class="title class_">Observerble</span>(<span class="title function_">multicastSequenceSubscriber</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// subscribe to this observable</span></span><br><span class="line">multicastObservable.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params">num</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(num)&#125;</span><br><span class="line">    <span class="title function_">complete</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">multicastObservable.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params">num</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second: &#x27;</span> + num)&#125;</span><br><span class="line">    <span class="title function_">complete</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Observable关系操作符"><a href="#Observable关系操作符" class="headerlink" title="Observable关系操作符"></a>Observable关系操作符</h2><table>
<thead>
<tr>
<th align="left">Area</th>
<th align="center">Operator</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Creation</td>
<td align="center">from, fromEvent, of</td>
</tr>
<tr>
<td align="left">Comibination</td>
<td align="center">combineLatest,concat, merge, startWith, withLatestFrom, zip</td>
</tr>
<tr>
<td align="left">Filtering</td>
<td align="center">debounceTime, distinctUtilChanged, filter, take, takeUtil</td>
</tr>
<tr>
<td align="left">Transformation</td>
<td align="center">bufferTime, concatMap, map, mergeMap, scan, switchMap</td>
</tr>
<tr>
<td align="left">Utility</td>
<td align="center">tap</td>
</tr>
<tr>
<td align="left">Multicasting</td>
<td align="center">share</td>
</tr>
</tbody></table>
<p>Observable的关系操作符，是通过.pipe()引入的，更多的操作符，可以参考rxjs官方API文档<a href="https://www.learnrxjs.io/operators/">here</a>。</p>
<h1 id="Using-observables-in-Angular"><a href="#Using-observables-in-Angular" class="headerlink" title="Using observables in Angular"></a>Using observables in Angular</h1><ul>
<li>EventEmitter</li>
<li>HTTP模块处理AJAX requests</li>
<li>Router, Forms 模块监听&#x2F;响应用户输入</li>
</ul>
<h1 id="Observable-v-s-Promise"><a href="#Observable-v-s-Promise" class="headerlink" title="Observable v.s. Promise"></a>Observable v.s. Promise</h1><ul>
<li>共同点</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方面</th>
<th align="center">细节</th>
</tr>
</thead>
<tbody><tr>
<td align="left">异步处理</td>
<td align="center">subscribe&#x2F;then callback</td>
</tr>
<tr>
<td align="left">使用语言</td>
<td align="center">支持typescript, javascript</td>
</tr>
<tr>
<td align="left">支持HTTP</td>
<td align="center">通过Angular httpClient支持, observable.toPromise()</td>
</tr>
</tbody></table>
<ul>
<li>不同点</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方面</th>
<th align="center">细节</th>
</tr>
</thead>
<tbody><tr>
<td align="left">使用场景</td>
<td align="center">O: 事件处理句柄, 流式处理； P: 链式处理</td>
</tr>
<tr>
<td align="left">操作符复杂度</td>
<td align="center">O:多样化； P:单一</td>
</tr>
</tbody></table>
<h1 id="Reactive-Programming"><a href="#Reactive-Programming" class="headerlink" title="Reactive Programming"></a>Reactive Programming</h1><p>使用异步数据流进行编程，通过代码来忠实反映业务之间的关系。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Fundamentals</title>
    <url>/2021/05/01/JS/React-Fundamentals/</url>
    <content><![CDATA[<h1 id="Architecture-Overview"><a href="#Architecture-Overview" class="headerlink" title="Architecture Overview"></a>Architecture Overview</h1><h1 id="Design-In-Depth"><a href="#Design-In-Depth" class="headerlink" title="Design In Depth"></a>Design In Depth</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>Effective Java</title>
    <url>/2020/10/30/Java/Effective-Java/</url>
    <content><![CDATA[<p>本文是Effetive Java一书提出地90条Java代码规范建议，具体内容需要查看相应地书籍内容，本文仅作为索引复习回忆。</p>
<h1 id="创建与销毁对象"><a href="#创建与销毁对象" class="headerlink" title="创建与销毁对象"></a>创建与销毁对象</h1><ol>
<li><p>用静态工厂方法代替构造器</p>
</li>
<li><p>遇到多个构造器参数时要考虑使用构建器(builder)</p>
</li>
<li><p>用私有构造器或者枚举类型强化Singleton属性</p>
</li>
<li><p>通过私有构造器强化不可实例化的能力</p>
</li>
<li><p>优先考虑依赖注入来引用资源</p>
</li>
<li><p>避免创建不必要的对象</p>
</li>
<li><p>消除过期的对象引用</p>
</li>
<li><p>避免使用中介方法和清除方法</p>
</li>
<li><p>try-with-resources优先于try-finally</p>
</li>
</ol>
<h1 id="对于所有对象都通用的方法"><a href="#对于所有对象都通用的方法" class="headerlink" title="对于所有对象都通用的方法"></a>对于所有对象都通用的方法</h1><ol start="10">
<li><p>覆盖Equals时请遵守通用约定</p>
</li>
<li><p>覆盖equals时总要覆盖hashCode</p>
</li>
<li><p>始终要覆盖toString</p>
</li>
<li><p>谨慎的覆盖clone</p>
</li>
<li><p>考虑实现Comparable接口</p>
</li>
</ol>
<h1 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h1><ol start="15">
<li><p>使用类和成员的可访问性最小化</p>
</li>
<li><p>要在公有类而非公有域中使用访问方法</p>
</li>
<li><p>使可变性最小化</p>
</li>
<li><p>复合优先于集成</p>
</li>
<li><p>要么设计继承并提供文档说明，要么继承</p>
</li>
<li><p>接口优于抽象类</p>
</li>
<li><p>为后代设计接口</p>
</li>
<li><p>接口只用于定义类型</p>
</li>
<li><p>类层次优于标签类</p>
</li>
<li><p>静态成员类由于非静态成员类</p>
</li>
<li><p>限制源文件为单个顶级类</p>
</li>
</ol>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ol start="26">
<li><p>请不要使用原生态类型</p>
</li>
<li><p>消除非受检的警告</p>
</li>
<li><p>列表由于数组</p>
</li>
<li><p>优先考虑泛型</p>
</li>
<li><p>优先考虑泛型方法</p>
</li>
<li><p>利用有限限制通配符来提升API的灵活性</p>
</li>
<li><p>谨慎并用泛型和可变参数</p>
</li>
<li><p>优先考虑类型安全的异构容器</p>
</li>
</ol>
<h1 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h1><ol start="34">
<li><p>用enum代替int常量</p>
</li>
<li><p>用实例域代替序数</p>
</li>
<li><p>用EnumSet代替位域</p>
</li>
<li><p>用EnumMap代替序数索引</p>
</li>
<li><p>用接口模拟可扩展的枚举</p>
</li>
<li><p>注解优先于明明模式</p>
</li>
<li><p>坚持使用Override注解</p>
</li>
<li><p>用标记接口定义类型</p>
</li>
</ol>
<h1 id="Lamda和stream"><a href="#Lamda和stream" class="headerlink" title="Lamda和stream"></a>Lamda和stream</h1><ol start="42">
<li><p>Lamda优先于匿名类</p>
</li>
<li><p>方法引用优先于Lamda</p>
</li>
<li><p>坚持使用标准的函数接口</p>
</li>
<li><p>谨慎使用Stream</p>
</li>
<li><p>优先选择Stream中无副作用的函数</p>
</li>
<li><p>Stream要优先用Collection作为返回类型</p>
</li>
<li><p>谨慎使用Stream并行</p>
</li>
</ol>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol start="49">
<li><p>检查参数的有效性</p>
</li>
<li><p>必要时进行保护性拷贝</p>
</li>
<li><p>谨慎设计方法签名</p>
</li>
<li><p>慎用重载</p>
</li>
<li><p>慎用可变参数</p>
</li>
<li><p>返回零长度的数组或者集合，而不是null</p>
</li>
<li><p>谨慎返回optional</p>
</li>
<li><p>为所有导出的API元素编写文档注释</p>
</li>
</ol>
<h1 id="通用编程"><a href="#通用编程" class="headerlink" title="通用编程"></a>通用编程</h1><ol start="57">
<li><p>将局部变量的作用域最小化</p>
</li>
<li><p>for-each循环优先传统的for循环</p>
</li>
<li><p>了解和使用类库</p>
</li>
<li><p>如果需要精确的答案，请避免使用float和double</p>
</li>
<li><p>基本类型优先于装箱基本类型</p>
</li>
<li><p>如果其他类型更适合，则尽量避免使用字符串</p>
</li>
<li><p>了解字符串连接的性能</p>
</li>
<li><p>通过接口引用对象</p>
</li>
<li><p>接口优先于反射机制</p>
</li>
<li><p>谨慎地使用本地方法</p>
</li>
<li><p>谨慎地进行优化</p>
</li>
<li><p>遵守普遍接受的命名惯例</p>
</li>
</ol>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><ol start="69">
<li><p>只针对异常的情况才使用异常</p>
</li>
<li><p>对可恢复的情况使用受检异常，对编程错误使用运行时异常</p>
</li>
<li><p>避免不必要地使用受检异常</p>
</li>
<li><p>优先使用标准的异常</p>
</li>
<li><p>抛出与抽象对应的异常</p>
</li>
<li><p>每个方法抛出的所有异常都要建立文档</p>
</li>
<li><p>在细节消息中包含失败捕获信息</p>
</li>
<li><p>努力使失败保持原子性</p>
</li>
<li><p>不要忽略异常</p>
</li>
</ol>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><ol start="78">
<li><p>同步访问共享的可变数据</p>
</li>
<li><p>避免过度同步</p>
</li>
<li><p>executor，task和stream优先于线程</p>
</li>
<li><p>并发工具优先于wait和notify</p>
</li>
<li><p>线程安全性的文档化</p>
</li>
<li><p>慎用延迟初始化</p>
</li>
<li><p>不要依赖于线程调度器</p>
</li>
</ol>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><ol start="85">
<li><p>其他方法优先于Java序列化</p>
</li>
<li><p>谨慎地实现Serializable接口</p>
</li>
<li><p>考虑使用自定义地序列化形式</p>
</li>
<li><p>保护性地编写readOjbect方法</p>
</li>
<li><p>对于实例控制，枚举类型优先于readResolve</p>
</li>
<li><p>考虑用序列化代理代替序列化实例</p>
</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM Bytecode Execution Engine Subsystem</title>
    <url>/2019/02/13/Java/JVM-Bytecode-Execution-Engine-Subsystem/</url>
    <content><![CDATA[<p>JVM执行引擎是Java虚拟机核心组件之一。物理机的执行引擎是直接建立在处理器、硬件、指令集和操作系统层面上，而虚拟机的执行引擎是自己实现的，可以自行制定指令集与执行引擎的结构体系，并且能够执行那些不被硬件直接支持的指令集格式。</p>
<h1 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h1><p>栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈（Virtual Machine Stack）￼的栈元素。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。</p>
<p>每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。在编译程序代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到方法表的Code属性之中￼，因此一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p>
<p><img src="/2019/02/13/Java/JVM-Bytecode-Execution-Engine-Subsystem/StackFrame.jpg" alt="StackFrame"></p>
<h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><p>局部变量表（Local Variable Table）是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序编译为Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的局部变量表的最大容量。</p>
<p>局部变量表的容量以变量槽（Variable Slot，下称Slot）为最小单位，虚拟机规范中并没有明确指明一个Slot应占用的内存空间大小，只是很有导向性地说到每个Slot都应该能存放一个boolean、byte、char、short、int、float、reference或returnAddress类型的数据，这8种数据类型，都可以使用32位或更小的物理内存来存放。</p>
<p>方法执行时，如果执行的是实例方法，那局部变量表中第0位索引的默认是this的引用，即实例本身。</p>
<p>注1：与虚拟机模型设计不同的是，执行引擎的实现为了节约局部变量表的空间，局部变量表的Slothi可以重用的。</p>
<p><img src="/2019/02/13/Java/JVM-Bytecode-Execution-Engine-Subsystem/LocalVariable.jpg" alt="LocalVariable"></p>
<p>注2：局部变量定义了但没有赋初始值是不能使用的，因为局部变量的加载没有类加载的准备和初始化阶段。</p>
<h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><p>操作数栈（Operand Stack）也常称为操作栈，它是一个后入先出（Last In First Out, LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候写入到Code属性的max_stacks数据项中。操作数栈的每一个元素可以是任意的Java数据类型，包括long和double。</p>
<h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接</p>
<h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><p>当一个方法开始执行后，只有两种方式可以退出这个方法。</p>
<p>第一种方式是执行引擎遇到任意一个方法返回的字节码指令，这时候可能会有返回值传递给上层的方法调用者（调用当前方法的方法称为调用者），是否有返回值和返回值的类型将根据遇到何种方法返回指令来决定，这种退出方法的方式称为正常完成出口（Normal Method Invocation Completion）。</p>
<p>另外一种退出方式是，在方法执行过程中遇到了异常，并且这个异常没有在方法体内得到处理，无论是Java虚拟机内部产生的异常，还是代码中使用athrow字节码指令产生的异常，只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，这种退出方法的方式称为异常完成出口（Abrupt Method Invocation Completion）。一个方法使用异常完成出口的方式退出，是不会给它的上层调用者产生任何返回值的。</p>
<h2 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h2><p>调试信息等，属于虚拟机可以自由实现的部分。</p>
<h1 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h1><p>方法调用阶段是确定被调用方法版本的过程。Java的编译过程并不存在连接过程，是在JVM运行时进行动态调用的。</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用，这种解析能成立的前提是：方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的。换句话说，调用目标在程序代码写好、编译器进行编译时就必须确定下来。这类方法的调用称为解析（Resolution）。</p>
<ul>
<li>invokestatic：调用静态方法。</li>
<li>invokespecial：调用实例构造器<code>&lt;init&gt;</code>方法、私有方法和父类方法。</li>
<li>invokevirtual：调用所有的虚方法。</li>
<li>invokeinterface：调用接口方法，会在运行时再确定一个实现此接口的对象。</li>
<li>invokedynamic：先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法，在此之前的4条调用指令，分派逻辑是固化在Java虚拟机内部的。其中只要能被invokestatic和invokespecial指令调用的方法（即非虚方法），都属于静态解析可以确定调用版本的，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。</li>
</ul>
<h2 id="分派Dispatch"><a href="#分派Dispatch" class="headerlink" title="分派Dispatch"></a>分派Dispatch</h2><p>分派调用过程是Java多态的一种基本体现，主要是有重载、重写两块。</p>
<h3 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h3><p>在编译阶段，依赖静态类型来定位方法执行版本的动作成为静态分派。典型应用是方法重载。但是，在很多情况下，重载版本并不唯一，所以虚拟机在运行时也会选更加合适的版本。</p>
<p>静态分派示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.fenixsoft.polymorphic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticDispatch</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Human</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Human guy)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, guy!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Man guy)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, gentleman!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Woman guy)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, lady!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Human</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">Human</span> <span class="variable">woman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        <span class="type">StaticDispatch</span> <span class="variable">sr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticDispatch</span>();</span><br><span class="line">        sr.sayHello(man);</span><br><span class="line">        sr.sayHello(woman);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实际类型变化，编译器并不能在编译时就这道，只能在运行时才可以确定的。</span></span><br><span class="line">        man = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        sr.sayHello(man);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态类型变化</span></span><br><span class="line">        sr.sayHello((Woman) man);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello, guy!</span><br><span class="line">hello, guy!</span><br><span class="line">hello, guy!</span><br><span class="line">hello, lady!</span><br></pre></td></tr></table></figure>

<p>重载方法匹配优先级代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.polymorphic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Overload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello Object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello int&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">long</span> arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello long&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Character arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello Character&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">char</span> arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello char&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">char</span>... arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello char ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Serializable arg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello Serializable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        sayHello(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>代码输出：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello char</span><br></pre></td></tr></table></figure></li>
<li>注释掉sayHello(char arg)方法，代码输出：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello int</span><br></pre></td></tr></table></figure></li>
<li>注释掉sayHello(int arg),代码输出：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello long</span><br></pre></td></tr></table></figure></li>
<li>注释掉sayHello(long arg),代码输出：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello Character</span><br></pre></td></tr></table></figure></li>
<li>注释掉sayHello(Character arg),代码输出：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello Serializable</span><br></pre></td></tr></table></figure></li>
<li>注释掉sayHello(Serializable arg),代码输出：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello Object</span><br></pre></td></tr></table></figure></li>
<li>注释掉sayHello(Object arg),代码输出：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello char ...</span><br></pre></td></tr></table></figure>
这个示例生动的展示了JVM在运行时静态分派时，是从继承关系中从下往上开始搜索，越接近上层的优先级越低。即使方法调用传入的参数值为null，这个规则仍然适用。变长参数的重载优先级是最低的。</li>
</ul>
<h3 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h3><p>动态分派是重写的重要体现。</p>
<p>动态分派示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fenixsoft.polymorphic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDispatch</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;man say hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;woman say hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Human</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">Human</span> <span class="variable">woman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        man.sayHello(); <span class="comment">// invokevirtual #21  // Method org/fenixsoft/polymorphic/Dynamic-Dispatch$Human.sayHello:()V</span></span><br><span class="line">        woman.sayHello(); <span class="comment">// invokevirtual #21</span></span><br><span class="line">        man = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        man.sayHello(); <span class="comment">// invokevirtual #21</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man say hello</span><br><span class="line">woman say hello</span><br><span class="line">woman say hello</span><br></pre></td></tr></table></figure>

<p>从字节码的角度来看， sayHello()方法均是通过invokevirtual指令触发，但是最终的执行方法版本却完全不同，invokevirtual执行的运行时解析过程如下：</p>
<ol>
<li>找到操作数栈顶的第一个元素所指向的对象的实际类型，记作C。</li>
<li>如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang. IllegalAccessError异常。</li>
<li>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</li>
<li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</li>
</ol>
<h3 id="单分派与多分派"><a href="#单分派与多分派" class="headerlink" title="单分派与多分派"></a>单分派与多分派</h3><p>方法的宗量，即方法的接收者与方法的参数统称。可以有单宗量分派，即根据一个宗量对目标方法进行选择。也可以有多宗量分派，即根据多个宗量对目标方法进行选择。Java的静态分派属于多分派类型。JVM在运行时动态分派属于单宗量分派。</p>
<p>单分派和多分派代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dispatch</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">QQ</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">_360</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hardChoice</span><span class="params">(QQ arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;father choose qq&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">hardChoice</span><span class="params">(_360 arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;father choose 360&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Son</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">hardChoice</span><span class="params">(QQ arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;son choose qq&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">hardChoice</span><span class="params">(_360 arg)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;son choose 360&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">        <span class="type">Father</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="comment">// 静态分派：多宗量分派，方法接收者静态类型是Father,方法参数是_360 invokevirtual Father.hardChoice(360)</span></span><br><span class="line">        <span class="comment">// 动态分派：单宗量分派，方法接收者实际类型是Father，执行 Father.hardChoice(360)</span></span><br><span class="line">        father.hardChoice(<span class="keyword">new</span> <span class="title class_">_360</span>());</span><br><span class="line">        <span class="comment">// 静态分派：静态类型是Father，方法参数是QQ invokevirtual Father.hardChoice(QQ)</span></span><br><span class="line">        <span class="comment">// 动态分派：实际类型是Son，执行Son.hardChoice(QQ)</span></span><br><span class="line">        son.hardChoice(<span class="keyword">new</span> <span class="title class_">QQ</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">father choose 360</span><br><span class="line">son choose qq</span><br></pre></td></tr></table></figure>

<h3 id="虚拟机动态分派的实现"><a href="#虚拟机动态分派的实现" class="headerlink" title="虚拟机动态分派的实现"></a>虚拟机动态分派的实现</h3><p>处于性能考虑，动态分派常用”稳定优化“手段：在类的方法区建立一个虚方法表(Virtual Method Table, vtable)，和接口方法表(Interface Method Table, itable)。从而虚拟机不需要进行元数据查找，直接通过虚方法表确定应该执行的方法版本。</p>
<p><img src="/2019/02/13/Java/JVM-Bytecode-Execution-Engine-Subsystem/vtable.jpg" alt="vtable"></p>
<h2 id="动态类型语言支持"><a href="#动态类型语言支持" class="headerlink" title="动态类型语言支持"></a>动态类型语言支持</h2><p>动态语言的关键特征是它的类型检查的主体过程实在运行期而不是编译期，代码会更加简洁。而静态语言在编译器确定类型，最显著的好处是编译器可以提供严谨的类型检查，利于稳定性及代码达到更大规模。目前JVM支持的动态语言有Clojure, Groovy, Jython, JRuby等。</p>
<h1 id="字节码解释执行引擎"><a href="#字节码解释执行引擎" class="headerlink" title="字节码解释执行引擎"></a>字节码解释执行引擎</h1><p>本节探讨的是JVM将会如何对方法中的字节码进行解释执行的。</p>
<ul>
<li>传统编译过程是从程序源码到目标代码的一个过程，代表有C&#x2F;C++语言。</li>
<li>Java是采用了现代的编译原理思路，把源码转化成抽象语法树，再由JVM进行解释执行，属于编译半独立实现。C#也是一种半独立实现的编译语言。</li>
<li>而有些语言则将词法分析，抽象语法树，解释执行都封装在一起，例如JavaScript执行器，这类语言一般属于动态语言。</li>
</ul>
<p><img src="/2019/02/13/Java/JVM-Bytecode-Execution-Engine-Subsystem/JIT.jpg" alt="JIT"></p>
<h2 id="指令集架构"><a href="#指令集架构" class="headerlink" title="指令集架构"></a>指令集架构</h2><p>现在的指令执行主要有两种执行方式：</p>
<ol>
<li>基于栈的指令集架构<ul>
<li>可移植</li>
<li>执行速度相对较慢</li>
</ul>
</li>
<li>基于寄存器的指令集架构<ul>
<li>执行速度快</li>
</ul>
</li>
</ol>
<p>Java是基于栈的指令集架构。</p>
<h2 id="基于栈的解释器执行过程示例"><a href="#基于栈的解释器执行过程示例" class="headerlink" title="基于栈的解释器执行过程示例"></a>基于栈的解释器执行过程示例</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合框架</title>
    <url>/2018/12/08/Java/Java-Collections/</url>
    <content><![CDATA[<h1 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h1><blockquote>
<p>Reference Link: <a href="http://www.runoob.com/java/java-collections.html">http://www.runoob.com/java/java-collections.html</a></p>
</blockquote>
<p>集合框架被设计成要满足以下几个目标。</p>
<ul>
<li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li>
<li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li>
<li>对一个集合的扩展和适应必须是简单的。<br>为此，整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，如下图所示，诸如： LinkedList, HashSet, 和 TreeSet 等,除此之外你也可以通过这些接口实现自己的集合。</li>
</ul>
<p><img src="/2018/12/08/Java/Java-Collections/JavaCollectionsUML.gif" alt="JavaCollectionsUML"></p>
<p>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键&#x2F;值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等。</p>
<p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p>
<ul>
<li>接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li>
<li>实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</li>
<li>算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。<br>除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键&#x2F;值对。尽管 Map 不是集合，但是它们完全整合在集合中。</li>
</ul>
<p>集合框架体系如图所示:</p>
<p><img src="/2018/12/08/Java/Java-Collections/java-coll-architecture.png" alt="JavaCollArch"></p>
<h2 id="集合接口"><a href="#集合接口" class="headerlink" title="集合接口"></a>集合接口</h2><ol>
<li><a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html">Collection 接口</a></li>
</ol>
<p>Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。<br>Collection 接口存储一组不唯一，无序的对象。</p>
<ol start="2">
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/List.html">List 接口</a></li>
</ol>
<p>List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。<br>List 接口存储一组不唯一，有序（插入顺序）的对象。</p>
<ol start="3">
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/Set.html">Set 接口</a></li>
</ol>
<p>Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。<br>Set 接口存储一组唯一，无序的对象。</p>
<ol start="4">
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html">SortedSet 接口</a></li>
</ol>
<p>继承于Set保存有序的集合。</p>
<ol start="5">
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/Map.html">Map 接口</a></li>
</ol>
<p>Map 接口存储一组键值对象，提供key（键）到value（值）的映射。</p>
<ol start="6">
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/Map.Entry.html">Map.Entry 接口</a></li>
</ol>
<p>描述在一个Map中的一个元素（键&#x2F;值对）。是一个Map的内部类。</p>
<ol start="7">
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html">SortedMap 接口</a></li>
</ol>
<p>继承于 Map，使 Key 保持在升序排列。</p>
<ol start="8">
<li><a href="https://www.tutorialspoint.com/java/java_enumeration_interface.htm">Enumeration 接口</a></li>
</ol>
<p>这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</p>
<ol start="9">
<li><a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/queue.html">Queue 接口</a></li>
</ol>
<p>Queue是队列实现，实现了先进先出功能。</p>
<h2 id="集合实现类（集合类）"><a href="#集合实现类（集合类）" class="headerlink" title="集合实现类（集合类）"></a>集合实现类（集合类）</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><table>
<thead>
<tr>
<th align="left">类名</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">AbstractCollection</td>
<td align="center">实现了大部分的集合接口。</td>
</tr>
<tr>
<td align="left">AbstractList</td>
<td align="center">继承于AbstractCollection 并且实现了大部分List接口。</td>
</tr>
<tr>
<td align="left">AbstractSequentialList</td>
<td align="center">继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。</td>
</tr>
<tr>
<td align="left">AbstractSet</td>
<td align="center">继承于AbstractCollection 并且实现了大部分Set接口。</td>
</tr>
<tr>
<td align="left">AbstractMap</td>
<td align="center">实现了大部分的Map接口。</td>
</tr>
</tbody></table>
<h3 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h3><table>
<thead>
<tr>
<th align="left">类名</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LinkedList</td>
<td align="center">该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如: <code>Listlist=Collections.synchronizedList(newLinkedList(...)); </code>LinkedList 查找效率低。</td>
</tr>
<tr>
<td align="left">ArrayList</td>
<td align="center">该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。</td>
</tr>
<tr>
<td align="left">HashSet</td>
<td align="center">该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</td>
</tr>
<tr>
<td align="left">LinkedHashSet</td>
<td align="center">具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现。</td>
</tr>
<tr>
<td align="left">TreeSet</td>
<td align="center">该类实现了Set接口，可以实现排序等功能。</td>
</tr>
<tr>
<td align="left">HashMap</td>
<td align="center">HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。</td>
</tr>
<tr>
<td align="left">TreeMap</td>
<td align="center">继承了AbstractMap，并且使用一颗树。</td>
</tr>
<tr>
<td align="left">WeakHashMap</td>
<td align="center">继承AbstractMap类，使用弱密钥的哈希表。</td>
</tr>
<tr>
<td align="left">LinkedHashMap</td>
<td align="center">继承于HashMap，使用元素的自然顺序对元素进行排序.</td>
</tr>
<tr>
<td align="left">IdentityHashMap</td>
<td align="center">继承AbstractMap类，比较文档时使用引用相等。</td>
</tr>
</tbody></table>
<h3 id="其他：数据结构类"><a href="#其他：数据结构类" class="headerlink" title="其他：数据结构类"></a>其他：数据结构类</h3><table>
<thead>
<tr>
<th align="left">类名</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Vector</td>
<td align="center">该类和ArrayList非常相似，但是该类是同步的，可以用在多线程的情况，该类允许设置默认的增长长度，默认扩容方式为原来的2倍。</td>
</tr>
<tr>
<td align="left">Stack</td>
<td align="center">栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</td>
</tr>
<tr>
<td align="left">Dictionary</td>
<td align="center">Dictionary 类是一个抽象类，用来存储键&#x2F;值对，作用和Map类相似。</td>
</tr>
<tr>
<td align="left">Hashtable</td>
<td align="center">Hashtable 是 Dictionary(字典) 类的子类，位于 java.util 包中。</td>
</tr>
<tr>
<td align="left">Properties</td>
<td align="center">Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。</td>
</tr>
<tr>
<td align="left">BitSet</td>
<td align="center">一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。</td>
</tr>
</tbody></table>
<h2 id="遍历示例代码"><a href="#遍历示例代码" class="headerlink" title="遍历示例代码"></a>遍历示例代码</h2><h3 id="遍历ArrayList"><a href="#遍历ArrayList" class="headerlink" title="遍历ArrayList"></a>遍历ArrayList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">     list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;HAHAHAHA&quot;</span>);</span><br><span class="line">     <span class="comment">//第一种遍历方法使用foreach遍历List</span></span><br><span class="line">     <span class="keyword">for</span> (String str : list) &#123;            <span class="comment">//也可以改写for(int i=0;i&lt;list.size();i++)这种形式</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//第二种遍历，把链表变为数组相关的内容进行遍历</span></span><br><span class="line">     String[] strArray=<span class="keyword">new</span> <span class="title class_">String</span>[list.size()];</span><br><span class="line">     list.toArray(strArray);</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strArray.length;i++) <span class="comment">//这里也可以改写为  foreach(String str:strArray)这种形式</span></span><br><span class="line">     &#123;</span><br><span class="line">        System.out.println(strArray[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//第三种遍历 使用迭代器进行相关遍历</span></span><br><span class="line">     </span><br><span class="line">     Iterator&lt;String&gt; ite=list.iterator();</span><br><span class="line">     <span class="keyword">while</span>(ite.hasNext())<span class="comment">//判断下一个元素之后有值</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(ite.next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第一种：普遍使用，二次取值</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第二种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">       Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第三种：推荐，尤其是容量大时</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//第四种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="题外话：-Java-数组"><a href="#题外话：-Java-数组" class="headerlink" title="题外话： Java 数组"></a>题外话： Java 数组</h1><p>Java 数组是很容易和Java动态数组(ArrayList)进行混淆的数据结构。其实Java数组本身并不具有方法，唯一的属性是length。对于数组的大小也不能改变，很多功能需要借助Utility类Arrays提供的静态方法。</p>
<p>Java中的所有数组都是通过Array类实例化。Array类没有public的构造方法，数组是通过Array的newInstance()方法进行实例化。Java数组是支持所有类型的，也就是说对于自定义引用类型，也能创建数组类型，但是与动态数组的方式不同，内存分配机制上也有所不同。</p>
<h2 id="Array类源码"><a href="#Array类源码" class="headerlink" title="Array类源码"></a>Array类源码</h2><p>数组类的实现主要基于本地方法创建，申请分配一段连续内存，每一个数组元素支持强类型检查。长度不支持扩展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">System</span> &#123;</span><br><span class="line">    <span class="comment">//System 类不能被实例化。 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">System</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">//在 System 类提供的设施中，有标准输入、标准输出和错误输出流；对外部定义的属性</span></span><br><span class="line">    <span class="comment">//和环境变量的访问；加载文件和库的方法；还有快速复制数组的一部分的实用方法。</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * src and dest都必须是同类型或者可以进行转换类型的数组．</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>      src      the source array.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>      srcPos   starting position in the source array.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>      dest     the destination array.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>      destPos  starting position in the destination data.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>      length   the number of array elements to be copied.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src, <span class="type">int</span> srcPos, Object dest,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> destPos, <span class="type">int</span> length)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Array</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Array</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一个具有指定的组件类型和维度的新数组。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newInstance</span><span class="params">(Class&lt;?&gt; componentType, <span class="type">int</span> length)</span></span><br><span class="line">            <span class="keyword">throws</span> NegativeArraySizeException &#123;</span><br><span class="line">        <span class="keyword">return</span> newArray(componentType, length);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title function_">newArray</span><span class="params">(Class componentType, <span class="type">int</span> length)</span></span><br><span class="line">            <span class="keyword">throws</span> NegativeArraySizeException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组声明与初始化"><a href="#数组声明与初始化" class="headerlink" title="数组声明与初始化"></a>数组声明与初始化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接声明空数组</span></span><br><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br><span class="line"><span class="comment">//直接引入数组元素，用花括弧创建</span></span><br><span class="line"><span class="type">int</span> [] arrayRefVar2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//访问时通过下标访问</span></span><br><span class="line">System.out.println(arrayRefVar2[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="多维数组声明与初始化"><a href="#多维数组声明与初始化" class="headerlink" title="多维数组声明与初始化"></a>多维数组声明与初始化</h2><p>多维数组其实就是一维数组的嵌套扩展，维度取决于数组各个元素的类型，如果是一个数组则能增加一个维度。因此多维数组的创建与访问也是基于一维数组的方法。Array类属性只有length一个，访问是基于下标的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接声明矩阵二维数组</span></span><br><span class="line">dataType[][] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[colsize][rowsize];</span><br><span class="line"><span class="comment">//分段申明非矩阵二维数组</span></span><br><span class="line">dataType[][] arrayRefVar2 = <span class="keyword">new</span> <span class="title class_">dataType</span>[colsize][];</span><br><span class="line">arrayRefVar2[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">dataType</span>[row1size];</span><br><span class="line">arrayRefVar2[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">dataType</span>[row2size];</span><br><span class="line"><span class="comment">//直接引入数组元素，用嵌套花括弧创建，按照维度分配，第一个是第一列</span></span><br><span class="line"><span class="type">int</span>[][] arrayint = &#123;</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接引入数组元素，用下标顺序填入</span></span><br><span class="line"><span class="type">int</span>[][] array2 = &#123;<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>], <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的访问是基于下标 array2[col][row]</span></span><br></pre></td></tr></table></figure>


<h1 id="题外话-Arrays-类"><a href="#题外话-Arrays-类" class="headerlink" title="题外话: Arrays 类"></a>题外话: <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html">Arrays 类</a></h1><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。<br>具有以下功能：</p>
<ul>
<li>给数组赋值：通过 fill 方法。</li>
<li>对数组排序：通过 sort 方法,按升序。</li>
<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>
<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法名</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>public static int binarySearch(Object[] a, Object key)</code></td>
<td align="center">用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。</td>
</tr>
<tr>
<td align="left"><code>public static boolean equals(long[] a, long[] a2)</code></td>
<td align="center">如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
<tr>
<td align="left"><code>public static void fill(int[] a, int val)</code></td>
<td align="center">将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
<tr>
<td align="left"><code>public static void sort(Object[] a)</code></td>
<td align="center">对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
</tbody></table>
<h1 id="题外话：-Collections-类"><a href="#题外话：-Collections-类" class="headerlink" title="题外话： Collections 类"></a>题外话： <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html">Collections 类</a></h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM memory management and GC</title>
    <url>/2018/11/07/Java/JVM-memory-management-and-GC/</url>
    <content><![CDATA[<h1 id="Java-memory-allocation"><a href="#Java-memory-allocation" class="headerlink" title="Java memory allocation"></a>Java memory allocation</h1><p>Java虚拟机管理内存会包括以下几个运行时数据区域，如下图所示。</p>
<p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/jvm_memory_allocation.PNG" alt="jvm"></p>
<h2 id="JVM运行时数据区域简介"><a href="#JVM运行时数据区域简介" class="headerlink" title="JVM运行时数据区域简介"></a>JVM运行时数据区域简介</h2><h3 id="程序计数器-Program-Counter-Register"><a href="#程序计数器-Program-Counter-Register" class="headerlink" title="程序计数器(Program Counter Register)"></a>程序计数器(Program Counter Register)</h3><p>程序计数器时当前线程执行字节码的行号指示器。每条线程有独立的程序计数器。</p>
<ul>
<li>如果线程执行Java方法，这个技术及记录的时真该执行的虚拟机字节码指令的地址。</li>
<li>如果线程执行的时Native方法，这个计数器值则为Undefined。</li>
</ul>
<h3 id="Java虚拟机栈-JVM-stacks"><a href="#Java虚拟机栈-JVM-stacks" class="headerlink" title="Java虚拟机栈(JVM stacks)"></a>Java虚拟机栈(JVM stacks)</h3><p>JVM栈也是线程私有的。虚拟机栈描述的时Java方法执行的内存模型：</p>
<ol>
<li>每个方法会先创建一个栈帧Stack Frame，用于存储局部变量表，操作数栈，动态链接，方法出口等信息。</li>
<li>在方法执行完后，该栈帧会出栈。</li>
</ol>
<p>栈内存说的就是虚拟机中局部变量表部分。</p>
<h3 id="Native方法栈"><a href="#Native方法栈" class="headerlink" title="Native方法栈"></a>Native方法栈</h3><p>本地方法栈为虚拟机使用到的Native方法服务。</p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆是虚拟机所管理的内存，被所有线程共享的，目的是存放对象实例。Java堆是垃圾收集器(GC)主要管理的区域。</p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区是用于存储虚拟机的类信息，常量，静态变量，即时编译器编译后的代码等数据，被所有线程共享。在HotSpot虚拟机中，方法区又叫做“永久代”，是因为GC分代收集扩展至方法区，使得方法区由GC中的永久代区域实现。</p>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池是方法区的一部分。本来在方法区中的类信息就包含了除类的版本、字段、方法、接口等描述信息之外，还有一项信息便是常量池，用于存放编译生成的各种字面量和符号引用。常量池信息将在类加载后进入方法区的运行时常量池中存放。同时，一些方法如String类的intern()方法也能将字符串加入运行时常量池。所以在类信息加载完成后，常量池也不是大小就不变的。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是与JVM运行时数据区的一部分。JDK1.4后引入的NIO(New I&#x2F;O)类，引入了一种基于通道(Channel)与缓冲区(Buffer)的I&#x2F;O方式。它可以使用Native函数库直接分配对外内存，然后通过Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。直接内存不属于JVM GC的管理范畴，可以用-Xmx进行设定。</p>
<h2 id="JVM对象的创建"><a href="#JVM对象的创建" class="headerlink" title="JVM对象的创建"></a>JVM对象的创建</h2><p>当JVM遇到一条new指令时，会做出什么样的处理呢?</p>
<ol>
<li><p>检查指令参数是否能在常量池中定位到一个类的符号引用，并确保其被正确的加载、解析和初始化；</p>
</li>
<li><p>在Java堆上分配内存，有两种空闲内存分配方式：</p>
<ul>
<li>空闲列表： 基于Mark-Sweep算法的收集器的GC，如CMS；</li>
<li>指针碰撞： 具有compact过程的收集器的GC，如Serial, ParNew等。</li>
</ul>
</li>
<li><p>为了避免竞争效应即操作的原子性，系统采用如下两种其一的方法：</p>
<ul>
<li>分配内存动作进行同步处理，CAS(Compare and swap)+失败重试机制，</li>
<li>分配内存按照线程划分不同的空间之中进行，即本地线程缓冲机制(TLAB, Thread local allocation buffer)。</li>
</ul>
</li>
<li><p>为新创建对象设置好初始值；</p>
</li>
<li><p>对对象的对象头信息(Object header)进行相关必要设置，如：</p>
<ul>
<li>类型指向</li>
<li>类的元数据</li>
<li>对象哈希值</li>
<li>对象的GC年代信息</li>
</ul>
</li>
<li><p>类文件bytecode中的&lt; init&gt;方法执行；</p>
</li>
</ol>
<blockquote>
<p>init方法是Java的class文件中的各种构造方法经过JIT解释后生成的bytecode代码，一般由invokespecial操作码所调用。</p>
</blockquote>
<p>自此，一个完整的对象就被创建好了。</p>
<h2 id="JVM对象的内存布局"><a href="#JVM对象的内存布局" class="headerlink" title="JVM对象的内存布局"></a>JVM对象的内存布局</h2><p>当JVM对象被创建好了，会被分配在Java堆上，存储布局可以分为三个区域：对象头(header)、实例数据(instance data)和对齐填充(padding)。</p>
<h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>对象头包括两部分，一部分是”Mark Word”,另一部分是类型指针。</p>
<ul>
<li>Mark word: 长度为32bit或64bit。HotSpot 32位虚拟机中具体的对象头存储内容取决于对象的锁状态值，如下：<br>  <img src="/2018/11/07/Java/JVM-memory-management-and-GC/MarkWord.PNG" alt="Markword"></li>
<li>类型指针: 长度为32bit或64bit，用于存储指向类元数据的指针，并不是所有的虚拟机实现都必须在对象数据上保留类型指针。</li>
<li>数组长度：长度为32bit，当对象为数组时，用于存储数组的长度。注：此数组并非ArrayList泛型，后者属于引用类型。</li>
</ul>
<h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3><p>实例数据部分存储了类对象的所有类型的字段内容。每种虚拟机有自己定义好的参数和字段的分配策略。</p>
<h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><p>对齐填充的存在是为了满足HotSpot VM自动内存管理系统要求，保证所有对象的地址都是8字节的整数倍。</p>
<h2 id="Java基础类型内存布局"><a href="#Java基础类型内存布局" class="headerlink" title="Java基础类型内存布局"></a>Java基础类型内存布局</h2><p>java的基本数据类型共有8种，即int,short,long,byte,float,double,boolean,char(注意，并没有String的基本类型)。Java基础类型变量是在(Java虚拟机)栈上分配的，当变量的作用域运行结束后，通过出栈的方式回收分配在栈上的变量内存。</p>
<p>当声明分配一个int类型变量a &#x3D; 3时，JVM会先为该变量创建一个变量为a的引用，再在栈上搜索是否存在字面值为3的引用。</p>
<ul>
<li>如果找到，就直接将a指向3的地址。</li>
<li>如果没有找到，就分配一个内存存放字面值3，并将a指向这个地址。<br>因此说，基础类型字面值在同一个栈上是共享的。</li>
</ul>
<p><strong>问题：已知int类型变量需要32bit内存，具体stack frame上内存分配是什么样子的呢? 变量a是怎么存放的? int类型信息又是放在那里的呢?</strong></p>
<h2 id="JVM对象的访问定位"><a href="#JVM对象的访问定位" class="headerlink" title="JVM对象的访问定位"></a>JVM对象的访问定位</h2><p>对象的访问定位如下图，HOTSOPT用的是第2种算法：</p>
<ol>
<li>使用句柄（先指向堆里的句柄池，再从句柄池找到指针，优点是只需要修改句柄, 缺点就是句柄池也是开销）；</li>
<li>直接指针（减少性能开销）: 需要存2个数据， 到对象实例数据的指针，到对象类数据的指针。<br><img src="/2018/11/07/Java/JVM-memory-management-and-GC/reference.PNG" alt="reference"></li>
</ol>
<h1 id="Garbage-Collection-of-JVM"><a href="#Garbage-Collection-of-JVM" class="headerlink" title="Garbage Collection of JVM"></a>Garbage Collection of JVM</h1><h2 id="GC定义"><a href="#GC定义" class="headerlink" title="GC定义"></a>GC定义</h2><p>Garbage Collection（垃圾回收&#x2F;GC）是JVM对于Java堆上内存在运行时进行的动态管理，主要是对Java堆上不再被引用的对象进行回收。Minor GC是主要快速回收Eden区和Survivor区对象内存，Full GC则会对老年代也进行回收，后者可能会影响性能。</p>
<h2 id="如何确定对象是否需要回收？"><a href="#如何确定对象是否需要回收？" class="headerlink" title="如何确定对象是否需要回收？"></a>如何确定对象是否需要回收？</h2><h3 id="引用计数算法（Reference-Counting）"><a href="#引用计数算法（Reference-Counting）" class="headerlink" title="引用计数算法（Reference Counting）"></a>引用计数算法（Reference Counting）</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>
<p>缺点：存在循环引用的问题。</p>
<h3 id="可达性分析算法（Reachability-Analysis）"><a href="#可达性分析算法（Reachability-Analysis）" class="headerlink" title="可达性分析算法（Reachability Analysis）"></a>可达性分析算法（Reachability Analysis）</h3><p>通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。</p>
<p>GC Roots:</p>
<ul>
<li>虚拟机栈中引用的对象</li>
<li>方法去中类静态属性引用的对象</li>
<li>方法去中常量引用的对象</li>
<li>本地方法栈中JNI（Native方法）引用的对象。</li>
</ul>
<h2 id="如何对对象进行回收？"><a href="#如何对对象进行回收？" class="headerlink" title="如何对对象进行回收？"></a>如何对对象进行回收？</h2><h3 id="标记——清除算法"><a href="#标记——清除算法" class="headerlink" title="标记——清除算法"></a>标记——清除算法</h3><p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/MarkSwap.jpg" alt="MarkSwap"></p>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/Copying.jpg" alt="Copying"></p>
<h3 id="标记——整理算法"><a href="#标记——整理算法" class="headerlink" title="标记——整理算法"></a>标记——整理算法</h3><p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/MarkCompact.jpg" alt="MarkCompact"></p>
<h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>对于新生代和老年代的对象进行不同的清理算法，一般来说，复制算法适合新生代，标记-清除算法和标记整理算法更适合老年代内存。</p>
<h2 id="JVM对象内存管理策略"><a href="#JVM对象内存管理策略" class="headerlink" title="JVM对象内存管理策略"></a>JVM对象内存管理策略</h2><p>GC管理的内存分为三类区域，分别是Eden+Survivor（新生代），Tenured（老年代）和Permanent（永久代）。</p>
<p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/GCRegions.png" alt="GCregion"></p>
<ol>
<li><p>对象优先在Eden分配</p>
</li>
<li><p>大对象直接进入老年代</p>
</li>
<li><p>长期存活的对象将进入老年代</p>
</li>
<li><p>动态对象年龄判定：当Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或者等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。这是为了防止Survivor区溢出。</p>
</li>
</ol>
<h2 id="JVM常用的垃圾收集器"><a href="#JVM常用的垃圾收集器" class="headerlink" title="JVM常用的垃圾收集器"></a>JVM常用的垃圾收集器</h2><p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/GCs.jpg" alt="GCs"></p>
<h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><p>单线程处理<strong>新生代</strong>GC。复制算法。STW</p>
<p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/SerialGC.jpg" alt="Serial/SerialOld"></p>
<h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>采用多线程处理<strong>新生代</strong>GC。复制算法。STW</p>
<p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/ParNewGC.jpg" alt="ParNew"></p>
<h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><p>处理算法和ParNewGC完全一样。<br>但是，Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 &#x3D; 运行用户代码时间 &#x2F;（运行用户代码时间 +垃圾收集时间），虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>
<p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/PSPold.jpg" alt="ParallelScavengeAndParOld"></p>
<h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><p>单线程处理<strong>老年代</strong>GC。采用标记-整理算法。STW</p>
<h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><p>多线程处理<strong>老年代</strong>GC。采用标记整理算法。STW</p>
<h3 id="CMS-Concurrent-Mark-Sweep-收集器"><a href="#CMS-Concurrent-Mark-Sweep-收集器" class="headerlink" title="CMS(Concurrent Mark Sweep)收集器"></a>CMS(Concurrent Mark Sweep)收集器</h3><p>四个阶段（基于标记-清理算法）：</p>
<ul>
<li>初始标记 STW</li>
<li>并发标记</li>
<li>再次标记 STW</li>
<li>并发清理</li>
</ul>
<p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/CMS.jpg" alt="CMS"></p>
<p>问题：</p>
<ol>
<li>并发清理时预留空间不够造成并发清理(Concurrent Mode Failure)失败&#x3D;&gt;浮动垃圾(Floating Gabage)过多。</li>
<li>内存碎片化问题。一旦发生大对象触发的FullGC，Serial Old回收则会出现长时间STW。</li>
</ol>
<ul>
<li><p>CMS并发三色标记法</p>
<ol>
<li>黑色：已经标记完引用对象的颜色</li>
<li>灰色：没有标记完引用对象的颜色</li>
<li>白色：默认垃圾（没有被标记颜色）</li>
</ol>
<ul>
<li><p>标记问题：</p>
<ol>
<li>本来A-&gt;B, B-&gt;D;</li>
<li>在A标记完，B部分标记后，B-&gt;D引用消失，D没有被标记，A-&gt;D引用建立</li>
<li>由于D从始至终都没有被标记</li>
</ol>
</li>
<li><p>标记问题一Incremental Update更正：</p>
<ol>
<li>对于A-&gt;D（白)的引用建立，把A修正成灰色。</li>
</ol>
</li>
<li><p>Incremental Update更正存在的ABA问题：</p>
<ol>
<li>回收线程一：标记A属性1，正在标记属性2</li>
<li>业务逻辑线程二：把属性1指向白色D， A保持灰色</li>
<li>回收线程三: 更新属性2的标记，将A标记为黑色</li>
</ol>
</li>
<li><p>CMS最终解决方案：必须STW从头扫描一次</p>
</li>
</ul>
</li>
</ul>
<h3 id="G1-Garbage-First-收集器"><a href="#G1-Garbage-First-收集器" class="headerlink" title="G1(Garbage First)收集器"></a>G1(Garbage First)收集器</h3><p>启动G1需要参数<code>-XX:+UseG1GC</code>，G1不是与其他GC分代处理垃圾的，而是对新生代和老年代均进行不同的GC。</p>
<p>Young GC:</p>
<ul>
<li>标记-清除-复制算法整理 STW<br>只对新生代区块进行清理，但是也会需要扫描所有region的Rset，否则不知道有哪些Old-&gt;Young的引用。</li>
</ul>
<p>Mixed GC:<br>处理Mixed GC时只将将部分old区块进行回收。Rset记录了其他区块对本区块的引用。最终的扫描区域为Young+对Rset进行扫描，缩短了原来需要扫描整个Old时间。而且Young&lt;-&gt;Old的引用都能快速找到。</p>
<p>并发标记分为四个阶段(基于标记-整理算法)：</p>
<ul>
<li>初始标记 STW</li>
<li>并发标记</li>
<li>最终标记 STW </li>
<li>筛选回收 STW 根据停顿时间要求筛选出Old中的Cset集合，作为回收目标。</li>
</ul>
<p>回收evacuation阶段（小区块进行复制整理避免碎片）：<br>需要STW，将选出的Cset中的对象进行复制到新的区块，清除掉原来的区块，达到收集的效果。</p>
<p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/G1.jpg" alt="G1"></p>
<h3 id="ZGC-Z-Garbage-Collector-收集器"><a href="#ZGC-Z-Garbage-Collector-收集器" class="headerlink" title="ZGC(Z Garbage Collector)收集器"></a>ZGC(Z Garbage Collector)收集器</h3><p>ZGC（Z Garbage Collector）是一款由Oracle公司研发的，以低延迟为首要目标的一款垃圾收集器。它是基于动态Region内存布局，（暂时）不设年龄分代，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的收集器。在JDK 11新加入，还在实验阶段，主要特点是：回收TB级内存（最大4T），停顿时间不超过10ms。m目前ZGC是实验性功能，可以通过<code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code>参数启动ZGC。</p>
<h3 id="垃圾收集器参数"><a href="#垃圾收集器参数" class="headerlink" title="垃圾收集器参数"></a>垃圾收集器参数</h3><p><img src="/2018/11/07/Java/JVM-memory-management-and-GC/GCArgs.jpg" alt="GCArgs"></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Stream API</title>
    <url>/2018/12/11/Java/Java-Streams/</url>
    <content><![CDATA[<h1 id="Java-Streams"><a href="#Java-Streams" class="headerlink" title="Java Streams"></a>Java Streams</h1><p>Java在JDK1.8中引入了Stream API,支持对流的处理。流处理类似于对于数据库数据流进行只读操作后求得某种结果，有如下特点:</p>
<p><img src="/2018/12/11/Java/Java-Streams/JavaStream.png" alt="Java-Streams"></p>
<ol>
<li>stream不存储数据</li>
<li>stream不改变源数据</li>
<li>stream的延迟执行特性</li>
</ol>
<h2 id="Stream-API-简述"><a href="#Stream-API-简述" class="headerlink" title="Stream API 简述"></a>Stream API 简述</h2><h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><p>Stream.of(Collection<T> collections)时Stream类的静态方法，可以将集合数据转化为Stream。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Stream.of()</span></span><br><span class="line">Stream&lt;Student&gt; stream = Stream.of(stuArr);</span><br><span class="line"><span class="comment">//Arrays.stream</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br></pre></td></tr></table></figure>

<h3 id="Stream操作"><a href="#Stream操作" class="headerlink" title="Stream操作"></a>Stream操作</h3><blockquote>
<p>Reference Link: <a href="https://www.cnblogs.com/CarpenterLee/p/6545321.html">https://www.cnblogs.com/CarpenterLee/p/6545321.html</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">操作类型</th>
<th align="center">接口方法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">中间操作</td>
<td align="center">concat() distinct() filter() flatMap() limit() map() peek() skip() sorted() parallel() sequential() unordered()</td>
</tr>
<tr>
<td align="left">结束操作</td>
<td align="center">allMatch() anyMatch() collect() count() findAny() findFirst() forEach() forEachOrdered() max() min() noneMatch() reduce() toArray()</td>
</tr>
</tbody></table>
<p>对于接口方法的传入参数，是各种函数接口，可以用lamda表达式方便的书写。下面介绍几个经典的API使用：</p>
<ol>
<li>forEach()</li>
</ol>
<p>forEach(Consumer&lt;? super E&gt; action)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Stream.forEach()迭代</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>filter()</li>
</ol>
<p>filter(Predicate&lt;? super E&gt; predicate)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保留长度等于3的字符串</span></span><br><span class="line">Stream&lt;String&gt; stream= Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.filter(str -&gt; str.length()==<span class="number">3</span>)</span><br><span class="line">    .forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>map()</li>
</ol>
<p><R> Stream<R> map(Function&lt;? super T,? extends R&gt; mapper)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream　= Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.map(str -&gt; str.toUpperCase())</span><br><span class="line">    .forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>reduce()</li>
</ol>
<blockquote>
<p>reference Link: <a href="http://www.cnblogs.com/CarpenterLee/p/6550212.html">http://www.cnblogs.com/CarpenterLee/p/6550212.html</a></p>
</blockquote>
<ul>
<li>Optional<T> reduce(BinaryOperator<T> accumulator)</li>
<li>T reduce(T identity, BinaryOperator<T> accumulator)</li>
<li>&lt;U&gt; U reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最长的单词</span></span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; longest = stream.reduce((s1, s2) -&gt; s1.length()&gt;=s2.length() ? s1 : s2);</span><br><span class="line"><span class="comment">//Optional&lt;String&gt; longest = stream.max((s1, s2) -&gt; s1.length()-s2.length());</span></span><br><span class="line">System.out.println(longest.get());</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>collect()</li>
</ol>
<ul>
<li><R> R collect(Supplier<R> supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</li>
<li>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//　将Stream规约成List</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(ArrayList::<span class="keyword">new</span>, ArrayList::add, ArrayList::addAll);<span class="comment">// 方式１</span></span><br><span class="line"><span class="comment">//List&lt;String&gt; list = stream.collect(Collectors.toList());// 方式2</span></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<h2 id="LINQ-in-C"><a href="#LINQ-in-C" class="headerlink" title="LINQ in C#"></a>LINQ in C#</h2><p>与Java语言相比，C#引入了LINQ，lamda表达式和扩展方法来更好的支持chaining operation。LinQ支持所有实现了Enumberable接口的类型。</p>
<ol>
<li><p>ForEach()</p>
<p> .ForEach(Action<T> action)</p>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; stringList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;（）;</span><br><span class="line">   stringList.Add(<span class="string">&quot;I&quot;</span>);</span><br><span class="line">   stringList.Add(<span class="string">&quot;love&quot;</span>);</span><br><span class="line">   stringList.Add(<span class="string">&quot;you&quot;</span>);</span><br><span class="line">   stringList.Add(<span class="string">&quot;too&quot;</span>);</span><br><span class="line">   stringList.ForEach(a =&gt; Console.WriteLine(a));</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>Where()</p>
<p> .Where(Func&lt;T, bool&gt; function)</p>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">stringList.Where( x=&gt; x.Length == <span class="number">3</span>)</span><br><span class="line">            .ForEach( x=&gt; Console.WriteLine(x));</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>Select()</p>
<p> .Select(Func&lt;T, int, R&gt; function)</p>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">stringList.Selct((x, i) =&gt; x.ToUpper())</span><br><span class="line">            .ForEach( x=&gt; Console.WriteLine(x));</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>Aggregate()</p>
<p> .Aggregate(A, Func&lt;A, T, A&gt; function, Func&lt;A, R&gt; function2)</p>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">stringList.Aggregate(<span class="string">&quot;&quot;</span>, (cur, next) =&gt; cur.Length &gt; next.Length ? cur : next, x =&gt; Console.WriteLine(x));</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>扩展方法，Java collect()方法是.NET扩展方法功能的一种实现，C#通过定义扩展方法更好的支持LINQ的Chaining功能，使得Java Collectors的接口都可以直接通过相似的方法实现。</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">stringList.Select(x=&gt;x).toList();</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>How to use Hexo on github pages.</title>
    <url>/2018/04/08/Runbooks/My-first-post/</url>
    <content><![CDATA[<h2 id="Welcome-to-Sunny’s-hexo-post"><a href="#Welcome-to-Sunny’s-hexo-post" class="headerlink" title="Welcome to Sunny’s hexo post"></a>Welcome to Sunny’s hexo post</h2><p>本文主要介绍一种常见的个人博客管理方式，利用现有的Hexo静态博客模板管理和生成静态博客文档，和github pages对git repo页面的原生发布功能进行博客展示。同时，博客文档也能在本地生成，部署，存档，较于现有的博客工具具有更好的功能扩展。</p>
<h3 id="Prepare-Node-js"><a href="#Prepare-Node-js" class="headerlink" title="Prepare Node.js"></a>Prepare Node.js</h3><p>Hexo is Node.js based npm plugin, which provides many extensions and powerful blog management functionality.</p>
<h3 id="Use-Hexo-to-manage-blogs"><a href="#Use-Hexo-to-manage-blogs" class="headerlink" title="Use Hexo to manage blogs"></a>Use Hexo to manage blogs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo --save</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span> <span class="comment"># hexo new draft &quot;My New Draft&quot;</span></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="Use-SSH-git-management"><a href="#Use-SSH-git-management" class="headerlink" title="Use SSH git management"></a>Use SSH git management</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;&#123;yourgithubaddress&#125;&quot;</span></span><br><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h3 id="Create-username-github-io-repo-for-statics-hexo-pages"><a href="#Create-username-github-io-repo-for-statics-hexo-pages" class="headerlink" title="Create {username}.github.io repo for statics hexo pages"></a>Create {username}.github.io repo for statics hexo pages</h3><h3 id="Configure-config-yml-file-for-hexo-blogs-and-deployments"><a href="#Configure-config-yml-file-for-hexo-blogs-and-deployments" class="headerlink" title="Configure _config.yml file for hexo blogs and deployments"></a>Configure _config.yml file for hexo blogs and deployments</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://&#123;username&#125;.github.io/</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&#123;username&#125;/&#123;username&#125;.githubm.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: &quot;Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Deploy-hexo-static-files-to-target-repo"><a href="#Deploy-hexo-static-files-to-target-repo" class="headerlink" title="Deploy hexo static files to target repo"></a>Deploy hexo static files to target repo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>Useful links:<br><a href="https://blog.csdn.net/android_msk/article/details/75040841">Hexo with pictures</a>,<br><a href="https://bingyue.github.io/2017/03/08/%E4%BD%BF%E7%94%A8Github-Pages%E5%92%8CHexo%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/">Hexo Deployment</a>,<br><a href="https://yq.aliyun.com/articles/72002">Jekyll vs Hexo</a>,<br><a href="https://coding.net/help/doc/project/markdown.html">Markdown</a>,<br><a href="https://www.jianshu.com/p/1e402922ee32/">Markdown brief</a>,<br><a href="https://blog.csdn.net/u013553529/article/details/50629055">Markdown highlights</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Runbooks</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Git best practices</title>
    <url>/2019/03/29/Runbooks/Git-best-practices/</url>
    <content><![CDATA[<h1 id="Git-基本操作"><a href="#Git-基本操作" class="headerlink" title="Git 基本操作"></a>Git 基本操作</h1><h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h2 id="查看代码情况"><a href="#查看代码情况" class="headerlink" title="查看代码情况"></a>查看代码情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git diff &#123;filepath&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &#123;clone.git&#125;</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line">git push orgin master</span><br></pre></td></tr></table></figure>

<h2 id="保存-x2F-恢复临时修改文件"><a href="#保存-x2F-恢复临时修改文件" class="headerlink" title="保存&#x2F;恢复临时修改文件"></a>保存&#x2F;恢复临时修改文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout stash@&#123;0&#125; -- &#123;filepath&#125;</span><br></pre></td></tr></table></figure>

<h2 id="读取文件历史版本"><a href="#读取文件历史版本" class="headerlink" title="读取文件历史版本"></a>读取文件历史版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &#123;commithash&#125; -- &#123;filepath&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a v1.0  <span class="comment"># tag most recent commit</span></span><br><span class="line">git tag -a v0.9 85fc7e7 <span class="comment"># tag on a specific commit</span></span><br><span class="line">git tag <span class="comment"># view tags</span></span><br></pre></td></tr></table></figure>

<h1 id="Pull-x2F-Fork工作流"><a href="#Pull-x2F-Fork工作流" class="headerlink" title="Pull&#x2F;Fork工作流"></a>Pull&#x2F;Fork工作流</h1><ol>
<li>fork from the github</li>
<li>clone to local and commit changes<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &#123;clone.git&#125;</span><br><span class="line">git checkout -b feature</span><br><span class="line"><span class="comment"># make changes to this branch</span></span><br><span class="line">git add -p</span><br><span class="line">git commit -m <span class="string">&quot;feature message&quot;</span></span><br><span class="line">git push origin feature</span><br></pre></td></tr></table></figure></li>
<li>rebase commits after remote master<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add upstream &#123;remote.git&#125;</span><br><span class="line">git pull upstream master</span><br><span class="line"><span class="comment"># no changes on master, then automatically git history is updated</span></span><br><span class="line">git checkout feature</span><br><span class="line">git pull --rebase origin master</span><br><span class="line"><span class="comment"># apply changes from origin master to feature newly commits</span></span><br><span class="line">git push origin feature --force</span><br></pre></td></tr></table></figure></li>
<li>raise pull request for code review</li>
</ol>
<h1 id="提交历史管理"><a href="#提交历史管理" class="headerlink" title="提交历史管理"></a>提交历史管理</h1><h2 id="缩减冗余commit-log"><a href="#缩减冗余commit-log" class="headerlink" title="缩减冗余commit log"></a>缩减冗余commit log</h2><ul>
<li>通过rebase修改commit history</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rewrite last 10 commit logs</span></span><br><span class="line">git rebase -i HEAD~10 feature</span><br><span class="line">git push orign feature --force</span><br></pre></td></tr></table></figure>

<ul>
<li>通过squash命令压缩commit history</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD~12 <span class="comment"># 将git指针定位到历史版本</span></span><br><span class="line"></span><br><span class="line">git merge --squash HEAD@&#123;1&#125; <span class="comment"># 从该点开始merge到最新的版本</span></span><br><span class="line"></span><br><span class="line">git commmit -m <span class="string">&quot;xxx&quot;</span> <span class="comment"># 提交commit重写</span></span><br><span class="line"></span><br><span class="line">git push origin master --force <span class="comment"># 强制改写历史</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h2><p>在创建新的local分支时，也可以添加commit hash告诉git分支最新的HEAD指向</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature</span><br><span class="line"><span class="comment"># create a branch based on current branch</span></span><br></pre></td></tr></table></figure>

<h2 id="切换分支-x2F-从Detached-HEAD切换"><a href="#切换分支-x2F-从Detached-HEAD切换" class="headerlink" title="切换分支&#x2F;从Detached HEAD切换"></a>切换分支&#x2F;从Detached HEAD切换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout feature</span><br></pre></td></tr></table></figure>

<h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d feature</span><br><span class="line">git branch -D feature <span class="comment"># force delete</span></span><br></pre></td></tr></table></figure>

<h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push orgin --delete feature</span><br></pre></td></tr></table></figure>

<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge feature</span><br><span class="line"><span class="comment"># merge changes from feature branch to current master branch</span></span><br></pre></td></tr></table></figure>

<h2 id="CherryPick别的分支commit-x2F-branch"><a href="#CherryPick别的分支commit-x2F-branch" class="headerlink" title="CherryPick别的分支commit&#x2F;branch"></a>CherryPick别的分支commit&#x2F;branch</h2><p>在需要apply的分支上保证没有unstaged change，运行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commitHash&gt;/&lt;feature branch name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="github-migration-from-port-22-to-443"><a href="#github-migration-from-port-22-to-443" class="headerlink" title="github migration from port 22 to 443"></a>github migration from port 22 to 443</h2><p>github服务器已经将22端口关闭，git工具需要访问ssh.github.com:443而不是默认的github.com:22 SSH端口。</p>
<p>需要更新~&#x2F;.ssh&#x2F;config文件如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">User git</span><br><span class="line">Port 443</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Runbooks</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Xml Libraries</title>
    <url>/2019/04/24/Java/Java-Xml-Libraries/</url>
    <content><![CDATA[<p>本文描述了当前主流的Java Xml libraries，以及对比区别。</p>
<blockquote>
<p>下文摘取自<a href="https://www.baeldung.com/java-xml-libraries">https://www.baeldung.com/java-xml-libraries</a></p>
</blockquote>
<ul>
<li><p>SAX: It is an event based parsing API, it provides a low level access, is memory efficient and faster than DOM since it doesn’t load the whole document tree in memory but it doesn’t provide support for navigation like the one provided by XPath, although it is more efficient it is harder to use too.</p>
</li>
<li><p>DOM(DOM4J and JDOM): It as model based parser that loads a tree structure document in memory, so we have the original elements order, we can navigate our document both directions, it provides an API for reading and writing, it offers XML manipulation and it is very easy to use although the price is high strain on memory resources.</p>
</li>
<li><p>StAX: It offers the ease of DOM and the efficiency of SAX but it lacks of some functionality provided by DOM like XML manipulation and it only allows us to navigate the document forward.</p>
</li>
<li><p>JAXB: It allows us to navigate the document in both directions, it is more efficient than DOM, it allows conversion from XML to java types and it supports XML manipulation but it can only parse a valid XML document.</p>
</li>
</ul>
<p><img src="/2019/04/24/Java/Java-Xml-Libraries/JavaXmlLibs.png" alt="JavaXmlLibs"></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Office 365 Addin ESC POC</title>
    <url>/2020/11/07/Runbooks/Office-365-Addin-ESC-POC/</url>
    <content><![CDATA[<h1 id="project-bootstrap"><a href="#project-bootstrap" class="headerlink" title="project bootstrap"></a>project bootstrap</h1><p> Demo项目是通过VS2019自带的Addin模板生成。默认debug模式部署在一个o365 dev tenant上。目前已有Github demo项目也可以直接下载，相关<a href="https://docs.microsoft.com/en-us/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows#install-outlook-add-ins-that-use-on-send">链接</a>。</p>
<h2 id="Demo-项目原型简述"><a href="#Demo-项目原型简述" class="headerlink" title="Demo 项目原型简述"></a>Demo 项目原型简述</h2><p>引入demo项目是一个查看邮件各种属性的ESCPOC项目，在读取一封邮件时，可以点击ESCPOC按钮查看邮件的属性。在启动debug并上传manifest后，点击Ribbon上的MyAddinGroup按钮，显示如下图所示：</p>
<p> <img src="/Office-365-Addin-ESC-POC%5CESCPOC.PNG" alt="ESCPOCDemo"></p>
<p>我们的目标POC项目是一个非常简单的发送弹框程序，需要订阅每一封邮件的发送事件itemsend并且根据Web API调用结果显示一个web UI.</p>
<h3 id="ESCPOC-xml-修改剖析"><a href="#ESCPOC-xml-修改剖析" class="headerlink" title="ESCPOC.xml 修改剖析"></a>ESCPOC.xml 修改剖析</h3><p>Manifest文件是O365插件加载的关键配置，需要完全符合schema定义的规则才能正确显式UI以及相应的回调API。</p>
<ol>
<li>Validation<br>Manifest 文件具有很强的格式要求，需要运用微软提供的工具对自己的manifest文件进行语法检查。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#install latest version</span></span><br><span class="line">npm install -g office-addin-manifest</span><br><span class="line">office-addin-manifest validate PATH_MANIFEST_FILE</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建ItemSend相关配置<br>目前微软已经有开源的示例代码于<a href="https://github.com/OfficeDev/outlook-add-in-command-demo%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BA%E5%8F%82%E8%80%83%E3%80%82">https://github.com/OfficeDev/outlook-add-in-command-demo，可以作为参考。</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Event</span> <span class="attr">Type</span>=<span class="string">&quot;ItemSend&quot;</span> <span class="attr">FunctionExecution</span>=<span class="string">&quot;synchronous&quot;</span> <span class="attr">FunctionName</span>=<span class="string">&quot;itemSendHandler&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意配置上下文需要在VersionOverrides 1.1框架下。</p>
<h2 id="O365-环境准备"><a href="#O365-环境准备" class="headerlink" title="O365 环境准备"></a>O365 环境准备</h2><p>对于跨平台的O365 Addin，一个合法的O365账号是需要的，而且需要拥有上传插件的权限。在用用MSDN订阅的情况下，可以创建合适的E3等级Office Tenant。例如本文则使用<a href="mailto:&#104;&#117;&#97;&#x6e;&#x67;&#115;&#117;&#x6e;&#x40;&#115;&#117;&#x6e;&#110;&#x79;&#104;&#108;&#x6c;&#46;&#111;&#x6e;&#109;&#x69;&#x63;&#114;&#x6f;&#x73;&#x6f;&#102;&#116;&#46;&#x63;&#x6f;&#109;">&#104;&#117;&#97;&#x6e;&#x67;&#115;&#117;&#x6e;&#x40;&#115;&#117;&#x6e;&#110;&#x79;&#104;&#108;&#x6c;&#46;&#111;&#x6e;&#109;&#x69;&#x63;&#114;&#x6f;&#x73;&#x6f;&#102;&#116;&#46;&#x63;&#x6f;&#109;</a>作为测试账号，密码为系统密码。</p>
<p>Web Addin查看可以点击Outlook桌面客户端的Manage Addin按钮，也可以在<a href="https://outlook.office365.com/owa/?path=/options/manageapps">https://outlook.office365.com/owa/?path=/options/manageapps</a> 链接中看到。可以看到即使安装了很多插件，这些插件却不是实时安装在本地Outlook桌面客户端上的， 而是在需要访问的时候才进行加载执行的。</p>
<h3 id="开启ItemSend事件监听"><a href="#开启ItemSend事件监听" class="headerlink" title="开启ItemSend事件监听"></a>开启ItemSend事件监听</h3><p>相关<a href="https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/connect-to-exchange-online-powershell?view=exchange-ps">链接</a>.</p>
<h3 id="“My-Custom-Roles”权限"><a href="#“My-Custom-Roles”权限" class="headerlink" title="“My Custom Roles”权限"></a>“My Custom Roles”权限</h3><p>对于个人O365账号，这里不需要进行权限获取，Microsoft Tenant默认每个客户的SideLoad权限开启。</p>
<h3 id="Web-Addin部署"><a href="#Web-Addin部署" class="headerlink" title="Web Addin部署"></a>Web Addin部署</h3><p>对于Outlook Web Addin, 主要分成两部分部署：</p>
<ul>
<li>Manifest配置文件部署，在Exchange Mailbox 上注册插件</li>
<li>插件服务部署，必须采用https协议，插件服务前后端本身需要在同一域名下。<br>部署完成即可进行测试。</li>
</ul>
<h2 id="Excel-Addin原型"><a href="#Excel-Addin原型" class="headerlink" title="Excel Addin原型"></a>Excel Addin原型</h2><p>Excel Addin属于Office Addin一部分，example link： <a href="https://github.com/OfficeDev/Office-Add-in-samples/">https://github.com/OfficeDev/Office-Add-in-samples/</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Runbooks</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Office Addin</tag>
      </tags>
  </entry>
  <entry>
    <title>code-server the VS code online</title>
    <url>/2021/07/23/Runbooks/code-server-the-VS-code-online/</url>
    <content><![CDATA[<h1 id="code-server-the-Visual-Studio-Code-available-on-browsers"><a href="#code-server-the-Visual-Studio-Code-available-on-browsers" class="headerlink" title="code-server: the Visual Studio Code available on browsers"></a>code-server: the Visual Studio Code available on browsers</h1><p>Light weight personal blog management, available on any big screen devices that has a brower!</p>
<p>You will have the enrionment served online:</p>
<ul>
<li>Git repo management</li>
<li>Markdown editor and preview</li>
<li>Cool extensions by vscode</li>
<li>Oauth security gaurd by Github auth provider</li>
<li>Availability anywhere, device free</li>
</ul>
<h2 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h2><ol>
<li><p>A Win 10 pro on Azure that allow remote access</p>
</li>
<li><p>Install code server on Linux subsystem</p>
</li>
</ol>
<p>Github: <a href="https://github.com/cdr/code-server">https://github.com/cdr/code-server</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br><span class="line"><span class="comment"># add code-server to daemon won&#x27;t work for linux subsystem</span></span><br></pre></td></tr></table></figure>
<h2 id="installation-of-externsions-of-vs-coode-on-code-server"><a href="#installation-of-externsions-of-vs-coode-on-code-server" class="headerlink" title="installation of externsions of vs coode on code server"></a>installation of externsions of vs coode on code server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code-server --install-extension bierner.markdown-mermaid</span><br></pre></td></tr></table></figure>

<h2 id="demo-using-iPad"><a href="#demo-using-iPad" class="headerlink" title="demo using iPad"></a>demo using iPad</h2><ol>
<li><p>start code-server with public cloud reverse proxy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code-server --<span class="built_in">link</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>allow inbound port of code-server on azure.portal</p>
</li>
<li><p>access via https:&#x2F;&#x2F;$hostname-$login&#x2F;cdr&#x2F;co</p>
</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Runbooks</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Office 365 Addin development guide</title>
    <url>/2019/04/12/Runbooks/Office-365-Addin-development-guide/</url>
    <content><![CDATA[<p>This is a guide for how to develop Office 365 cross platform addin.</p>
<h1 id="Front-end-UI-framework"><a href="#Front-end-UI-framework" class="headerlink" title="Front end UI framework"></a>Front end UI framework</h1><p>Microsoft has provided offical Office UI framework: Office Fabric UI. The office site is at <a href="https://developer.microsoft.com/en-us/fabric">https://developer.microsoft.com/en-us/fabric</a>. The are three directions of the UI project future roadmap. All the three projects are implementation of UI components, demos are available at <a href="https://developer.microsoft.com/en-us/fabric#/components">https://developer.microsoft.com/en-us/fabric#/components</a>.</p>
<ol>
<li>Fabric React (Official support)</li>
<li>AngularJS (Community version, no updates)</li>
<li>Fabric iOS</li>
<li>Fabric JS (Stop support from MSFT)</li>
</ol>
<p>New UI design sytem is called fluent, the website is at <a href="https://www.microsoft.com/design/fluent/">https://www.microsoft.com/design/fluent/</a>. It can help let developer know how to design an Windows style application UI and the guide of UWP web app design. </p>
<p>Fabric.js is an open source js framework using canvas as the basic style of UI components, the official site is at <a href="http://fabricjs.com/">http://fabricjs.com/</a>.</p>
<h2 id="Useful-links"><a href="#Useful-links" class="headerlink" title="Useful links:"></a>Useful links:</h2><p>Directly reuse existing Microsoft designed and implemented components is very convinient as long as your application can work well with these codes.</p>
<ul>
<li>Office UI Fabric Core (Style and fonts): <a href="https://github.com/OfficeDev/office-ui-fabric-core">https://github.com/OfficeDev/office-ui-fabric-core</a></li>
<li>Office UI Fabric React (Full components): <a href="https://github.com/OfficeDev/office-ui-fabric-react">https://github.com/OfficeDev/office-ui-fabric-react</a></li>
<li>Office UI Fabric JS (Full components in JS): <a href="https://github.com/OfficeDev/office-ui-fabric-js/">https://github.com/OfficeDev/office-ui-fabric-js/</a></li>
</ul>
<p>Except Windows style UI frameworks, there are other frameworks using morden components:</p>
<ul>
<li>Material-UI: <a href="https://www.jianshu.com/p/b3cfaca94596">https://www.jianshu.com/p/b3cfaca94596</a> , <a href="https://material-ui.com/getting-started/example-projects/">https://material-ui.com/getting-started/example-projects/</a></li>
<li>PrimeNG: <a href="https://www.primefaces.org/primeng">https://www.primefaces.org/primeng</a></li>
</ul>
<h1 id="Front-end-Office-js-framework"><a href="#Front-end-Office-js-framework" class="headerlink" title="Front end Office.js framework"></a>Front end Office.js framework</h1><p>Office.js is the JavaScript based Office model provided by Microsoft, there are also Excel-15.js or Outlook-15.js for application respectively.</p>
<h2 id="Office-JavaScript-API-object-model"><a href="#Office-JavaScript-API-object-model" class="headerlink" title="Office JavaScript API object model"></a>Office JavaScript API object model</h2><p>This doc <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/office-javascript-api-object-model">https://docs.microsoft.com/en-us/office/dev/add-ins/develop/office-javascript-api-object-model</a> explains the API model for new O365 addin JS model.</p>
<p>The object is still under active development, there are more and more new features added, reading the documents can get the updated information. As for now, there are below bullet points:</p>
<p><img src="/2019/04/12/Runbooks/Office-365-Addin-development-guide/AddinJSModel.PNG" alt="JSAddinFeatures"></p>
<p>This is also guide for how to develop Addin with Angular front end. <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/add-ins-with-angular2">https://docs.microsoft.com/en-us/office/dev/add-ins/develop/add-ins-with-angular2</a></p>
<p>Office appication has its own object model, so developers can read the related documents for detailed guide.</p>
<h2 id="Outlook-Backend-service"><a href="#Outlook-Backend-service" class="headerlink" title="Outlook Backend service"></a>Outlook Backend service</h2><p>Except the general Office JS API model, Outlook has its own API. The development guide is at <a href="https://docs.microsoft.com/en-us/outlook/add-ins/">https://docs.microsoft.com/en-us/outlook/add-ins/</a>. </p>
<h3 id="Manifest-version-and-corresponding-clients-support"><a href="#Manifest-version-and-corresponding-clients-support" class="headerlink" title="Manifest version and corresponding clients support"></a>Manifest version and corresponding clients support</h3><p><img src="/2019/04/12/Runbooks/Office-365-Addin-development-guide/ClientSupport.PNG" alt="ClientSupport"></p>
<p>Troubleshooting manifest file <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/testing/troubleshoot-manifest#to-use-the-office-add-in-validator-to-validate-your-manifest">here</a></p>
<h3 id="Outlook-Web-Addin-Catalogs"><a href="#Outlook-Web-Addin-Catalogs" class="headerlink" title="Outlook Web Addin Catalogs"></a>Outlook Web Addin Catalogs</h3><p>Outlook Addin has its own concepts and there are many aspects:</p>
<p><img src="/2019/04/12/Runbooks/Office-365-Addin-development-guide/OutlookConcepts.PNG" alt="OutlookCatalog"></p>
<h3 id="Sample-Addins-for-Outlook"><a href="#Sample-Addins-for-Outlook" class="headerlink" title="Sample Addins for Outlook"></a>Sample Addins for Outlook</h3><p><a href="https://developer.microsoft.com/zh-cn/outlook/gallery/?filterBy=Outlook,Samples,Add-ins">https://developer.microsoft.com/zh-cn/outlook/gallery/?filterBy=Outlook,Samples,Add-ins</a> </p>
<h1 id="Other-Office-Web-Addin-Demos"><a href="#Other-Office-Web-Addin-Demos" class="headerlink" title="Other Office Web Addin Demos"></a>Other Office Web Addin Demos</h1><ul>
<li>Word Style Checker: <a href="https://github.com/OfficeDev/Word-Add-in-Angular2-StyleChecker">https://github.com/OfficeDev/Word-Add-in-Angular2-StyleChecker</a></li>
<li>Word task pane add-in: <a href="https://github.com/OfficeDev/Office-Add-in-Fabric-UI-Sample">https://github.com/OfficeDev/Office-Add-in-Fabric-UI-Sample</a></li>
<li>Outlook Addin: <a href="https://github.com/OfficeDev/outlook-add-in-attachments-demo">https://github.com/OfficeDev/outlook-add-in-attachments-demo</a></li>
<li>Word dialog Addin: <a href="https://github.com/OfficeDev/Office-Add-in-Dialog-API-Simple-Example">https://github.com/OfficeDev/Office-Add-in-Dialog-API-Simple-Example</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Runbooks</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Office Addin</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/04/01/Runbooks/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="Nodejs-and-NPM-requirement"><a href="#Nodejs-and-NPM-requirement" class="headerlink" title="Nodejs and NPM requirement"></a>Nodejs and NPM requirement</h3><p>Nodejs higher than 6.0.0 and NPM higher than 5. Otherwise, Hexo might not work with some strange error!!</p>
<h3 id="Hexo-Mermaid-for-graph"><a href="#Hexo-Mermaid-for-graph" class="headerlink" title="Hexo Mermaid for graph"></a>Hexo Mermaid for graph</h3><p>More info: <a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">Here</a></p>
<ul>
<li>Flow chart<pre class="mermaid">graph TD;
  A-->B;
  A-->C;
  B-->D;
  C-->D;</pre></li>
</ul>
<pre class="mermaid">graph TD;
    交易合同TradeContract--contains-->仓位Position;
    仓位Position--scales-->资产Asset;
    资产Asset--references-->价值的票据InstrumentOfValue;</pre>


<ul>
<li>Gannt diagram</li>
</ul>
<pre class="mermaid">gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :1d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h</pre>


<h3 id="Hexo-simple-mindmap"><a href="#Hexo-simple-mindmap" class="headerlink" title="Hexo simple mindmap"></a>Hexo simple mindmap</h3><p>Hexo simple mindmap插件提供了对脑图的可视化支持，相较于mermaid插件的流程图，能够提供更加原生的脑图体验。</p>
<p>More info：<a href="https://hunterx.xyz/use-mindmap-in-hexo.html">here</a></p>
<ul>
<li>Example</li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>软件架构师思维导图<ul>
<li>代码规范<ul>
<li>设计模式</li>
<li>重构</li>
<li>源码学习与分析</li>
<li>复杂系统面向对象模型设计</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>

<h3 id="Hexo-search功能"><a href="#Hexo-search功能" class="headerlink" title="Hexo search功能"></a>Hexo search功能</h3><p>随着文章数量增加，每一页寻找文档变得耗时间，所以增加了search功能来支持快速文章定位功能。</p>
<p>More info: <a href="https://huangweicai.github.io/2019/01/12/Hexo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/">here</a></p>
<ol>
<li>下载插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置_config.yaml文件( “hexo-generator-searchdb”: “^1.4.1”后需要更新配置)</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置next主题的_config.yaml文件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="hexo-UML图绘制"><a href="#hexo-UML图绘制" class="headerlink" title="hexo UML图绘制"></a>hexo UML图绘制</h3><h4 id="顺序图-Sequence-Diagram"><a href="#顺序图-Sequence-Diagram" class="headerlink" title="顺序图(Sequence Diagram)"></a>顺序图(Sequence Diagram)</h4><img  src=http://www.plantuml.com/plantuml/svg/Syp9J4vLqBLJSCfFib9mB2t9ICqhoKnEBCdCprC8IYqiJIqkuGBAAUW2rJY256DHLLoGdrUSoiNbY6fONZvGNP52OaafDaCXYcrqTT5KOpSS0000>

<h4 id="类图（Class-Diagram）"><a href="#类图（Class-Diagram）" class="headerlink" title="类图（Class Diagram）"></a>类图（Class Diagram）</h4><ol>
<li>强耦合关系</li>
</ol>
<img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBEIImkDZ1KiAdHrLM0S8mKh1IURPxzj6UQWe7HyztBdtNkDp24A3G4ATJJWoWq12bykcxUyxuD2eP648QX8PT3QbuAq6G0>

<ol start="2">
<li>弱耦合关系<img  src=http://www.plantuml.com/plantuml/svg/NT3TIW9150Vm-vxYNCSg4txMHLWzYM1tLj3QlQBfqkSkRX5BjJT64eGj6GokwzESCpEzHQCp97WrPywV-V5dQcwhVjwwE6bk7JNhhiigaC_lWvchi0UuU54_Zy0gE8_CpAeowY5l_tR7vFNfAbRTpA5vGfVVgXDQPXToESliCCsO46II7Y3_bA5--gKlXvIyYlQximh4pO3yOBcrI06s_nLMr8fCU-Hxm8hYQS8AkePU2CytJHnp8ByJ3rFCXiiuZ2d8A1YBvrWtLeEfbKjmjfRBMbQTQ2MNp82pFYixo4V8F-HeXelh3Otk9vY-8R-rREtujA4_yGy0></li>
</ol>
<h3 id="Hexo-post-asset-image-管理"><a href="#Hexo-post-asset-image-管理" class="headerlink" title="Hexo post asset image 管理"></a>Hexo post asset image 管理</h3><ol>
<li>自带的hexo-renderer-marked的postAsset无法正常工作</li>
<li>使用hexo-asset-link可以动态生成基于post_dir的图片link，同时在local&#x2F;remote正常工作</li>
<li>不要在code中写入encoded path或者linux slash &#x2F;，虽然预览没有问题，但是生成的Link会出问题</li>
</ol>
<h3 id="Hexo-blog-encrypt-支持TOC"><a href="#Hexo-blog-encrypt-支持TOC" class="headerlink" title="Hexo blog encrypt 支持TOC"></a>Hexo blog encrypt 支持TOC</h3><ol>
<li><p>完美修复<br><a href="https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/">https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/</a></p>
</li>
<li><p>UX修复</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># node_modules\hexo-theme-next\layout\_macro\sidebar.njk</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">%-</span> <span class="string">if</span> <span class="string">display_toc</span> <span class="string">%</span>&#125;</span><br><span class="line">       &#123;<span class="string">%-</span> <span class="string">if</span> <span class="string">(page.encrypt)</span> <span class="string">%</span>&#125;</span><br><span class="line">        &#123;<span class="string">%-</span> <span class="string">set</span> <span class="string">toc</span> <span class="string">=</span> <span class="string">toc(page.origin</span>, &#123; <span class="attr">class:</span> <span class="string">&quot;nav&quot;</span>, <span class="attr">list_number:</span> <span class="string">page.toc.number</span>, <span class="attr">max_depth:</span> <span class="string">page.toc.max_depth</span> &#125;<span class="string">)</span> <span class="string">%</span>&#125;</span><br><span class="line">      &#123;<span class="string">%-</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">        &#123;<span class="string">%-</span> <span class="string">set</span> <span class="string">toc</span> <span class="string">=</span> <span class="string">toc(page.content</span>, &#123; <span class="attr">class:</span> <span class="string">&quot;nav&quot;</span>, <span class="attr">list_number:</span> <span class="string">page.toc.number</span>, <span class="attr">max_depth:</span> <span class="string">page.toc.max_depth</span> &#125;<span class="string">)</span> <span class="string">%</span>&#125;</span><br><span class="line">      &#123;<span class="string">%-</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">      &#123;<span class="string">%-</span> <span class="string">set</span> <span class="string">display_toc</span> <span class="string">=</span> <span class="string">toc.length</span> <span class="string">&gt;</span> <span class="number">1</span> <span class="string">and</span> <span class="string">display_toc</span> <span class="string">%</span>&#125;</span><br><span class="line">    &#123;<span class="string">%-</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--noindex--&gt;</span></span><br><span class="line">        <span class="string">&lt;div</span> <span class="string">class=&quot;post-toc-wrap</span> <span class="string">sidebar-panel&quot;&gt;</span></span><br><span class="line">          &#123;<span class="string">%-</span> <span class="string">if</span> <span class="string">display_toc</span> <span class="string">%</span>&#125;</span><br><span class="line">            <span class="string">&lt;!---</span> <span class="string">For</span> <span class="string">hide</span> <span class="string">TOC</span> <span class="string">in</span> <span class="string">encryption</span> <span class="string">--&gt;</span></span><br><span class="line">            &#123;<span class="string">%-</span> <span class="string">if</span> <span class="string">(page.encrypt)</span> <span class="string">%</span>&#125;</span><br><span class="line">              <span class="string">&lt;div</span> <span class="string">id=&quot;toc-div&quot;</span> <span class="string">style=&quot;display:none&quot;&gt;</span></span><br><span class="line">            &#123;<span class="string">%-</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">              <span class="string">&lt;div</span> <span class="string">id=&quot;toc-div&quot;&gt;</span></span><br><span class="line">            &#123;<span class="string">%-</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">            <span class="string">&lt;div</span> <span class="string">class=&quot;post-toc</span> <span class="string">animated&quot;&gt;&#123;&#123;</span> <span class="string">toc</span> <span class="string">&#125;&#125;&lt;/div&gt;</span></span><br><span class="line">            <span class="string">&lt;/div&gt;&lt;!--</span> <span class="string">end</span> <span class="string">of</span> <span class="string">hide</span> <span class="string">--&gt;</span></span><br><span class="line">          &#123;<span class="string">%-</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">        <span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;!--/noindex--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="hexo-将category作为目录归类博客"><a href="#hexo-将category作为目录归类博客" class="headerlink" title="hexo 将category作为目录归类博客"></a>hexo 将category作为目录归类博客</h3><p>当文件数量已经比较多，单层级目录很难去管理文章分类。用hexo-directory-category 可以较好的管理post文档，便于源文件查找和更新。</p>
<h3 id="hexo-next-pwa，支持页面离线访问"><a href="#hexo-next-pwa，支持页面离线访问" class="headerlink" title="hexo-next-pwa，支持页面离线访问"></a>hexo-next-pwa，支持页面离线访问</h3><p>PWA应用的创建包含两部分，一个是manifest.json文件放在source目录下，用于提示浏览器安装PWA应用。一个是sw.js文件，用hexo workbox命令生成并注册到index.html文件，使应用支持离线访问，在线更新功能。</p>
<p>PWA应用的好处是运用sw.js文件，在浏览器启动一个类似原生应用的app，加载初始页面，在没有网的情况下访问离线页面，有网的情况下可以选择优先加载。对于静态页面的应用具有提升加载速度的好处。</p>
<h3 id="hexo-highcharts-支持绘制highchart原生图"><a href="#hexo-highcharts-支持绘制highchart原生图" class="headerlink" title="hexo-highcharts, 支持绘制highchart原生图"></a>hexo-highcharts, 支持绘制highchart原生图</h3><p>这是一个轻量级的plugin，主要支持在markdown内嵌一段highcharts的配置文件，绘制出相应的图。</p>

    <script defer src="https://code.highcharts.com/12.1.2/highcharts.js"></script>
    <script defer src="https://code.highcharts.com/12.1.2/modules/networkgraph.js"></script>
    <script defer src="https://code.highcharts.com/12.1.2/modules/sankey.js"></script>
    <script defer src="https://code.highcharts.com/12.1.2/modules/treemap.js"></script>
    <script defer src="https://code.highcharts.com/12.1.2/modules/treegraph.js"></script>
    <script defer src="https://code.highcharts.com/12.1.2/modules/exporting.js"></script>
    <script defer src="https://code.highcharts.com/12.1.2/modules/export-data.js"></script>
    <script defer src="https://code.highcharts.com/12.1.2/modules/accessibility.js"></script>
    <button onclick="(function() {
        console.log('show highcharts')
        var event = new Event('hexo-blog-decrypt');
        window.dispatchEvent(event);
    })()">HighCharts</button>
    <div id="highchartsuuid618183439704626" style="width:800" height:"400 overflow: auto"></div>
    <script>
        var op = Object.assign({
},{
    title: {
        text: 'Estimated US Energy Consumption in 2022'
    },
    subtitle: {
        text:
      'Source: <a href=\'https://www.llnl.gov/\'> Lawrence Livermore National Laboratory</a>'
    },
    accessibility: {
        point: {
            valueDescriptionFormat: '{index}. {point.from} to {point.to}, ' +
                '{point.weight}.'
        }
    },
    tooltip: {
        headerFormat: null,
        pointFormat:
      '{point.fromNode.name} \u2192 {point.toNode.name}: {point.weight:.2f} ' +
      'quads',
        nodeFormat: '{point.name}: {point.sum:.2f} quads'
    },
    series: [{
        keys: ['from', 'to', 'weight'],

        nodes: [
            {
                id: 'Electricity & Heat',
                color: '#ffa500',
                offset: -110
            },
            {
                id: 'Net Import',
                color: '000000'
            },
            {
                id: 'Residential',
                color: '#74ffe7',
                column: 2,
                offset: 50
            },
            {
                id: 'Commercial',
                color: '#8cff74',
                column: 2,
                offset: 50
            },
            {
                id: 'Industrial',
                color: '#ff8da1',
                column: 2,
                offset: 50
            },
            {
                id: 'Transportation',
                color: '#f4c0ff',
                column: 2,
                offset: 50
            },
            {
                id: 'Rejected Energy',
                color: '#e6e6e6',
                column: 3,
                offset: -30
            },
            {
                id: 'Energy Services',
                color: '#F9E79F',
                column: 3
            },
            {
                id: 'Net Import',
                color: '000000'
            },
            {
                id: 'Solar',
                color: '#009c00'
            },
            {
                id: 'Nuclear',
                color: '#1a8dff'
            },
            {
                id: 'Hydro',
                color: '#009c00'
            },
            {
                id: 'Wind',
                color: '#009c00'
            },
            {
                id: 'Geothermal',
                color: '#009c00'
            },
            {
                id: 'Natural Gas',
                color: '#1a8dff'
            },
            {
                id: 'Biomass',
                color: '#009c00'
            },
            {
                id: 'Coal',
                color: '#989898'
            },
            {
                id: 'Petroleum',
                color: '#989898',
                offset: -1
            }
        ],

        data: [
            ['Net Import', 'Electricity & Heat', 0.14],
            ['Solar', 'Electricity & Heat', 1.28],
            ['Nuclear', 'Electricity & Heat', 8.05],
            ['Hydro', 'Electricity & Heat', 2.31],
            ['Wind', 'Electricity & Heat', 3.84],
            ['Geothermal', 'Electricity & Heat', 0.15],
            ['Natural Gas', 'Electricity & Heat', 12.5],
            ['Coal', 'Electricity & Heat', 8.9],
            ['Biomass', 'Electricity & Heat', 0.41],
            ['Petroleum', 'Electricity & Heat', 0.24],

            ['Electricity & Heat', 'Residential', 5.19],
            ['Solar', 'Residential', 0.4],
            ['Geothermal', 'Residential', 0.04],
            ['Natural Gas', 'Residential', 5.17],
            ['Biomass', 'Residential', 0.48],
            ['Petroleum', 'Residential', 0.98],

            ['Electricity & Heat', 'Commercial', 4.69],
            ['Solar', 'Commercial', 0.16],
            ['Geothermal', 'Commercial', 0.02],
            ['Natural Gas', 'Commercial', 3.65],
            ['Coal', 'Commercial', 0.02],
            ['Biomass', 'Commercial', 0.15],
            ['Petroleum', 'Commercial', 0.88],

            ['Electricity & Heat', 'Industrial', 3.44],
            ['Solar', 'Industrial', 0.04],
            ['Natural Gas', 'Industrial', 10.8],
            ['Coal', 'Industrial', 0.99],
            ['Biomass', 'Industrial', 2.27],
            ['Petroleum', 'Industrial', 9.13],

            ['Electricity & Heat', 'Transportation', 0.02],
            ['Natural Gas', 'Transportation', 1.29],
            ['Biomass', 'Transportation', 1.57],
            ['Petroleum', 'Transportation', 24.6],

            ['Electricity & Heat', 'Rejected Energy', 24.3],
            ['Residential', 'Rejected Energy', 4.29],
            ['Commercial', 'Rejected Energy', 3.35],
            ['Industrial', 'Rejected Energy', 13.6],
            ['Transportation', 'Rejected Energy', 21.7],

            ['Residential', 'Energy Services', 7.97],
            ['Commercial', 'Energy Services', 6.22],
            ['Industrial', 'Energy Services', 13.1],
            ['Transportation', 'Energy Services', 5.77]
        ],
        type: 'sankey',
        name: 'Sankey demo series'
    }]

}
)
        var chart = !!window.Highcharts ? Highcharts.chart(highchartsuuid618183439704626,op) : console.log("Highcharts undefined");
        window.addEventListener('hexo-blog-decrypt', function() {
            console.log('decrypted')
            //if (sessionStorage.getItem("encryptState") != "1") {
            var op = Object.assign({
},{
    title: {
        text: 'Estimated US Energy Consumption in 2022'
    },
    subtitle: {
        text:
      'Source: <a href=\'https://www.llnl.gov/\'> Lawrence Livermore National Laboratory</a>'
    },
    accessibility: {
        point: {
            valueDescriptionFormat: '{index}. {point.from} to {point.to}, ' +
                '{point.weight}.'
        }
    },
    tooltip: {
        headerFormat: null,
        pointFormat:
      '{point.fromNode.name} \u2192 {point.toNode.name}: {point.weight:.2f} ' +
      'quads',
        nodeFormat: '{point.name}: {point.sum:.2f} quads'
    },
    series: [{
        keys: ['from', 'to', 'weight'],

        nodes: [
            {
                id: 'Electricity & Heat',
                color: '#ffa500',
                offset: -110
            },
            {
                id: 'Net Import',
                color: '000000'
            },
            {
                id: 'Residential',
                color: '#74ffe7',
                column: 2,
                offset: 50
            },
            {
                id: 'Commercial',
                color: '#8cff74',
                column: 2,
                offset: 50
            },
            {
                id: 'Industrial',
                color: '#ff8da1',
                column: 2,
                offset: 50
            },
            {
                id: 'Transportation',
                color: '#f4c0ff',
                column: 2,
                offset: 50
            },
            {
                id: 'Rejected Energy',
                color: '#e6e6e6',
                column: 3,
                offset: -30
            },
            {
                id: 'Energy Services',
                color: '#F9E79F',
                column: 3
            },
            {
                id: 'Net Import',
                color: '000000'
            },
            {
                id: 'Solar',
                color: '#009c00'
            },
            {
                id: 'Nuclear',
                color: '#1a8dff'
            },
            {
                id: 'Hydro',
                color: '#009c00'
            },
            {
                id: 'Wind',
                color: '#009c00'
            },
            {
                id: 'Geothermal',
                color: '#009c00'
            },
            {
                id: 'Natural Gas',
                color: '#1a8dff'
            },
            {
                id: 'Biomass',
                color: '#009c00'
            },
            {
                id: 'Coal',
                color: '#989898'
            },
            {
                id: 'Petroleum',
                color: '#989898',
                offset: -1
            }
        ],

        data: [
            ['Net Import', 'Electricity & Heat', 0.14],
            ['Solar', 'Electricity & Heat', 1.28],
            ['Nuclear', 'Electricity & Heat', 8.05],
            ['Hydro', 'Electricity & Heat', 2.31],
            ['Wind', 'Electricity & Heat', 3.84],
            ['Geothermal', 'Electricity & Heat', 0.15],
            ['Natural Gas', 'Electricity & Heat', 12.5],
            ['Coal', 'Electricity & Heat', 8.9],
            ['Biomass', 'Electricity & Heat', 0.41],
            ['Petroleum', 'Electricity & Heat', 0.24],

            ['Electricity & Heat', 'Residential', 5.19],
            ['Solar', 'Residential', 0.4],
            ['Geothermal', 'Residential', 0.04],
            ['Natural Gas', 'Residential', 5.17],
            ['Biomass', 'Residential', 0.48],
            ['Petroleum', 'Residential', 0.98],

            ['Electricity & Heat', 'Commercial', 4.69],
            ['Solar', 'Commercial', 0.16],
            ['Geothermal', 'Commercial', 0.02],
            ['Natural Gas', 'Commercial', 3.65],
            ['Coal', 'Commercial', 0.02],
            ['Biomass', 'Commercial', 0.15],
            ['Petroleum', 'Commercial', 0.88],

            ['Electricity & Heat', 'Industrial', 3.44],
            ['Solar', 'Industrial', 0.04],
            ['Natural Gas', 'Industrial', 10.8],
            ['Coal', 'Industrial', 0.99],
            ['Biomass', 'Industrial', 2.27],
            ['Petroleum', 'Industrial', 9.13],

            ['Electricity & Heat', 'Transportation', 0.02],
            ['Natural Gas', 'Transportation', 1.29],
            ['Biomass', 'Transportation', 1.57],
            ['Petroleum', 'Transportation', 24.6],

            ['Electricity & Heat', 'Rejected Energy', 24.3],
            ['Residential', 'Rejected Energy', 4.29],
            ['Commercial', 'Rejected Energy', 3.35],
            ['Industrial', 'Rejected Energy', 13.6],
            ['Transportation', 'Rejected Energy', 21.7],

            ['Residential', 'Energy Services', 7.97],
            ['Commercial', 'Energy Services', 6.22],
            ['Industrial', 'Energy Services', 13.1],
            ['Transportation', 'Energy Services', 5.77]
        ],
        type: 'sankey',
        name: 'Sankey demo series'
    }]

}
)
              if(op.url){
                  $.ajax({
                      url: op.url,
                      type: "JSON",
                      method: op.method || "GET",
                      success: function(res){
                          if(op.seriesFormat){
                              op.series = op.seriesFormat(res)
                          } else {
                              op.series = res;
                          }
                          var chart = Highcharts.chart(highchartsuuid618183439704626,op);
                      }
                  })
              }else{
            var chart = !!window.Highcharts ? Highcharts.chart(highchartsuuid618183439704626,op) : console.log("Highcharts undefined");
            }
            //  sessionStorage.setItem("encryptState", "1");
            //}
        });
    </script>
    

<p>在加密文档里chart加载会出现竞争问题，需要用如下代码解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;script defer src=&quot;https://code.highcharts.com/12.1.2/highcharts.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script defer src=&quot;https://code.highcharts.com/12.1.2/modules/sankey.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script defer src=&quot;https://code.highcharts.com/12.1.2/modules/treemap.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script defer src=&quot;https://code.highcharts.com/12.1.2/modules/treegraph.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script defer src=&quot;https://code.highcharts.com/12.1.2/modules/exporting.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script defer src=&quot;https://code.highcharts.com/12.1.2/modules/export-data.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script defer src=&quot;https://code.highcharts.com/12.1.2/modules/accessibility.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;button onclick=&quot;(function() &#123;</span></span><br><span class="line"><span class="string">        console.log(&#x27;show highcharts&#x27;)</span></span><br><span class="line"><span class="string">        var event = new Event(&#x27;hexo-blog-decrypt&#x27;);</span></span><br><span class="line"><span class="string">        window.dispatchEvent(event);</span></span><br><span class="line"><span class="string">    &#125;)()&quot;&gt;HighCharts&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;div id=&quot;highcharts<span class="subst">$&#123;id&#125;</span>&quot; style=&quot;width:<span class="subst">$&#123;args[<span class="number">0</span>] || <span class="string">&quot;85%&quot;</span>&#125;</span>&quot; height:&quot;<span class="subst">$&#123;args[<span class="number">1</span>] || <span class="number">400</span>&#125;</span> overflow: auto&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var op = Object.assign(<span class="subst">$&#123;defaultOpt&#125;</span>,<span class="subst">$&#123;options&#125;</span>)</span></span><br><span class="line"><span class="string">        var chart = !!window.Highcharts ? Highcharts.chart(highcharts<span class="subst">$&#123;id&#125;</span>,op) : console.log(&quot;Highcharts undefined&quot;);</span></span><br><span class="line"><span class="string">        window.addEventListener(&#x27;hexo-blog-decrypt&#x27;, function() &#123;</span></span><br><span class="line"><span class="string">            console.log(&#x27;decrypted&#x27;)</span></span><br><span class="line"><span class="string">            //if (sessionStorage.getItem(&quot;encryptState&quot;) != &quot;1&quot;) &#123;</span></span><br><span class="line"><span class="string">            var op = Object.assign(<span class="subst">$&#123;defaultOpt&#125;</span>,<span class="subst">$&#123;options&#125;</span>)</span></span><br><span class="line"><span class="string">              if(op.url)&#123;</span></span><br><span class="line"><span class="string">                  $.ajax(&#123;</span></span><br><span class="line"><span class="string">                      url: op.url,</span></span><br><span class="line"><span class="string">                      type: &quot;JSON&quot;,</span></span><br><span class="line"><span class="string">                      method: op.method || &quot;GET&quot;,</span></span><br><span class="line"><span class="string">                      success: function(res)&#123;</span></span><br><span class="line"><span class="string">                          if(op.seriesFormat)&#123;</span></span><br><span class="line"><span class="string">                              op.series = op.seriesFormat(res)</span></span><br><span class="line"><span class="string">                          &#125; else &#123;</span></span><br><span class="line"><span class="string">                              op.series = res;</span></span><br><span class="line"><span class="string">                          &#125;</span></span><br><span class="line"><span class="string">                          var chart = Highcharts.chart(highcharts<span class="subst">$&#123;id&#125;</span>,op);</span></span><br><span class="line"><span class="string">                      &#125;</span></span><br><span class="line"><span class="string">                  &#125;)</span></span><br><span class="line"><span class="string">              &#125;else&#123;</span></span><br><span class="line"><span class="string">            var chart = !!window.Highcharts ? Highcharts.chart(highcharts<span class="subst">$&#123;id&#125;</span>,op) : console.log(&quot;Highcharts undefined&quot;);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            //  sessionStorage.setItem(&quot;encryptState&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="string">            //&#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    <span class="keyword">return</span> template;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Runbooks</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-subsystem</title>
    <url>/2018/04/14/Runbooks/ubuntu-subsystem/</url>
    <content><![CDATA[<h2 id="Ubuntu-on-Windows-10"><a href="#Ubuntu-on-Windows-10" class="headerlink" title="Ubuntu on Windows 10"></a>Ubuntu on Windows 10</h2><ol>
<li>Enable Developer mode for Win 10<br><img src="/ubuntu-subsystem%5CDeveloper-mode.PNG" alt="Developer-mode"></li>
<li>Add Windows Linux subsystem<br><img src="/ubuntu-subsystem%5CLinux-subsystem.PNG" alt="Linux-subsystem"></li>
<li>Install Ubuntu&#x2F;SUSE&#x2F;*** from App Store<br><img src="/ubuntu-subsystem%5CInstall-ubuntu.PNG" alt="Install-ubuntu"></li>
</ol>
<h2 id="Update-package-sources"><a href="#Update-package-sources" class="headerlink" title="Update package sources"></a>Update package sources</h2><ol>
<li>Edit &#x2F;etc&#x2F;apt&#x2F;source.list<blockquote>
<p>#中国数学物理大学源</p>
<p>deb <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid main multiverse restricted universe</p>
<p>deb <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-backports main multiverse restricted universe</p>
<p>deb <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-proposed main multiverse restricted universe</p>
<p>deb <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-security main multiverse restricted universe</p>
<p>deb <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-updates main multiverse restricted universe</p>
<p>deb-src <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid main multiverse restricted universe</p>
<p>deb-src <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-backports main multiverse restricted universe</p>
<p>deb-src <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-proposed main multiverse restricted universe</p>
<p>deb-src <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-security main multiverse restricted universe</p>
<p>deb-src <a href="http://debian.ustc.edu.cn/ubuntu/">http://debian.ustc.edu.cn/ubuntu/</a> vivid-updates main multiverse restricted universe</p>
<p>#阿里云的源：</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-security main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-updates main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-proposed main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-backports main restricted universe multiverse</p>
<p>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid main restricted universe multiverse</p>
<p>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-security main restricted universe multiverse</p>
<p>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-updates main restricted universe multiverse</p>
<p>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-proposed main restricted universe multiverse</p>
<p>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> vivid-backports main restricted universe multiverse</p>
</blockquote>
</li>
</ol>
<p>作者：sarleon<br>链接：<a href="https://www.zhihu.com/question/41311332/answer/90517838">https://www.zhihu.com/question/41311332/answer/90517838</a></p>
<ol start="2">
<li>Run apt to udpate<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Intall-Nodejs-and-npm"><a href="#Intall-Nodejs-and-npm" class="headerlink" title="Intall Nodejs and npm"></a>Intall Nodejs and npm</h2><ul>
<li><p>Install from Ubuntu apt tool</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install nodejs nodejs-legacy npm</span><br></pre></td></tr></table></figure>
</li>
<li><p>npm self update for npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g npm@latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>npm update nodejs using package n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g n</span><br><span class="line">$ sudo n stable <span class="comment">#get latest stable</span></span><br><span class="line">$ sudo n latest <span class="comment">#get latest version</span></span><br></pre></td></tr></table></figure></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Runbooks</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>20210108 工作历年总结</title>
    <url>/2021/09/16/%E7%94%9F%E6%B4%BB/20210108-%E5%B7%A5%E4%BD%9C%E4%BA%94%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0abbadfd68e74efec659ced980f67789fdcd2b2c219c15762028ab6506869bb6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>20210122 工作未来三年规划</title>
    <url>/2021/09/16/%E7%94%9F%E6%B4%BB/20210122-%E5%B7%A5%E4%BD%9C%E6%9C%AA%E6%9D%A5%E4%B8%89%E5%B9%B4%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="00f73f30f2c6c392c3976f7b2a9fb866bdc9cfe1caa7eabbedd0c120d58d5aec">360893b2247eeb995185f05e59e66750a752571851387b560796c820ce9f196698385a277d7c5337553fcc89cfd03296c06f9835bd96caf86fcc404d6579f8f1328cdc0ea8a7bd734587f9cc43ddf1ac2bf8771badf04cfdadddf6d95a4feb1d31b5da4eebeeaf86b4b71faf529020d2624679423c6395a186e10e7d4dc880f8aa086857e23a6fae032391ac3d9002c03c28c5cdb4f0e0eaaf135fb1e30b3b22a4a7a627758a25d3137d59023122474d7cbc83622cfa5dbb0e8d46e7528aa647cb025744879ea59554bf2aec7e4e7c9ea307c9d15702e6c58b802dcd520a8a1bad9f8992437488b1ec0036d368b3a562d2f249c562b8dc1d8eaa1a3721c74b71bc8b731f6d6e0fd91ff6fe16a1310efa63068a717b405c9a57b7a5f1fb336d79d7e76a1074f291a2a0ccbabfba1ac143c7c5731f3e668dc8a79b0e0f633b7b7343f5c1ebf4db9bce916036476af9df40ab0b5ece6a3ca5ec760f834c8c7f95bac7dd8b2e042ae8932233aa990e623066ffb169d63c96ad338e828e7901fda99a8c525651550803965b846263f5a365e92a0a2003fb9ff7858399ec2a960adc3d100bc3149e8eb1331513207f5c252abf8c84e466bc637e4ef48dff29668aac28612406a3714a326af7cd79706c06b599de102264ffb939db5fc41770469d053d7007c7404aed8e90e51641a8563431b0e360b4369624e89a8d07ee8af2783259eb875c1dea544cca68bce0ddbeca12d021f231336906c73f3b92e2382b277d6197d4a786bb9c0e0b2b301e080d5a9f160021badd8dc992ee44760ce2e5c9b926e0c15c80c48155f70ad92f019aa45eeb55a8a614c5f3d6f8270736f899e855fc29e48e631b50e6053bcaf4588cf7b33dde033528b647552e42546eed7dad131080e0eb8179e4c4bad9f8ea040b90af76af3872e43ddd20f3053332638e8864098f40fb618d42769edb0a60e9426fb843008956df860253422185e122c4d3b98941509eee66e08f5ec8cdb5e3f79b859aa43795638090922ebaa0666b61dba048344c1f10f59f3781c51b72d9cfee8ceed2ba6068d1dfbce549c38d6abad02ae3d0f9e9ef8d13e0a4200deaba665794b91a01af6d0a84894e8ff8b82a764bae09483c8e914c3077ab1c10a4ff76826fc3a208b435f968b5888b57c91685b7e5bdd8c029db94859603b84a439f4a896a8a4e35e796e9739ebf09d61dbb6fad9987fc39b55fbc9af9ad2e4aba65283d2a6037008a8fb9c533a84921012bcd1f77020c0cd920b73fd5806d3346d34ebed7d2d0f9c225fe5f2026b79bbc1541cf74de3687b3f7d97d0eb0132797f036e86a5c4ac9bf85d709b59f02e5a7cffcbff2708870fabaaf7a2b41224ff9cd9ff0d9fed3b52428fcc54941222d7d1ec0d99f22a9d76f92fc7b46b8501c6ceb9f36329639c6ce93d25fec36da3247b9e61d1e947e54d504d41133e0a26f5c6e4484d9fca3cbcca5ebf5658f917725be53beaddff7b1ed2de780790292344e671b562da2c9b8f6a0751c99979803e9488b1c6f30db44b6b41e03a587a331001c1a3fcf5c320abea49910a7e5658fdc9459ba881730c5e1cdda167ffbb91d0f9c44866d4a885dc5a95d6d4acd6f825a26e53cd75bc97fbd041a94fb9d237a18f9be4f420ff26973a543cb902355e5bd151507a3b73be0c914ff72eb8f064768486aad7175cd8d0bca4a6acae7e31b88b08570aeff087cc154b3e4b5ed226a89e0300bda4cb8c8264c3d0db1f6434f795ad45e91105db29010695e90632a2f5bdd7eb32d2b81566a9960520c52ecac5a986cde2c54cde4581b25f4aca97db0d12497fcc05fb5a4c361e95911a1f8b729ce0d990e035344dad9d43683187f158776ed1b2fba9d6ccae44adda7b90e30ce6aef955484b4edc2a815a4ad4b89e259ee86447063fb542d28f3b48895732107c4e441fe670845bde84032864b9e6b9e124e5b4f6934221989281e53f17a87fe6d4158ea6f16d43acc9785bd14d50e1257c3cb0c23ff4864cb4064b8bfe8d4d8aae53399afd101f8d011579de712b0986013cf799b337a4709641d591ccd146b9aa761d1d4f78bb7bad95e13461acddfc88800303c45c6000e7717afdbf5af4e70035a86fa125f95ca7480afc4950c9152a953876b0b1e670d1b250fd1af5c512335bb22a6b354ad5d35604305909826dc05ae53898cfc5e2bf9b691375ed2891ce4ec2b14524dd4c7a1f3e48483369b9d22ec44c85968a7ebba5b2b1dafde02db87b945f973f1f3dd69920ee6ab0a0cf6794ad5ae840b3dacc771c7f52ab7db21b2e4f9f26a1cd43c7b1f898edcbd0cdee994f543f818163b2630815c014ee2ecd6fbe6e76d5c2d62cb65188fe51dfa0d829f3c88faeb671f0a6f5208f25349aa6b2c91a4708e0e97cdb2eabd1ecc00dd63c60c1897fa81e63010c8ab822b653dce7c44982966d90e99be77a004763ec1c6694f70211985b25468f4ce6e9ace6626e26ec1beaa32be27d62b028d7145b8317c4e68d213fed42f25864e4caca20f0879a74fab768b7220ffaed2c7676c09d6464c276b2b01f2f400b6db24959aa0cec352d1fc08276eaa598a86ee86d70c7b00e88245a140349c9cccb5a2dbf54b29ba8112b7c96c8c1ee7a516d4f29c4e1a1f0bd3c55ac7f8c63a7855843db5b5bfe7d9026484a262a294d123d9f0a717e3b09f98bc4f6f62c27d28186f5b9c6a71fff64e385527e2888bc53c70242503be9fd4c6165e8e95b3570161bfcc1f614d13437b554d8e39037398e50a93c66f8b6c2969808c9e29cccf50bda4000a56906f04cbd65a3409486aca959a6cd05060851169beb9950e752760ec1667cf78d580177597a1d2cde60a0fed80052e9a0875e07271a9358a092a8f81917c686664d133c66c24dadbd05506778f75b4ae349703bf985d199514967df3bacc59a5e18ea079d1c9928a154b4485f56e2541ee05872b1bf8c9f47ad5b8f4115005667fb4e904954fe0622e38653a664f2620324377047d09c6d8bd6cbf8d0ea8e3fddb2554570e53649353cc1c9854b6a9ee824b677acc8e2f8486f122e2f4bb434175a0da1a7364aafe81b66af47dccb675b679c3a7378d934b0a4eab8f76d382bda016466672010255156d2ffc0ea1eb6b7a6f03e2f113a4c75bbebaff849ccd25fd18098e8a4c24b66ac0b55628fd53c5730b3ef817387077724ce6bc328d6663696f1d0a48620f99d1d3ee0d24292f66e347cafac8617a1b89ebabc530879251c1db28f4488bd809de7a704b8a17036e8b8899c621a2a204e352e036e9197a7d42970b14ec0180aec0349ca215200819c9398af88760aab5df41b8ae232f1bfcf88c7cd768eba0e613136fad4c53cafe659ce4e096aa862bbf03c298a830aa6a2e7f3d52082c34f70680802026bc7f064f8f55631cc14d1fe5b312968df637aa59fb38ab45cfd4163dd631d0774410a26b1b492f6077ffff1da250fa6731f1c0f48810ce964cd9b333399dfa7beed8ea337ff2122e0ca40fbbf8ba1576cb74e30f5685cddd0d335a03029a52fe885071a351e4cac15956141d396603947b8eec15d803d9d3447ea489b89de2c8db6b15c77eb05b5ca726772815d9abba62a27cd79f1b0f9da174d385bd48e1a4805b7a2c12aed3b6cf9e841fb317d6eb700e728214820dd2b120d18be0eedf0ecc41bbc60a6ae698749b64602b56e37fbe10c59501997891d1c37ce06a74b44ae33f08359a6357276e11021ea3c3ef3e45c5372642c7f3480ef5ac677668a33ae07ae5f70c40749da2dacde155b152f28270b5cc38c76cfd6604770f64d4fb420b3aa27e548479a5af21812308ca7952972315e1c102fb49b0b2763c4be2ac12aef06f37a2502b13a5d327f47fd553fb8a52f67fd273c6e96c5c729df40f06a92a80dd2713e0410837dd99dfb79343908b40a9b54f78735ac013d44efa4b4feda74e5f485795ce9fead9ea7713f7141f9820be6e5d3d54117139150a2547b4192fd001bc6be6e10ab5dc8f98358a1d5b3e5cb13e3a91d9c672d2e63328a670b17fbde26676047d9f1daf2d81b18a32e4347bea56ee499dcd25c66657b7827aa0e18ae373493a29a14d62af507f02294ec2c4d8b8498437f1199e96930dbfce58a282ddf38f0d5ef5cbfcaf62e2f311c5cb6ea11e43b2639689fdf7acb5a75c16280857f1d81041a61feb813e9eb909a7e828f97b4e75485aa205bf0627886dfde747b449083b6397622c1c8b8cf4bd394c3a78bf09420db1e5f4a022196906f86dd696a8e34663bcaac08536b6b0cdc809fe075d7aa502b49f318464945472ffb204f5495fd5509fcb3f6a7a766fe5a15aedd3df400ce13e1fea610abe51fac4ac3455d02ddaab595b30b2dc9e78d2f631f8997f9e6d8bab200141952b21a428ff77903e4165d378d3ce64072b8e890360b9caf8a8eda095865b63932e76ec1e7438f3c91ee6416929d1de2099149bf2b18783809c12a43d439a13a4ac86367211564f0ad09839527c921a366e27ab3e0cfd8f7b9001a653c95dbe1520ed73cc6b67a6b7703220b0fefdce5eef97d65a6cee1d11c174085146347b5c938a2210a32ba47ea0c83ad6d9427cd86aa17924fb8875a4033df0d14f83adf49863d555ac452a8a78ad4ea2889194dcadc1796fdcacbe6953fbb04f51cbf7bf36656f5de6a7ec4bbebe77fe1fae408c651dce38988db5ea533f72318c3f17fb292edc9bfa2bfb1edd9bf04b7ce16bce2fda8611ed7d73c6f5127f0d43ea7f639dde285b1c1b1b181135c7088c8673ecce9f671eec6b51c80623dd4da7dd6a1cf814d2e3a7c9cfbbcfde96bb2864c20d64ead0f08078310cad953ca692e498a73916fde6f9c7d525e535b22e0c2a7500764975be763fd958f3c83b4b82b0a4b7509d32be503c1b2f37c62cc4e92ec56d519a597593e3e0af35048e1a75b94667c2790c37f2d903f836bb99568bae059de3b83e912543c5a709bb3f66a0ce5589b3510932f9acf73078bb60b26fdc37e487b979cfcfd5f67a1ccef882b6e3c763add5e08ad1694c3706e876b0ac05ea2003d15cd5cf072121e51d60b337c26482430e734a9f189b41a3472f50697285d0b37e32632b304a2000aa652432db04d101f0f51c9a5aadde6cdf44c67b33ead6328b9ffcf0fe11e3705b3f449fe49ce0ee6bc714e203afb8c189edbe120f403b99ed12aeef113e2ab231fe20d928f46fc0e2b9130d0965e1d70dee53a260abb72c04d8618fcb2ad5aa520b125a6c5972f901e5734da822653527fd09fbafa6cc5e4d9ca210c57a6d881242c5ea169cb8b773cdaa7047a052eb68ce6a272aa790786d9e08898dce22a855025ce00814ae82c1b83c5d1a3feb8da722f12fe1bd06fb566b029cedae1b9ebade1821f3cbe3edd1260de7d3740f337d470b743ee18e6868c062a004b4bb1d8ee343439f274694bde531767685ebf9289ab817a4f206efb140b3b1856548fa028247b76f160b748d41ce6049e8b8fbb01d520b8d9a6d94a1ad6cbd579c90c5a399e217cb9ebb201f35f61a6c424c134acf074f1ed5b7bfaca7a0ae692dabbad8c58cd763652a8c3c0d8acc24c25f22c9724ab6ee73771531dad7ae7dadfaf494902dd2074e7a42bc3f5150aa695678607a80751e9968ab43fa4dbd1f13e1b41b94ec4760757b06b074bc0c4732d1901f5f509cdcee44f92921a8d363f2d06bc396abd3899290054960d43ce0c478c8910d0b8a084e80145a8f02dfa51f174d404efe6ca05fd3ea958df7472359dd208adad5bdad253d4f40e9e13ac1bf061b46e9c6df1e4af562138721831915364ec937fe477c5441d684783a8fe41f4a5b9b40d9888377c623e3400204de619f2e90b327a6e279017a7dde6281988c965c2f5ce922f77bea15070a542739b8912b0560e8d5ff98d73c760ce503c2433f0af92482a65480bae22c6c672d1c38ee948003d4571b002cc776757b22d7e1bb1c447b69092449d3d5601576b53fefc1bfd4d103ca4178cbbb63fbbf9372334be6e59b2a11486dc530dd960bd586b5ac4182937b3e6ab103dbd8c54fae630f51f0450ee47991c77e861a3f3e722e55a89512d96f80878b045de2f47c8245a6bf8cc1a954b00c7a4217c26feb4fe84d2d2613bc45329243f894248a90466786a3a170b990f788255c3c70cc0307dccfbc0005c051acd2c8da51f50263f95abd95bf3a32eae1733b3bc31d7f8b805753b9b83dd76b3bdbd3246bfc1496eaed9276315c19c8db296eaea1f28ecd7a941d681f0a92c4ddcd75dc77b2b55cb467bf5d9d4c2826de42a6807f9db30627a0e09a8db1140f45a519e748b1d095f658218ad6e41feda5bccc80fa194f082f7ef031cf5e1dd10a620e9c141ddf29eff890d4ed7a5e045ac4862955ee8734527f013d541e2cf7123ce2f9e73abe16d1a06b027a76e335015f88e06f820a0735ad5d45a9e717918ab5ccc20d5b910a9c4315c5c2ab9ec99449607efd018ffb12f5153812110f1eddf0e1e5c2687c3bf701cf9e2ee574cbddb058217ded7670ea49d4936b71357944453d0f3ec83b060a5654743d31a61909a9568b29907d9509f51f10a1267b5f9b31cab67f17b3028d8687333d2019ef2afe03aefbfaf5005dc9bb02aafe8f1ac313b8a3b61fd6d6c8dfd9e0b7e39ce2d43fce67a14c65b46fb9520f90417be4307ca3f9317108a13bad4b8d027e57fc0293771b3272669b0bce76fd7f37734780d75a5253a368d67bc9e7f1d7a6fb6360811b0c6a1b80a026b3e8a075e4ae6350ed339e04d02804ff70560e1722edb72580a11e8e711495162964fece071b4b6fd16de7cf88a409119e66aa683dd0999a6a080aed99beed5ea65d35320529bf20e9a31eb8d95986655f7ba5914af51079c243205aac6004c5131d7087dbf75a45734df9144b759d620c9cdfbd47331530aee8e763e76b4dce22e643ddca0d18fa7752b009ad581714717f3e605f31615f6187a0b0a815ca12e274568d8b6ee69740c8f54113c0d137f4ae9afc9b94a2f1cc4c1f7572b23e347c397209f64976bad2b8f74ad6b1bb78cfe054e55eb8cc704c540d57373b9647e3dc9a9321a1bb3e186b207838b72fea07f5ee590f5817e2790c8b751d1913157dfe8552878dd5f57e0ca10c91a221512bd0c4f0c4294b64c7504ff2fb249a239d502d5db2dbd372d2add1fbb10af005b9ee5c3b41812024876dd4b10b148b3fdaa4ff5b8e52c32141b77a612f38bc7a145f6d4f3f138e3e4afa913673bc09926ef45aaaee9b5e286486c9cd9568e5e2f8cc259e2b6543241558f6acfed49882603f68501776898dcb81d4d3fa462fac5e820868c4e8fb5dad35036339523515e008a6d243c2a8219105804f8f759e93c98b1e8f6984fdebb6ba30e977db6f667cd6527b67e36dc4f5c79ca15aaf22edd7a3fcff63e42568123e701923510775ebedb2ee325dab65098a6bbfcca1cab6af82ef1acde88aaf0eae776173e9387c42b8e9552d424e6fe51a080c88105f4fbf4ba1a094a9f99567046611fbcd46fb0c151c2d8e131ee9774f4ec5acb8ae1573ab8f940e2e9e8911906969df1b5c90799fc170b30993fc039b30403c9cd475b3184d0205d478b540219c5ba691101b83f5030eecbae89e2135e77599a005575dacd3889965f9d760235bd9ad0215938de1a020b24c0e3f03582551f50bda2f58862c84bd837e51b72f7b60950ec3a48a78ec53610eec2b85572b1a2d5183a43f0683a4f85a0340c1679afa96210d6539e3bd3c9798c9164a64853fa635ff606d9711d16bc1ae4b0a6499e910eb69ae9abc1ac93d25ca9feaab9843f221fdd8a613a0fec6a60fe3b67dada11cfbd6d6eb4e68c56947ff581e6b75257418e3481e6abe3027fc9df1da338c8e841a4dbb3f16a73cd820c2748c0fe8c797507c6df1099a788fc95c3b52b9d63da24419859f1ddfc7d2c44db3a981816fda4036f015fd97ecc556f4990399304f2450b92ccc818fc6ff50f2bddc87b8969c4f8afd7fcb849571bc70de5a47c1806b28efcd0a169c9d8ecaa3805b9b946b9c73c7db9afa9e030aa7db7f918348c9e51034dfc4cb31069bbac7b4bd588023feaf29f0314f1f081fa8f9ea6ac7a7f247cb4fd8681fe040f0fd1ffad970d91c9ae69b9f8e1e35fe3409587a80b097fe5ce49f8551891d820560aac3ec88c3be44404c1e80cc8c48403a98c86a7af6fddc317de4bf176c3d27b3c1e29282b8f8a06d88758524305aeab89732228eed9f59e0900d1fa75f69aa37687929e64d8d220896165ca3727b5e28a1e630fbddcdf3a873f9c06ba975b3dfc890922ec81264a6ac018727277a1de85bab58ee0c9035d0647433edbcd87a0c704cb81e138f6f8cddc14ad43212711b3ad17cd2e8252ba8b61aaf8f77681857bf480f4abe3ebbf3d9d818696a0522e40fc27de564619e86c2137ae647758145671c459729ddc986ebef8bd3047c3448b772b664a6aab1b566b0e8d8c2e126a07334d9e454847e3576b38562d3771fe603d1fb3530f11783a75a2c4d2d3a99a19e9c4bf99676b7de2b4febc6f280a7faffedecdf63a3c14efa077d7bd3709b117f5649925173ef69bf2109d3e04eae9fef670559e646567d8a672bc967b1a8ebbf85d02a41c2d2c9a9de97cb2addea8142c4553bad9889ae81810ba27c124a182fff3d33e5421a6cb36cc6141f1633d0e948aecf06cf6f076285967390d8d612e6b807fb4d334037e28820b86d4a1b3b6b6c624f7912b5877127cfd3e7eccd26225ea0248fa1cea66bafa54f197259bc01b186222ae0699c9db44f3868a273b70c44e04b9faca8cff84496710925f06b908c386350ed6891262a43f4a389adced0747535ccf63d08950c8b8c89044bbfeb496c56ac3ac4d95ffa78cde43bc83eb3d6a764f9c75ec5e0abfddfc07f2f718197093f24f256e358c198d987c52b83290a120002f95b8b9ef53cc0bd8be7bf00be99b0a4be88abc687c9f6b2f4f62612bbb1c50fe7002ce60881319c2203147d2eba5a693d69c648c64478586533e0e331763d8aef433f340f11295b9a32bcc498709f553a1bd584f91f95c3f3d6bc4338b764baaa9bf7041d98c26a87f9c42ed71f2645e55c1b187df297713f2731b4253cbbf2cb74e6a9a01f6cc37f3e335cd00ebb9f63c7190fefe5f3b6e980d87f357caa635bf248e28db9ec9876154bfd2500b07bc318ff1cf1083102c87b25b207761c68c97bce35fd814081034f32a1db018e8734f87cd157b3c367716e8d2d5f4b4c4f69c6da7231b91f94d39e04a528a93be0ff9511bd549bf2733ca52fea8e190b3b021927808699fdf659dd4317f34925b971370b7890e0250110add1cf5da4aecaad8c03df11f43298c99ded85047b258061417448716b0d43f2f30a1f6a606f37126030a485446a97cc79f10fef268a780f456ff19436148c4591f86a03d9840a0b8b4f48d5ff03b0d29f8d1be1ad7b8d9ed0903ae069de2b5fd8138a9ef8cd74ab9c2c5a4aa61b4b6a008a99a852a221dc377d0f5fb506d922409946d0858887a13e464af3fc2ca927233de8c2721ad6dfa58ae1e5933007c3193bfe7acba31c938e19ed272ebad146155a75d8ba98eaa8a5c8ff8c066c32a05c23015d503083b5526a0b37c324854c9886950d6585fa3120ac08bdb26afcae21a54bc3d59ce83ddea1aca0cd2d948d301326c61e8ae4698bb728651c87f5cd09941dd228cadf0c89944698dd8e35446b5eca9c22bb3ff202e2d18ef34efedae162002de59f26c986cdba66e448dd94afe545f8846ce4b8c4e2184b0f8b9fc8bd9e6930b49ff27bc6a641a82ba71041ef1272c1e4183b1e0782668e1413c17861fc1bee91ca9f31b1b1f7427c9b285aded72c4e3d8406a91747a06fca9b7573f7bbe7935e46aedf00b44b972ab9761211653450ce48e16e3e8e678dc690c31cbd42a3900899f3531af61b02c79744158604c4e4a526e4748f6c79289b39c43f684b73ba3e9a6da301cd2701dcc0fd0b6ddc8cf19f1cc38088c68363a2ba90194788aee9f49fa0bb004023d771927cbb0bb6409e29773c40063cc64f7d0c121daacdb8238c0f5dbabf10462253ee5dc5efb4781a8bc62f16bcd556a0eb11e4c7edc26d9a0a770fd68d83b3f26c89017e7220b68bd9f1f65821e71c190f7efca44e2702cc7cd9df8e657bb380b6cb45016e2bf9e9c9c19d868e80096f9a72b6afe447f760ecf390ddf979787ff152689b8cbc757f69d930057518a965a585766001e47d31343d0302c6355332cb392ec8e7a3f3163dbd17c3dbdea17fd2cfb5b0a8c1399f306943d294123fe87b508590f0e546a9f4f71b70e84288ffe81753358b8f526db1497b43ef6a661546fae433fa3efa744371db881bc9ddc7ba893d8b21ec677ee5e9b3f883e59894c506a0829dda98c92347661b0d4c826de69c71421cff8850f44a5f631ee90f359e6f468df305c90085fa1bc229fba098136f7232cdc53a3c9498ad5e5881bc2318797b2d863324e2edcfe88062773663163dd9f54198c90f5594022d6ae6ba4488e2ca980ac7eccd6a4604b6da53535ddab018e3c3c07f00bcd0db32b2ed5648ae1977428070c0acb8b25f8c9d0c353ebca4d6eafb182f78dd7ae148e328ca81329560157a5431b0de08fa1b6599de94f35f3b00ac8b5cee4bce07afc526bbb225bb9da6a14f79879bd53b31a1cad4caf29cf77fcb0c537d6244d09ff2e43151f75f826838a625233f2f8e3a8c9b22d121fcaffca07f0f68fb131dfd6d05074bc28edbb6ecffbad28147785e1f71e81cd32dde1055f3ab9b24da68d248e1e0bc572fad15ee4940c13096e4b14b35367d37d796b70bd3eae0e9e2050ba205aa497a07b724f4e1ed1b7d8ef66e5d76653ffac510a8f6fae6e5c679b515fc61c8eb728105c3e0c921d9b28c7ce85705838c90b62631bd80eac87ac13e34dd98e852d0ffb6bd6ec872a4303fd9e0cee87bf317a41f5ad68cb375c1dbd0eba88f1cc399173e3ab569d83dcd8f13c43804115273cee6b4093a0f2dcf64005b4f33eed2673f0068f53a43ea891a7e22f6296059acb9a101cf99d983302edde841b7d02c5ccb68143437a2036d905837e86e6b85c48c2f1f5cacf7cfd3cc1f37deec34686793d44265a04505f5359ca1fcb39b2b158496165b519670a16dfc36de5e099eac70f1df39d9f70170c61ba907fc4f9fbc42c03c7352ca1af04870e4493e7c38be789810330d6d22962468c3f1564041290922f14f62e4b2255f9ce9433e1dd18349862e2e7b7d7bda17a7f0bb7225963170c511bc12ffa8302d0fea67a7f3452b383ad05791f38598a0c0ae2b3b62b238ba5820ee90a6eed5ef327b4326a3c6d3694222bf4b14b8838d4bf62be5bceefb68cde9f43d1c9c215a5771872b6fcafa09de16584ae8eec4ae8fa486497a7c28b815cbbf70bd6f7b341185c3669f4292090aabd0e65ef017206584bf43a72a782da2e03d9c38e9c36008007fdb47fdbc7a28f51383801fdd85f2c206b37f56c8e6a9e5e11a33dc7997d67008d07273aae0cb774be5ac7260acd5f29606136ad5b2553e2c27c422aa45b957a51ca5bb360c32d1813f49025e2ccc56ac5a5915ec9707a46a15ac222e0b7107a819574aaf65dca1b9ae1da0680b08edc54513aeb6e3bba56365fe4d6effa764437a5fb601c8132ce1753ff8c6e5b00f200646c2de8e3c5d7a755c52486d53cee7f32c7869ed15a50fa99fd9c6b42557f4aa327479c213a3cc048de8db56cacafe690dd37766856fbe599f695a609aa148d60985bcd118e9b47c413808a15bf16707981bdf026c9466d057ea763b4a86ee3468a898427d674d2ad2c5a810385ae2ddb4439d4d7b815d4b3f798d0233660cfe4f7b71e8df51e9ac537010e507f429c4e843afdf706bf0d4c9295c1f053bfd491b0c3900b4ecc4b109b55ec5f7901df02e65f876c0db11d51adb297657b7933397ef49ad49424737ad9fb569e0d5a6d70d40449b8b1a4ca06cd884062f275e0af7333b52cae25e61f09e58ed4e64c65416b6e4b88a86ce9be6276cfba9039df619f7ffea7a0cd71e258758ec1be89d64c229761589647a89abb51ad2837c4ed75dd270f075cc7c9f2f5efaa96a5068a32aee21fb81117c9e11bc1456c378d873e23d8ff1023a113857e335104697de64baa2bd6e529c7c4bff8a8c6494259e39a9b6fc8e070e461f3787aaee2be3ce6f25c533aa632ae4f1a9f59ca68f610f08c61894e7f24bca8a456c4897797c05d1057e02710bcdcd5ee1445f22aece8a48f93d6a4572f563d34c75fbcfdba7b580743653d158093358530c6c1e2871a9ec1f9f7dd46c54c1413922b8f4d908a7e3f754bb598efa5b2f49df2c27fb5b4ae2dfef0e0bc2837a87a35d77180ad435621e907efea7ab33cafcc21db337eabcc5b3166c5920773a2e010e01164e39053f0fd075a85bc95422b5a1c419f5406c3f860eec0673e83f4fbc27a8e90f20f73b0b2b0ee73cd45b6892896ea235457f292429f01e64d71d8a2e08167c61bd5cdb01cc7dd94756f0f952d060e899827f08e14e97f27ce15a7d19f0d22079aa3371ef53f294b9a0b5c964322262061ff197819f6632e02e44833005a7a864864885bfc929b914e4c60422b301b956afc4a4ba2a9bb28391cad04c469e8e3cfce5d8cbfa3d7af9c349290d41c02bf6fe358a60f2970f2443474c964f2c63252f0d28ab9932d00912d129acf3230472004269405278539a85b30934f5ca3ae8f93bc53d8033ed62032028f759834c97a8a44962119eb05b177c91f5ac49d060bb87e2f2a27e8c06233a44c1f678af18406b73c9ee620d9939cdaa69dee9a4c1610e19b5a59b946211a28f3e48a55d2a99731280bc2f5f909d4451260d2f945ac04f48a9d7d1a67298ccbb2ccbfbd78e01afd0049132b586d87d76425b3dab6c7c338a3cc40a9d7be31974ed700579c46ff8d053a635b921fb685d9572b7056f2b5048b9390146e34d197611f969dccba0d652170600d10a8deb0fddffa18179b404dd7cb6708a8f774568d4e671110599fc19aaa2f859f6bd922ae1b58278e4dc6cd51ebc3ee8f38576c4c6ad549733adf24adc7a44c0e3659726f0ca2943e2048c6896851e841f31ac33eb3666413e34bbf309cb12ac874eb6c3438e7c05fb9f5af4428f61813b91d1b83227aca498b22720ae89fcc5af8d418030b0d975a59f68f6da877cee72fb53d3e7791dbe4210fb517773fe5c4b9e94c2bc0415682c5a811fd5ef210eeeb4cc97826c325a81060fc90538ac0ed48a6fdf1b298d47c2af32a3061cdfaa06b3dfd8ad870688c8d0b02c7b8ade9f7de250c566ea11c8d030ba9f185d5e4f8f46da5e833b34f262eb1cc08dc541d9377ce7277b186b75bb954d9298e7dc744521807b42978c32066bcfd656bf0892ce0f1c6bc68caf6983afbadb741547baac6b2287f3e1976e4e47b071face5561e6f383a89046a19e108ed87952205df1838e82ca118a178e38c2a1903af6a66a4dbc7fb2c22ba6eb44213ecb6abbd75cf103aaa71931dcfd84cec47b616ff2ded1ae86e9e26889f41d50bc4089af90b4c894b34a64a83eea415dc3394d8596b17b0c4563bae95ba11661eda2a651558eceee6114b7ca754d7aee3a987364cb86566859e4e6a7d53888983313be002d889657ae183bcc534a822e0f6a91a24943c4336131e93a2e5062ae78b8fc2ed11c58dae2834834bddc853f6c2dcbc5bbd3a9be99061bed826db4c923adb2b071c2cc67139d0badf613cf10739e491c86473463068fd0cd90519a52d5d5dd7fb09c71cd070df561fe59cc8d835d0d50430f9a482c75f58ff7990b35dc9f231a406a681e249ccca425544ad6dee7b7166f828944b42ae326a617948d5e8044af50b854d6939cb6c6adf8a3f74d7173279c88336ce79a59549aba14ba71e84776bfca53d9863fb5627c862ffc39ca2700330112c3c307d401a1d03ab0b9311da9211bda04e9447742fc719bae4ef92569bd0aeb443dc93b1f283e97453a9afae3b0c9ae18054dc496a9532c67ae3cc91d0ab7cfe17602f59353c0643b48b4525fd0e2fc1d598298d0904a6707daa694866050ddf96799aed97a14cf5f48b3b83b46524cfbe57523bfa435fabb2630484f9ab8c6bf72c115981185d895c6326d7eb2ee6604ba87398feafe835ae94f4f8bc2e89e49d2b5df6f12efe162051ea59ac71b61ba872b14184c9727573c2ac74df82b79699410259301c546a313fa4c0981cf5b89ca1ffb2c0a65bad70e978d9f5309989bb3f5bbb84823d2fbeb9268cdb5d75f7d81e173f91f7d6709421783dad3cfba491e2d093d0427d2ce0040086c032c421ea5df4087bba1a4988472833b2f3238915ece7ff6383df0a800884423fdacfdd469f4988ec1e479bd0d0f2e9f561e7bb84b8faaeb37352ca9e02d2759b2df0c14401c2d59351500bd812b97bb9d21313aede8172db59f513e52cb3d049bc9129b06525656a604a52ab48b474552fd6bff0ea6177d8c6b4cbc8757da18ba1e3566741a0f17502d2fa509fa08b1c6c3a800431e2c0db21192a68cbb78ad03e5fd20d06ebb21162feeb929638e0602f60f2190d854481ef07d4b13dbb8b0434ca61c86b3600c9c1c48b2e057d543b5ee4e7fb6c4caa7f9e1a3c817691b65d77d5bc3371e447c0ccd4b585fe6b0665d0c2eb3d8e333ae9ffe211bbfedf8232c9139472bfe2f179d414129386e07411036aa451033b3eaccb12fe0372ef804b123fe366084a5ed051b7a22af934d1e2cc286d928cbd20455a9701528c57268395a3f846a232de637c9f01b8bef0c7b6fcc4345a0255f08d057459564a225dca6d9cc7225f9c239e15ffabbfad830ea5fc1cac466961bd81940c85201c3a7efa49f03f2d7df1eb8d191879f890121a3339310b784d5e6a43aab25f278b9e5454162004ff2aebe2f24094cd90870d83a5aab3014ecdede44320550b7ae3ae9df8ddaff3eb81fe66956b0888385bfdb23772b0a9dfbbeb8522a57dd5ce50ea00a2991f2599b44a121d5afa59f7288f466ff205257ba5532943369319217108772a3d6ecaab7eeecfd3a56956163f23f2deb8f7487f7ce6b8c1d5ba9903a8084a2c1718e479df1f3c543480e7ee604db34caa7f99a4bb401c1edffc0176759819e6d7fdc1c2918c0e9dacf18f9fefa504d907459e277001562802c471efe03d80b5f8940eefc5c59903f431f6256e7359092e006a00f44bc0826311c2b36521e5fc89ee7becae1a3aca803436053a9da6c1dd3852e7c96e63ac37210789e58546acc4cffb88ab5fe38de28f1b09a200799402172ba0dacf8eb463c70fa77dff35c5226a37ffe11f4dbd38901bf66e8d9c2ade1b1943002a186bb762c0179d43a597ce77e1e834b6383ea733e3b1b552c7c0c2edca6df3b9faf464f251ab6ca89c3bc93550cd4768f4d30a1203e0f07f63587bd764dc04ef3140479b10268bab33fb4aaa357fc5f64281acd48a25e022c80473ff09aab86e04656f12bf81f8218cba08ddce4075d2fae068d6dc592d247dca5c798cbacae485acaa0fb37a7bd5d4e8faa025274252a313779188bcbbb586b7c6c116ff94cb7f326beb2f1a756dbd060b6bc993577d31d93aa21cede19d20d116f8cc28fbf3d7a351fda4001916dd80e18ef42d6574ecd26ede8a774adcc7e12f876a8b0a3fae2ff2e4bbf026504ab1ad50b3f7d5fff28807c7c73980bb6a366a6096e6ebaf800763f8f781cef7532f40ac4baa009072e81e3631a794599c9857df292bea13402e2f38ba37ead7c9584a1a6be69a37d505c611c14a69f8c276eea9faf641646134d6971c917f09d2908e638ed48f2f4923efc79f21957e97653b9ee4d9837c393ffeaade5d3b6e7b842e75faa636dbc4ceccbd872a7736495b23c0e6c54417ebc4a076687a925eb3ef9f0b2d84487fe94c067ce43950e2dcff5793d2ba5fff6ff4b9989de59cc28cb4fed8a58c16abb9cdddf5476cbfe1136642eac93a25974fdd2276ea5eea4938fadc987734e86160e6e2a2305c9f737b3a5a0c3da31cbefa1099dbcb3207826ba008523dd66e97aeaed181a25d3a843a56af29dfe526ef8e4d6ac34ceeadebaa6603afc73365abe59ab2277edaff7a87f1b7833198a3380a10dd2145ff6aa9f803e72e8993832465cead59b9c1a37284263ab544ae0919a7d9c6614de5d493e3ae12bd6e13e3fca06f04c4199f1e1feef565bddbc0cb4a928a2edc4039a53bd952fc9b3ccad863ba685fe8e58dc5bfb848a373e4e88dd3873dc5b470415d0935772687939a352d8fb1cf12b7bf95f3dd09d3517ed5ad9a6c226c2eba2d5443f16c391e21f7b39b12609c22018c019891f84a1fab4c5fe7a4e27b016323749853a7fef72f58941d348e21c360bd947499ad2058e50fb9e939086b8b28da77454f314cf62fe612c93dba7c4d09a81c375fcaffd033c61edd4aee4bc356c1d6105fcc35124313e765ae9ffaba62e02cbe66449318f00b3ac602cc75eddb3c5e2f457d5a7a25218be1f8f0686cee3967a3c7dd9bff2f7dec8249facc153a7bac3d17fa49e30b31e81f6438f93f1a06e33bb6fd6fac61c540588aeaa3605a6cc8c910931d6b0f8146c2bc0b8d7e146d1925b838924ea8cd358b767757faf370f07d2386fd0a0e25d89a653ea5443fabd595cc513972912c3c43e8f25a26298d82c9542713c8a72360a6e2554561f843da7637120fbf642d3e1263a64a935b5c417c7fbf308c0194498ebbb86ceda6df3866e5e6a699fa9a28897b082f7a71647b365c015f3e1cb000ab1390ad25485072dac7948c75f7491c8625b2d8429f180ed8b9ddc759a685ba27fb8cbbacd81fe171742e1cdc27a6148e72b6bd57f5ca2ff56ca0ac315aa72d5e243b06ca58e84a2123b36ab65c98b7145372ae9f3e39e65bfb10e02d8747f9e2000036b98f7ba614ced46a659a63438da2cf7dab8b723d2b93c1fdd54d37559a9d21f00c92fbd2c20f521bc959d7c357fb99a2ea432a07df49fcfc5685736dd87a3f148ab0cad84c45ceb9f8157a7705d1f1f57db82f2dc520444acaf4b63abf2ee8882e9c277254f47c075af2bf9a2dd79077751d1b4bcbd2b2a30be7b6a86716e5743f33a92edee88d3ffca03c81fa9ea1ad4e7eaa9a7177f0e2daf09d7ed1fd50df3d1491207c65949014061fc1e9957abd1fd2b4a13735217e4dbd9f9af0d395fec4027b7a1a56e94a0c2c8d0337530c159be85d87eb1e049ed6d4db629c6ad9c3707aa72a900272eb7f8cc35e6f06d84cce72c7978740aba1a6fa0eceb2667f313362abea66e0e8c882f07b15f647ae580e88bf30fa4c042cab30877d241076a499b4a5dac2cb2fa0932990b0cd1030282736e0072da413e4bc37004e4023eedea3f23966b3b481fd58390a75ddbe75b79738dac54bcc2bd75277e17091d08a3b0e936226abe2e0da9edd95a6da35ae445858bf11b45590db6e25f9d7a68051a0b6cf9bfea7b07ff1839147a88499e7de434e9ce9e5f2323f745d76d654c63abccc8928c8760011003a052525223c031e91f0ae4bafcc1f852dbd4a737c0d533fb4c694299aae7c08c2fa360e46861b1403f93e6e53176cd502ac92441d12a36b4e5361ee977a134369d626d7f7c5748f9fa4c3663547bc90e9b2e85df1c7d04f64de03f05b6dea13b29ba3ca3e659f22f6766abb8ec999633f9048ac7bd4a0c5612ee27c139e261acb8f8af2e57d2bf9701bb8fb4c189913dbe6dfca9339474b75a90ef0fd0f42c44381c7483276cac7cb81e7170c1303b7631185df0e51953b622404ea586c4c0049628cbc681f0fcb298b7b3cd648d84f76e21882590eab159d3d746e0efdf5d1092b4b41a829ae4173bba80382ef548ac36edf5c8aaaec1dd290820e4abab2c6031ea6fcc56812608a3c7c99640bac80498a1814268474a621620090d693cdd8d8c69381c67387baa4ac1e4b401dcc1e00fce0ce66497b897da167fb9433ff45f204f18830ec879f59aff3412e105c6683da34d519eb0e3bafe8a2e7052597d59bfb5c7d85f58b5d569fca435cdc201452ef364138420b5efa4411813665b94b2d29cb9c5579a1349ba9769baed3ca755474682744a83935d6c2d40dde6dccaedefcd67d1d518886519d01936ca822e8008cae7a53fba2069fee11596cf504f0768d8ab768d4c6dbe08664e76c9ec45a835e1b6bc2cc2b5408365126b4f6e985663b6df37f97181b71c75774ca532f213681d101524889b89a021b9cf7c17b2b80306db348c6e0616bcdfede0272deee374bc3c531a21dddc8800c01a4bba5891cc8382370e85d090fb54a18f8ae8152cbc14e6ab96056a1bbef2585bb70b9f29dd26a4d7103ac8b70c6d8231712ec33f67f96d8ebfa0f4b303a96665cdfd2e9e2e716fb98e39f01797a2148568a462b66e11b183d66f498747bd5b45e62f80a2ec13fad6fbad418c25553a6dbf6076594930c148e99aab69b26632b1cf66ebcae7eac2a668626281a3fd637e3d35ca6cc2c3e9ac131779daa3c2b41e56cc0ae00e8b5dca76b5da9d5f70f798f365be054b11f74eea77033c7a51855734d96f79535f128fd6c7c27b1887b7e38aecb890576f54d48f6e04361afb12ac2c7ad8f49a416ebd010a2f057b41f0e4c400f31ebe975cdfc967bf52eece5b5f554a9c6a00759c98188c95586e33e01f44e0fb6c3a4d5b9f96d01374cebdd99180489a7e8c8a4d3a0a76bac27d03cba73737134a4b9a605f67f11483c225acf74f92f6094692a010f7d170f8bdb0acdc749542a505853d329e2e04338644e2355f6825d578b1a759b448be8b5675a25bb99073a8ececbec50dab204987d14f48744d63a6ac1317a5f16edcc1c20e60fa4002a06a1b9bf42a24f03901130ba7f48ab8e00c5b9b18ddfd8639eac42222ec2c3319115623514230cce170e15f42c38ed9379afdc79fa013e0617bff523175e9b998161662b11110e34561086aa15c342cb8b01c60a3a81b958db7c3c6e096dd2680e8166461b345b10b3c43378a08695b333f05d112e8628c0c539a537988f6abaf9318dc8546dcbf4f3171560493a78576a813ebebbbe54125366be808ac6ecb3661798e8425abd03b40e20b91b5d6ac96371450284fe608455841c59bf128df181b3dc5a614305042fd6da6604bda7b8dd490d76614b67de934fef02cc330dab7567abd13229e6b24fe4ce708715cecd535a544e18095922b60f52911adf7f8dfbbdc917f3dc3f4b4fb410b7ba893845208a68cbd4f53e204f53fbfe3d28c152c0eac2b965c9614c3fa2f772483317aac02596ed2758d2ba381df2d06b348d28b3291b1eef202ab619b3461a8a591583403a82caebdf617309efc8646734353c68da644aec5f24f582bb5dd5ed9793e596191f531d635f7a114f27426d2cb78aa4a2e279ad0d81d44190fb0ffa5ea1769dea38e5e8b8fdbfed4e7e88e0d320113e3d7cab0a6485493e3790a80162680a5225153cce7efdf7ec3f1f7931d734887bbd01af4a0a30609aac1e3f3ea00983602733411e3e093ecf6a6423e6cdd1d33bccc01c8e6ca4b199302887dd720c6184353e68ef1d4f982dacf9d41a9f355cbdb425258af60a9fc7bc6082771222e33a643745290c2c15d8f753d1b2c41aa427c1a21f894f50b14218fccbad07335f27f2cad8c97eb7b6a89baf98fe743655ca60afef4855500a50eac84a07b46af0cac2d4f07a1abc84a556990b16fb7158f9cbe7d231b943926d31038838868c74e32b7739cc66e04bc939ee5c1dd9d37149a4bd7cfe925945eb47a50ebd3a876156a136ffcd291dbf69b9485b1886103878a36b6964139e81daf6077c649b944d451a0f2874c10ba77b1c2f0b45f76bc7a96bb3242906c17470e3ba8a2a8f5606387cba0c8b1db8a965843d4b7b165e86f9ec813ffedcd96f1c71ed0e27bc3cf0687ac8e28a1fc138ac5c6de3c0c1a48a632ad77c9f2bf4316f39d75e68d64e456a404b72b00d524244a419d2f4679086025b4cdcfb1b3c25d31aeb756f99723ea312564c477fcbee2ac9e6a4a439938b9e6733c2aec02b29e4297ee2cdd8b8d14488071e8984003084e5964b30d1fa7f714cda88ca4e3b225bb2a60b84d8b9ea2f91553bb3d87ecd976afd4d1dcb5036f4825e424e4b2dd242943698024154291e1c7e7c0af8f0ec74276b43f84e7ecaa4310d40644016c30eeb8c848224cf4a72e59d98047cbb3fa10cde5e8837f10732f029e995a0f61cf3c1a824d899bb7324d18ec52fd105ab1b8ad70f1cacf7960454feb5699fa02bc229e8ca9dbda2d3f7dae15abd796ea9258e8c8e251983cb5b3b5f6571d1b5de1f87f7f5cedc043de839e01728a54dbf7edef0df0901fbf7fdce5ba5f1d10247d5a617ea76dfe2ea5de6afb569249e538f90cc6a867c66397e355aefaded4a66c871dab62194afd38ce3f1d3feb42da3c552779f1af78ea874e4a22b26032d4c2fa43cdd40b89a28aeec32b4205a9fac5a9ca46312272c30cd46f71a1298884d5ba7fcac6230c2a538d5a2c2f667766968b0bc51413a8b6b0ae3f1fb1764079cc73c410794170ff22f98b18aa681824696d311ce4c7748892832bd6faf833314666d4397752200f7921798992e8bbf598974afe3ae2e29b299b4bdd4a07a2818ec96893b0c515a4a097f9d529046ace8eb15dfbb4d0aed8853be8a8757dc3c3523a0564cf229542b598f628106645013139f0f865e41eea599a7f6b8f1acaf2cb6c1503b40115d95cfa199125724954f22a4316b5b44cb7f9785c09d97ee35c6514db7d555a5a4a737088804463a38a967c45fed94f3bfaa9f45e5ad2cf85516778e47844903143cd6d6dbb723c70362fd3d5007cb06979fd944802c57a794e1f6334626649d5d7376ddd9068fd780d02055b9517eab197036461347e9ca54b3ae0fd877a31ce76f1f4ce076e5affa1f1f484638ece5d7534db9cce4b2bd6e00100d42a73f6c6ae7f1f2c62ef0c3fa12ee3a5cf50c66fe7ff666c95364fe1dc85371c407bffc0f86666273e3a9e7981f649bfe543d088baccf5741f4a614b173939a2955da39bfbfd0fda5b8382968fe7b1237604b1774d9c939d7f439cf67183069c2e37b347968539d55952a2286078dbc29856b2d2ed58074fb6a49884af20c86de059f10ca565ea13c061967d489499625feeddee8aa31ad81f5f31621fda4913fd5e1032931583e1ebcbe596f7624d39d9af5c9ee971b4bff7e3e89a7928ead82be63e041980ce3d86ddafd0c7e44b293f2a960f47ff8d3957c72db7635146a18203ba26d57809ef6f5b613e9619e8af65e1080b4f539e18f4b210d999fafd784a6db6e99b4c0945691328f815a038d128ded895da0f9262484fa23d96d6ce9557ef36092c9a92da440b1834357af3e16074b80e65ce8872ddef464135429d7ff7c231ec72ee7020d833a79ac1e364614ece1655c1c296ebb93910c100aacdd9b8a509fe80cd602850373435a8b3195e103de68ded94b05df99fa3a533ecccbeb61d4c92a6b2e64c83b3d76181f8c3b6d0128de28e94251c707764848d9fc1653372d39386fc816c79f9f2939f0aa5d06de2db11ff339a46d847281e8f374fb6a7f224c587836928fd31981cb325c30663f4ffdc6ff159dc7d17ef1af5a53268ae1d7ccc02aa0eab31de3d89c923f6621cb8c4b2c0f3e7d398257eae3279d2399971453481de26cdda2145a001abc166d4c1e0d1399bba80e8ec7ed8c0d158efbefe7b2d37ce1f7f8ec71dc8f8bf514ffffd3bea3402195886d34212396228c136682ab22b907e644ddda242af485213260ee0510967ee841271e78651853c6bd95c18d05a39083b2810ff886a86f3c42ebb3b5d162963ac3f188db3f4aa185e1e569c722c48e85b14ec5350430492d5c2a49d1b59e2213cb43be6a3fca3f4fd6b6ba1487af47629a99f746290975086b6a69cc6d2d50cd6ac3f873d5cee1f801376424a2fecc62dea98cfcd4ab8fd666d671ab5c08586184355f22e6446f6b81bc5b4aff57415f8b6b3ee869c2610adf3ced218973bef486bbf02748d810d2a3e492a5e1ef0c3afe6705305708986d5ff499aee33db4fe480ad0d68dd63b4509b52188f3e84624663b9390f28b2fdfae686a4d70512b71c61bb2f85954107248a7278544f871ab3321a4707a40b45d2fc66253f8e1e91ac5a630370f27036da7984f47895e4e15ffa42bdc77c7cb1727313c79dc9e921f396fca6f8ec15669c8b182868821fd47954fae16f9050737bc9bf3d7d004520cc5ef7d99a4ed2683fee9629044c8cdddae06105e2aa5942e233a7c2e0065fcd187cddf3663b9bb37bd3e3d72c2c1335698833602014263d59f89fab7b52192fd406151baef88383ff55fe9524c35180a450fca1dc9022036b8642386b8b717056267b9b5c678f662fb57b88cab15e98bfb71a84f1c82d8f8b4a94f03d8e98c077db9a9fc0bf6b5378f838022d8b5c5c2e21ec3289d84ef15166393bfedc03cce0bd0f275b4a397eaf69e8575d307c21cf24b7593c9067c1bf0b65bedb612b720766280983f7ccaa6c048b345dbeaf07d5a409ec05eeed6edf5d717de30fbcae01809aa8df3ca17c49c902ba8b99918b3a378f7a427288db06e94afc8f101819e88843135b7194516815fa4e759ab7b7b25aae34a37d6d91b2317329155ec8a56dd2d80de2774948371a15787c4089a9bc6a2fe05d007821bdc98edd1594c17ba406246b59d3d5f8d895a0f08c15d1174bcd375aec30b2e9ff2e6d82761a114e0e266ebb248ae6b495a97fcef5eb69ef246e2032e903ccfdf1d8fcfa49735d50b4053f1ceccc9b6c4e69aea32be17322c9c433cb1840e1c32d0173426aa034245d02246b10b921d511e9eaf5fcc753df99bd3fcc16f184a73c27e325dbb18eb9e31fbb3d9ac2aa68881066b8e1ba354eef02c40d67ea843ffcc5c7d9d29a1e17b9a4b567280c29b298bb110869e95de694e8cd598821e1219dfee1d92973e4232715486d079d24ed3e1084744986b78e2c8dfd980785ae5db485c3db903361eb8f589b29f0b4b16989c2e998e746d7ed3ae7c2df3b403019e02f40432eba4b87086ecb592c0f17ae8d8524d5c30ff5f3e8b50cde3313ae5f5d444e678fd54c0a6e34803859641cb197b99ae4c3c367cdafed7116fe253c5975485bf292ca3da9d15599fd8ef2081188363f7bb6953ba6e865280a8b3998debcf0c283b08fe0c803806aea2ca5bd18b033f10210dae46337d818e0285cc61784a97e2c19c1faa8b7bde2a1e356ba37569e3aabc7e31d1d3237cd347af0da9733ca04513c4bded70a992f89258bb1eaf273d37ecf30476a55526e18e6bc5fae00d2e7fdad47e812a36d81a858bd5fcbe06b33300ce30721d02491cb6fa4b7777bb53b80ad148833fe4c169a478a6250f716284710917f0ec318fb0367d4f02f7523fa3e3a896bf85754b1068b16dfa35fca3c1d6b524eb4648919edd3d4075399aa343ba9991bd7b449b9a9221d765f78487087ff8212cb8496dbb6b82d695f95acedf517df04b17f1d136d77f7e41fdc9f7ae83e9ab3e9a1def2b9f2046c60164afdba7ae0d96d7a1e76157370767d9893ce510847506a3e47756243e8f7d96d66916cc5956c2d80908b1d4e5c40def334774221596e66a1089001517c14abc89544ce8fe3ec901711d34ce5a2f9764d3aa908aa323875e12264c824217b1e90b5eac250db846cfd87100c0d3957bc0ce59ede892efe9aed6ab11f533c8a011cc556226ba8934fbad0a677c1dde192bad956fc271f22f2f575e4e21d1b9f88b4cc02d3b227763d5afde5cbf03d8529bbbf01536e305630fd7b144946f4a5d804812049320585501f4183d4971e0eac321d3e56e0ade2c7de4153b568f9875387ce9dd0c23f9b828a827aa3573b5b6a807af59c6f617b14ab0852424c7d44df437cac3fbc61c5296d956a6f44ebadae4d0f4a4c58849c769c73fa765ccbaf536190554580f6047366509d9c2de8cf8d1ffdf1d49ff82cfc96b4a4621d7317cb8a563d7eef8abb52684043497b2ca935f2e346723bccdddc490e7583510015e3109f01c8988cc1e690fb2c92bb15e1c465eb652500bf2a082c676ba8017e6de92de21aa40a9987f29419ed2002e6864a762342262b7eed89946d89f7d8b9eaabf4fbf18d60b9e010597af9b09fb7c05db00a666955ff4530cca7683d39822679c70a2d4442d7e50a7644b80f6b6ce86d7ede1b9bf73c4a4bd64e3441a714a9a831a312848f4594b5dfcdd6697e1b1fce420779ed6418bf292d370ab22a70fbe62b071fbfb47748e2b79cddf3e8f6c3f063596a58812551f3e7828dbeaafc5b982bfd1282492447d300447abb5c98a80506d5240be9c73de354d07751028b5faf85cc5e6c3aabeafa09af1c72871d09fb39ac7e8aa8f2272aeb7e686bd1babbcbf43a613361a4d07fcc28c69f0a4bbb56ff13362fae9a70852c7af38f78402d207a0fb3549c5ee4306595615b24316fcbf4c746edfa4fff9397d0bf93a96dc21a5ffdf3e9074043826831be7f64b1a5b825bedcb4e94844d824d1d2a1fd5e82ff0f5bf58849fb9097a0f38894bc2d372fde4dbdd8772a6df44cdff16d1f41f2421ea3f71cf3237d70b0fe5f19bdf25ab199776ad1d0a461edfe2e3dda04d22b7c7c7d0df501815bc285dff85a0c3d127844ab7f34ea3df4e1252542f99eb2b6f286d58a18e52805bfd6351db4c32c2044af26470b7266bf842efd9d1b11d33ef23b7d85d13a6e946574730239b265897e3acbdea69897e686dd096cc7c47b58659a837957e9582de3cf374829f8bb682d22c5226cf74161886bb9f16c7f5d396cbd9db2432b2c5728683d0da16e2634b2f6ffddd4f368c9538745c98e4c01a30e98b9a1fb1122df9a88086ab6879c946057dd192bfcd58cd94d6d377579a6648d88247e975917f03ffa36913eae85e4dff714683e36c84d0b7d576e010ecb99e3312e51686fe4e17652143da9cb1b07a12c8aa62f68301894340c077e45410792289f60dea8bcad76ebb5d87d9d0d22df2bc7e1b555839504f8de4dfde7d197a516a740894e9a6f94fc3c1d909c56492d53eef374626c184168cd80046b6cc0bced519219cbf734f67e7953b21e277b6e3c095e2de7263bdc676ec1e7fb927f537a2a6a43ed5a03715948d5fa8e079b15bb8456dcd69d8af3d0bf2e053fd968925289887f8314bc83ab50c7fcb32a542278bcbe13b6f10d82e12501c49bbbc86db90a396f4606488e356cfe18a75516c66d83921acfedaf58182ba732da8c33d664c48e76e8be197a1ddb478282283954a0ef8b15a418acb4b57b1a86f6d76c3a2dec8cd0f42087bceb8735b6445cee31a35a3dfadb1f6c3e7ad4809ab552e459ff875597223b0745917c0beb93af9f2cb0b1501fcb070796c8bef1bba7623a518ed0edbb3e5be15aeb714e5bd8ac52a1beb35f4aca55f72f96fe8e29c84d0b8f850426ba695561daaa1dce6a5f7cbee1be8bc71dfa99a5417c63ed5941eb57ddce2910ba97acbdaa89f81c6ab9481fdda81e7247cc13471d1982c1aeefae3dc997fe4e101638bcf792cc53772b5c33911a3c20d995f485fb216c065e816747e39ad1b434fea30c33a11ff96cd827e7cc1f181f4b227040f9b7c1120e307e7b78fc415639a008c966b63f2e48654c5c1a502fe863ff4d3ba1b9e8fc97ca48eec5f5cb2a5f198f7e941ffb0af03f39cadee26dad68d09f7b18d573343f30736b742ca2d4a37fce063e3158843967d80a29b7937e09986fe74cb8b768bc8492dbf5a49ed9b2a6ec4ea40bb277fe1763c799c4ce03ffcac26f0948e7ee5549b41898c9fde9bba0ec962d268012a810781e5557ac2fd7cafb2dff3f7f6cbb970ecaa13c1941be83c02766df0547f322fdb259683320430344e16af2b63be91796506d9a1b10df4cc447efeff13e4e4abd5e3ed1f4eb1aa1c0cf74872ce389c5ab2091a652153e22feef0009e4a0ad84979a0af41442d3e2bb7766856649d8f08b9e6ea0506b91d2ae7fb59d47a29c2adb3733384467e28f27d2de1d1e56a266e2f40a167b590c40a2a271e1a9187dda972bef0e5e41f6471a385f19a0a91603fb399ecbbc46ccbb80a4fd97fa52d8f18217ae48e2bbad7ee7e588f8f5612edc7b4ac4ad93709e4d2cd62d5b0a7fa15ab1f1478c87b29beae59f8f3136f821b7b1fd83ca018b6a45af15c47baab3b3a3ce99922a9c29494c5497f94a3d41006f4e652ffdd5ff6972ba76ffb14e8bd6ad661e05edeadbfaae4ff30eb6c4a4c88901a8a028687c2ece8ef920e214f55b9bfb0bb1439c79777e3dce9d148fc8358f0a4cc2a44af22eeeddf52f1e11d73f0406a963f188d7c22bcb57fe5b336b7003fef7ac118abfcb58c42e00f7a0a56ca092a340511a5da17d6d6213ba826d98e759f556131b9d96d01a39522b55b3bb19ee9487136916b7682cb63d81771870c09fc8ff4a9282f8e33d2965e3e924f69a127c1f2d515fe68242d2ae7f075f93c5125aba6dccb3702ff87673daa8988b662efae3b2a3a66bab8f79862c1097fd033891b2763f61a82bcce7a4a3281b5cdd3a9c36ce42f5b4dd6cd5b4eeb473ab62432c0c749b533bc381e88b7abd272db16dd6aac82efc1f4e1790efca6e8d95b85ec5c096bd3016a49665f1242f575297ad523f9284b0959dbbdce796ccf0e0aed19f9f69a358dad54a2b8c66c930e83acd2f4f85fa2097ec34eef76a220e394f2d58c34c16f746dd38dabf9a46215bcfd3f2f31491ebd0d2694a96625555d4919cc2a549465907d8502168a303c2e6cb3d2940ec1fd155f34fae62f814b1d73babab08153e9f6ab70723de4c2d65202737111ce8720f1b9fd3ed1f4e6f1ad9beece6e4dfe1fdff48753897e290b8babce5e69d924e8f90a3b2e16358bee30ee8b4a7c44099e3ad58fd856670ba8098037d9bb5cfa665ae4f95e0065bb4675fcc1ef0b928917e3e25f2cfe49da88a96c14b3e654eff1580a6b73a6551c7bc5864312030e062ebb078e3ce522de2c4958b1547d8632c0d968df5b34bac2241d3872136f6c0ac14241ff5a24c6971744816abf21bd1e975278b416ed3fdff28f86b37c959daed86dcd0754e6ecec9cc1c076fdbcf19eac9d3c3b73051dec1b9c61718808128a874491944ed560922b7009910a1cb7a924dec15d33b11210a299d51e78f95bcc72056d3e125709b6e78b846c4c05a0c69a63581a795468590ef395fa07168f3b18ac7aa0611d5f221fbd393e3de5ac24b817cb4ad1ff43fc95bdce2590afa15fcea54be67b847c99087579c29e71369c6e65b4c48f08c7fc5d2c93ace44e227065215e44eaf77859c9f315a9c731d7d00a8498321b1f7c9a8af376b156ef4a22fc8d45f03f2f1d5f8b7d2d1753aa36f0c929782ea6061411485af0f9fbeb7d03fd8f4d46ca938d78030396e05a90ac5b5e7475d865f1dd5580cf3a6b6b6ec27738a51cf019840836274fc99a74097f66895283d2924e388cc806babc83e7e4e36b7a771f7a4cbdf78a7b0a71b97dc6e33b2039df675e1ce3c947756fd641fdfeed388159179f27a0b4654e3df888c44b427a7b61b33bdf27473e322909fde4f43c0ce6224d9351042ba0268abafe142e936ec10d5a62741615681af07b41d0af370dbfcda436f3fd2923da9e88c2e27086c0cf96b146f365957cd2b42e548329b1e1edfce02463b97bf043fbfe194e5f18d19eb223eeaf9913f0408a106ba0d05214d5320423a97bd2fe76000107b76838d06a06ccdfc5c603ee18c6e77a0eb2b4981f7298ca335da3d71134e065907f585b4350900f3fd6ed1947a026c3e9cca1812ba05dbf9acc1b104a9ba84e2651851436641bbd72b5b4ec761c45ec187049c448f6763858e8fe14dbbca49060772fdf8e820c01477bbe82588a49e2cffe55caa566b068e7c3bc8976c70e6e2858990141be07f363ed49a8d669676199e5af20318485560d41953d6b1ed4b6dafdbc4a1177d76df483defdec1f2bfb44e9285302aa11d22b7fffd66f53a30f4a114a82b18061c98ce6c33ef87920d5fd7bdc0db6a4c1cb1e952fa0a48be027dff1fd6108effd22e9c3b688f15094511421a29856f36698cf4e007f9a83fe6bb496092fd047b017967c80c6ff27c67ee2072a7738a73e1359af68b011526077e7cc48aad8c00a36678bb7c0162b287d40c211a3968784c03ae0b04016e39965bda1a4bacd0017f858144168affa6521f4d09b51784e91756c94725e060549aa835f8703d283d9b325b3a3f85314f40695f79fd467097951926a647d02ba62c994443c37e68a8d9eb7802bacda99175aa91a64e3bfefba6217dfebde9f314a67dd0cd1333a29f493e43b3d3007ec86e5dc12ab1ee129b67504ab2a0830a66a7091d8bc05378411bf5adc05d6de4a4cd44adaf8d37442f7cc5684ff0d5c2ee63d225928d0d310cac3c2bc64863951ebc9aa603d167c93c1b85e462f61d75a5483348f6ab5ecb01c529a81d60f2fe59f19624bde543616e6d3ab7e11a125dade6eba2bfbe5fe670fa7a16163da1c7e198c85558cbc3bf643b674f8a955af0abbba27702acf0c6fb4f5dc3f64dee4a85770827b3a4013fa1ed19bea525e7fe1b7a125a449b00b4996b2cf57099a7a404f13ee2c406fdd822bf18e67bb8ab0bf5d98e802f738ce8439ca7ec49d0b1d58a92a4bb6b58b2cb37b641d99fceb03dc2ff6ed8783e82751e0edaae1269677306bc2963b84a72223b3f26d4e2ac406a8480947480068306f273807e9d7a456408193f7cbe9cf878c59abb6d7662b507918ffefbfee6b69279ec3d9469088a4651030092b26f37c5a4e3af219076dc33dc72924a78c4e4b325be030bbaf69a9b1ac84678388d529547670eb2f210611cfe38556731a18721f69f6055e8b2c8321dbf7f3f5ea1593c3553cf2bd562de358cba67a4336c79e7566ee31501e65456302f989da6ad2b6a0b5f2fd524302ce2490bd0ae3da9dd3e2f438b7e50d786a56ef9dbcf1fdccbbf9d46c4594d19fc0e626a86bedf97573f2992e0ed474304bf9f4596c29c0cc905965ac06e5fdcde0036f843098fd64603aa6f231996e40452381486d9990893c55b50c13753443942c0d27f99aac159af3e1ddfd3fe07b922324ffe724939e48bdb8bde16d252e21131a90d4ec095280b9c4053c80b96a12d3a9eee850e376c40613c44db9efdf2d86bcfa755bc13f6b5823c41f8c3eb7ba36b7b6b4a93e712ca6fa54b7aacf94d3b28def6def57946df37aea9af22211cb64c19032fac687d95ea4b7e279d86e94b330e48b859028786f697f44fbdda3bbdd2b22935750acfd2a3b4318ed36f6b7da203e117387170204b124e1bc4c890743c70b9ff0ee7e9c479634dc119bacc004cfd20a7ea1f3c0da5fae09f07d0524e2b7275ba3e84503cc0593d6e0c2b6b5680d8639b76886497a479f39e6578ffffa5786bd005ad3fc9cfc493b1701122caff3343565680b80c4c3af9c15c1c319695bda1d906de43b297d5b55a383c28aa979dc8ffdd037c0d44fdbba1796fe43dc844e50475be902675fed6710c1ad65c8df66aa60d36efe67d987501899658b0d2aa63fb94bb8bd17e3e573468081f273e2b921e27fa7b4099deb2633508836d93ba9aa23774f080f3011aebe28ede293ac13cdd7586e02cc77877add935f75dd820c2056ff8e232b994d02ee0cbef33c1823c73df63dc22e07fd964b28a581a647fa5100af38024836c2ec5745836a3f598f173f1d8a8f94b3576aa7ee8a5758c28f15cd78ee5d19e66b209fd2d42910a4183b18dba490513f2813aeec55ec91b00316ed4dcde58c6c5fba553661f5be739ff04df8ba298ce980ce40f42770c32936a8a1fb42c4dc2984976edb6357aab83f365275f979fe7069f747c78dffb21d26a4ba82fbdfd0882bb3cf420235e245fb7e5ff08b0174b2ae465ed4fd7c9d97998aa955d2b3c16d17867287ea85ecad97072bc92aef3157a51a878c18d9314214407c3a6725d0649d59310be97e9edd83d7bc7bb168b5444fc827089c34437658a027bd5dfd65c3c52ce8bedfb6776f945528762be4464633aa0b0cfb39a7deb807a084be991e9bbb6ba4f3d354d04ec0d779c55b089a08c652cafe4fae4610ab6586f399e4460e6260e03cc28dbc9a5bab22942a5580dd5fe2f1c706df6ea9637304513e0a1e72aaa970148abcbde19e4c564789c7a22bcbca6f05835063bc6b59f0c8a054c77b0aaac7e7cd53ac4933897acd0dd5d8f97694b491bf17d6687c6f7ee0e0f91f517253a204434b183406c11b6cf6520e84f26bca26e73713a640893e40ddd6cb36f2006f8f339d40619446a7329dfa3ef1738f9cdc64d5a131e79a9f9f7017c2d556e18cb1ff6985371fd1f0e382d13a325071bd5bf2b4eadcba6551b8e217716f820c85b038014cd58165a9e6476b29528f6f3d3a7cee2c3c3614f53cb650dd5603ef7243878cffecd08e2d59f42faa701d5e03db20c68ebab42165a984589106c7ac43a982a7289a0ec1829ca056d5741bfc25b7aeed0fdb5592e3ddcc55b42cc489973ec15ca2903115cececad7d55888664e8db43d29258ac3c87dc87b9603cf1fe5cab87815dd544311cf8208136a8a4cb7b03d1fd958857942032acbc1edfc84f41730d5b8f8c136739fcf2f4f6c7cd5d81f2e54c989d0efd274c6ce0d637ce2f3d79a35444c2f6dcdd3dd415826afa77a5797bffce2299a9eb8b761d1513722ade38301f9508f09b14e891052273e46503d4a57c9b7ed5fb097b5ea2895580cd2a07807853b947ccd4f7c0fb72e88ad07d55a8b4b9483e398e3db543e2e519a2f6d6546fa5e5bf7713e1489bd3a92599d86e7b5bf7641ef0798cff352961acbf790f45297cd51b970ebc1140416411be3a52cea7b59c5f103e76583becba8d8e462b87945c5f74efb11d2750a03482204023d5075aa3591a4566a8e66c6214fc5d11cf14a472f257d70e23cb0e7db764b2b6fe0ea09434447d62c1ebff8ff7c84fdd93a988549ebbdb52f3306d5e6218baae18973a54344046a0cec1423588f526e7c532b6a5a224371e37733a2b917699e5c85a96698aa10b3d48ab17619cf88aab42b3cd6416f5fe5add9a04ccdf866e8a0deace2f2cbf6214ee7470d15d367253e933c273e523874a08c0fc98648237cac1798bf1070a2fd58401387d46da7c46990b99a50b0a73c01f01894e4cbabda87af3eaecf18ab1d82cc3a659c22c292a4bd53450cef02b930efa099a2fc299fc6e852b5fa17e01af9fbee739cd064554462328c2c4b0cf2edbffa9b5c91b62c09f75f68ff2ccaa1079147180064791de882fc41f8e2252a229f8e1f053363af07c8ea53f8ba08ef5c0fb2444389c0c397e9b10d33b6d937957924b57adb5321d69978c0092d10fb31d8441c07ceb49424b193627548d501f5cdf1402a24d085e17441f222c86ec121dc01e777cf1e0aa2715fea2e8f803554a84e2c3b417a3057740fc31d6ff4607332155ca508f4f0c7d4e8a8b01446d4177877e6145cc1e06f8d9f19865e766e3a9c82b3cf70b5827c9f834123d08581a4a5df8e0aa8d79a192466743f1cb8f945e5b46da8a9475e1eb6c3a5b9f82c0904f799ea6a585bb865f23d17f4e209e95b71668e2d2bc6c85dc82d469fdc67c9a97b2dc8f35304c39cd68216122c3f344eaabbead7a0ce49cb3effe1f552ee640d5684dece408858e46</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年度个人规划</title>
    <url>/2021/04/12/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="11d22c8e668a7960aac068e992d0c573bda19b1f3e9a87f79cbe17223999c8dc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>20210125 职业发展理想规划</title>
    <url>/2021/09/16/%E7%94%9F%E6%B4%BB/20210125-%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E7%90%86%E6%83%B3%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f98378a22037c12aab283ea6edaef59203b6249e03bd8966ba2cda19a0c79fd5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>20220817 200天假期规划</title>
    <url>/2023/05/21/%E7%94%9F%E6%B4%BB/20220817-200%E5%A4%A9%E5%81%87%E6%9C%9F%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2bd977c1fc484c20df1fc04d472c5e6e47838b16fe20eea0ea19cdd4276e54fe"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>2024工作项目计划</title>
    <url>/2025/03/24/%E7%94%9F%E6%B4%BB/2024%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9bd993088c2e660bae255e613e73f8fdbdc52619d2edd7b0621d942dfebf9fa6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>2025工作项目计划</title>
    <url>/2025/03/24/%E7%94%9F%E6%B4%BB/2025%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b4e6b54b1bac7ea82d50a3d63cad51496af1fd41279302d40a95b90f54ee6e54">81ab6ea7c293cfe0228b9964741db51e7e90ce60989977d86cf7756fae095cb1d37443f8d37b8ff9b12e7cfc6effa7145c4e1c6ca60ea6246ebbf76a505c429d0d7c0c8470e74718c50eadd7b6e45830a43b17e6c003faecaab7eacd30219772036d78253d751136c293a82a0ea785949fb7fc1d8f427f69d59eaf19c63382f113dadb239c1c75f2bc7e5e6dc5ad8602d7858f9f4890a32123754d7176849b0a391785c7d398b2bcb9791d1e4850961fe84d9a6b264ab7deccf8f30270f42450fcb1930115416646224ae5c04820faa6b5359ca4f9d644098acb30fa71220b1ad4afeecd1c6f3202f192447bb037703cc7f3d0c5bce69549dcd8f3d9056f289f33b245b2a271a80569c9481432e0e8af101e151c2a58d9201cfaef16680d8ad52213ec18b67c31a6475c652500c985aed98c60995719861a2bb8c2d6e897458c5a25f319554cabbeb39a3fe6be6f92ce683dc4e952116491656cd88ef66ff7e59ef82ec5709dd676b7ae7a592de515f5a7e1bddea79cc67a2e6136bf6a139af3dba2f713a9cc400c84379ba55f64d97889a99ac5b19f7239910490ab6a4ce614f2500aff497d7a1609e66f7bafa42bd7e09f78ee201b9ebcb59d93938a87113c640662c49e5f8769a01d799195d476d67e98895a7ea19a6c2963975fedc83f14121fc5108dca90cf3872498a74faaf07350cc104b9c0ee43c55627070a9464d56e176771805cf9a2f369ca06792af8e10601c6a11a5dc77e7adf81a06c420d277d9db4f6bab0f05fecdda8b0a5e2a079077b992c90fb3b07eb1155da51b2cd1f9d36c81b4878ea38c6021fcc2afa87dc9df7bd8f9b54cd00b39cc7ad710c4f573bc97c263cb65d09f6e47318ed2d2ac28a7657896addb20d24440dabc9cd1c4c51abe43130b9da0391bc849b23c688ab5b609ea6632ef04421cfd86f2aed8f3476f6a69dcdfb1ffe63778f947140d15f016607ca65957925cfc2b475d7262fa97b868f1d45669420a7d390e98e9f229e422e1e4e41ee8af84bc6bbdb5a202f3d407eda23498d372c16ece060d3fac424928d0246886ac6dd731cbee1767c0b1fa53177df833663f2c9e67362d6a85d4883879336454bc8f84f38f8e249167466e78660f6fd5d36961abfb29c769158dca581400115c01484da1a409961b25d34bf874916ac199ab83867a81012b864e3801b4c6ab7830251efd0690b4b568c410e49f71c10118c82f968b6600cfac2c34efdfa2a35cd3030b428f2cf65059fdfcf31cf84a42a1ef35547a27c5b8ece27cfbd83f25fd61da72ed783f703989c682122322df31c591d413f30f776160a85b40fea9c88ae782e52a72a149fe43c239a29f92427a1113db86c9bd2fa52e068a271272036941ee6ec9249c7eb4eb9a86470ef53bdf08f60db49c78625c6dbbaf384e677068685256dc2204ede4abf445d25866acfe9dd94a90344e6a8b941c4c3c16f32cfc9af3349003714109d4bd9d6bc5b629f45f88428030f95e407297554e2abba76028a123c05b27efd60abb751561d2386ea3d6407ca521d7b83c50ce52a4a4b9e2a96e8d8c90d6c0b4017e56a5178036ab985cda1c19314de1c20ea6055a7ec84c35484de72b706364f1da44e1ea8b98dcdc154203b01526ea11a0a923cad26690e9e50b8ffa474e2d9f19b31dc2d6bcb7cadc0dd7ab6779018c7b80d351e055e7af901743fc3caa8229d52290e2bb15b7f4a1e159b83223ab73ae7388c90681037c389cefd616620356145633641ec94806c3a9488b4385e205370a729ee13494980ca15ff66c069b8fc9a0e66422a76f18f1caade5b959b83c4585e9931de20b651d18a64b84717e9a96b75b5c41bd0e6ee697e9e5435fd6bad85e44dce368860a33dc8d193c9d7850789df0ae171d480fab962aa9497ca8f64d064bcfde7ab82ff22ca1bac1a1c7bd88eacec3abff4bea619473b8a20ea4a8f56091295111b82f3301d79b99ec0cddad90f173de4076349ce0cacdae734335d6e1e829346e5ebfda2d94ab38eb0678f4eb493830ad957fe09316f49153f532e5bde1f6437b7ae68eabb775335c25201f69cb36789fc942b9b90adc67fe39544c9e575f4471e78a9fae2c67060d2c832be115a4ac3a5d1b9666a02cfc01f138b1a4fbcb6990a41ac7bed1cf936a3684e09a9338ba23c822fd189c5e6dd545330d812874b0419d4db7744edbb32e191bc84dd9bdb0a3c53bcef6ee2e25a667a83d2ac51fb5320da1dced3326a90d47d9fac52c501da4c0f3c71f70215e9e4e8a762d751c67e655382851f23db7f46639c61dc63697c502786cabadde952d40322936693f8d9fae2c790ab749a51175dd6af8fcb3db3f79eaeb18188d3db3de3fea43165f4730371a72284b68a0c0dfa0382af007915c3f3bb3a118264f36ed3cf948be6b405f20931011b126bce91492680f9ce491566135ee06bea52a46a63b9a7d64b8c7741e4e5e1782bdad0247ab3c27ef7f5d2ad9f0e48d8c0265eeec930887f7a8b4e42eceba27d45867abc966fcc078f96909f40c16c27cd23cfc9f101c74753fadbeb81c979570b51182daa6ab38eec1bc10c6b819b3af20c128bbc975f0cc9f50cd63db02b08bbc7676fcd4e17f85cb3bb6e39c163a710f6a577672d659d895a87ee27574dd230c8a0559ac7ef0297ee5a4754944e6f92ab2eb15d66b2cf123c35d25320122f98bfc96ab0835fb301e62a0dbda761a00a41790931fa4ee4745b3018239bd1eabc90a275b2b2a2376f8e01db6645db5e1cda10299983b4bbab28120ad848446e00de59a9f90acf431f48954b86d80a7f25cb8b2d844f5d18daa3140bf5a8f0988aeb83d74be83104dc5d8d92bfae309d7aea84e48d0ce46794cdc7f21cfeca06698f3ad88f27d9155054cb6820b16635b989c82177aaa5ef1276954d9ca17ecd081a332fc84ddb1cd0d8d17452fbcc7516d34d7543968aa5762ecd128eb46f44c8d498ed63ea930bd764cd50492d0a653fd591ac1bd31f50dc68f93262c0092e37b6b6b147de6d8d53a0d49cbb6470186db42cb9524572c9dce2af6f0c37ef170deea3e574aedb45948f78326bf9af90ace16e1f0d88583e11e15c6279c7131f9a671331f42b1d204bc70a6de86d2ac9b87a1a7faa3e2568215c46b8880f4a2ccb5bf29919576f888687acfa382ee5980174451fa64c7f5e1e2fb07085646dc86000e147433f6870f43546d62225bcd998966defc31904e3be9a129313c67fef186cbbb935e5d806cb990ef20f9c6ef91c57b948cb371e6a15fb74ef778af34c7dc54878b74642b3d054e8fda13b6512ef411496f30ff09476f7a66862f5f4f41a825e2b88694ed1932c341e87b40ae5590fbb068e838f4bbf75f42380e05a37a6e4a2405f05fa0ed68bb849038216269f0cafd6cdde7ebd2ebc00bfb6b80429b6a5f5380c14ee25f8e215fd97e77800c7a96e3727581471a4e208f010d011fcc2e3463712571e8a17721c90ab79ad6a3604e9988f2e3c7b6b0169ba460d44ec6221a055b40cac4833d70a6502e3fd6c48c1bc4731252f4f10ecad296b427fb25d6134b59470fc1805792b04b15ba70500e644d87a8cac4d890bba6f6aaa255033eceafc0680fe3c2422e06e51cc3619d9c1bb42e9abed0a7b01d071d894b137340e4420dcfde568aec9db8fb69a617e60bf64ee7049d2803ef815ba07e6a430e110bda8ef9b1463d8b11fde202aadada3c2001ecf4dd7b6956276dcf5d9a004a4450dee930f0c3ae84615fd24927a7f934adb3b86a407a1a9c5e7318ffa0ecb4aa79007fe30d44718864b6e2daf8cb3dc28b97d8ac5804613152cc7b26d7527e1d00f59759eb13ba1e29cd1ec85590df336f1f69542ce0077de434dbd8dfb9ccdac6b4b3f813211b38939c63ddb1e00d63c7107dadeadc5142126e007681401da53eafa9bd86022dc193b96214a7655504814b1683ea312222ecbcb44e009e47efcfe68bdc1211948992de2a1f02c05f8a8926c38da48d01ea1ae229e44f0c1a767f5751050eb9b2dd1a44e61707a9c357688638089d54e2efb67a05f9f3344902eafb482015c3a30ca245816dcd562138ad8cd68a0f36a117b70eb3eefa3edd3dc10bf08f4c23e75b137903e64bfe8e2578643595a76ac00232ca0083d13b3ce75a23a918893108250a222711c3d3aa3b17ada25d852f8dd6faa64beae981f9112cbeb3a7867d6eea2bb23810b9d41a97acc24c0fa9dd8e773a802ee11f30a2f9cbd41cd3d950e145faea925e34f3a46e2458c36ca4b1611fedcff29265331e2876d1c12ce110cb2112a1a7fd63d67041ede67e8ba1f339065fbbe2d6f7d92844dd3920325317a35a0dd00b354c4cefd5b294d0725e19a1ceaa51f5b41233261ce86d50e2a3166626be2e9cf60461af9084a1a604e6250c25be216dd0714a7585de6ca9ae942fc9efdc4a6fdd28672cf32ff9ca2743da26b392227bbc56f7a098930d5107a8c2039fa7e243ebe05482781ed13300b359d559a14f8a877d44880e1487d05adb6a6997b86fbf3f5a8d7bf9aa689ef52dc99f5d37a8a11c9fafa5a02e8de725a4bf887026c35f6ec2838cd7743407190927454a7f4090fcdaeafa9f474321f21e8294064555989e21d81ca90a969d882afa39631f45ebf719986d018bf016512014fd125ffbdea64d7b11b7577acad2b076776259cf5bf188df2f166a7b56a4e8491239c3024c38dae6b29d62acddff577248b072b2392d3f44abc78840bd54da0f5542cee62e0d5d82a160848c71c41565083cd3502a7cd006428ff74298e976a7737d4b324675caf42c563623366f87a2b58d89933750aae68b04ec7caff430dfebd621ac825510db62f173dbd3796a45dde849b7b0a38644eb6f2d33b40240cf1f7b1bb737d729726e9e0d20209f872f98dcd500c1396ef6b6ed585d598afcb4b6224b4cc9f9e3f120e690a40e0581c4bd4fb2bbe4837a7cd7f11746c2ca634c8bbbf135a099e3a7ad81bfd8e0b421c64930512d16454bd22f7028d63eb04e7373eb0aea4cb26386ba119e4d368f6b13ed7150ef163eac97bad08e53c75516999226b41d63250d8679357b4359ba0f6ac1ce77fda9c9bda2f2005e764f98352e77410d56ce0d37d23b65e821be759da5605d10add3b014d083cde139cea212c5ff2b5029672540e2a545d0be97c6723e45b2c3b0c36005e2c850da5454d8ea2880f2fa0c0158f4bcd77634799225cf440aa83ca25b798d2e1c4843dec684f14f37b84a644601b28811ce7de98daa9d8e8e2305ea9ab0e9b49f9054b31d6b324504fe8c37695ed28b6c92954c1d5401058bd9203354ff56e7ff6f24a1930480621c7e5d78853679fda1c9629e0326aca64096d2ca439dec759ec2ed2f84455f478c831b93cc6e96025bcc35683d9ac11f273f03da2002c71625c22f0d0971f364d4e74ab180a0839e23f366d7b7d6246875db7190bd3583236d1f5ec26b4c95667243defc03980fa3e64cb1a9fc664815ec5879ca576bbaada44b4a0a47f95ddd614b45a23b003c4b4fc8d2cdd336887cb1f65a76d65caad7d0b3b7da1a902cf963cf6250d7bca33891ef5dd56b6d7beab6efa2879f9a51dbe0014552c565cf6334d49a61e511ffff997cd851bdc3b736dbe67b9f7a541d0b0d44fb96afa9cf780665152f5c7e94914ac056e55b0b86cd9265b108d5d911f32da1bc22763fe50e20247f5151073bfba735f5cf32117359400fbb0b29979f05ccbf441f70ee0eab182ec75a1520247213d72514af9f6a83cd53b90385f33645c90b419e9c6d0ee1dc8befd5244c9d2bec0f18378698797139165748a212a41309053281f3796cdfc2f0c41d0893aa95d1532775f533eb92b64198ef7a3ee52a3582a9580d8ca4c3d99743db303fa7e6370e65b66d25dd3c08051ea7e557146e4eec1f8a5ff9ce94a94a08ff4a7f03fab705bd7c50754b23554f1ea567b5c7c9ea240dd0d132f0fa921a8f25072f56565e9317c316d979f1f524bc5620795ae7a66df84d113a093f21c3078507cbaf956ac7121fae1211d9baf9c5ac7bfeb08144f198c2172557620bb92f29f451f088f97beb238d27cecd63d5b48315c7a3c9ee90415c017384368a43af3960507a9e5bcec94a1fac4a62c49022970c7ca2f2fd61fa4d34e3a801501b5180a8bbb0b0873573aa2390c5e9282f7ae2a3ad8e288ac231ce19810656814aba0f06671ae98af867036a99599493c212780a4d39d34188c349923bbd55602f409a89c9b37bdc9bee8c785081db18c57d5033098499f337105c2600ba9a3a39ccfcbbd5f6a03a040e8fbfa5d91195b41edb79c367b4da6052c1e56abdfe2dc39a457feb1bd60fd95cca1553dc3bdf28e588e7675f21aad00c83e74bf5c96d8349d279894e97aea6a4e011ae33327d4d6f690cfc671f3759cfa6e98f838795f4db5d6b28d46a692ca2555ffec1c5bc3f5e1d97a4ad6fd9685b45ee07bf7c0c1c6812b0632dc8fdabb326c3e6356f374f829a248a150ac35cc65f103054e502d7d9345439e211b8740940798e117b6c59ac7ca73dc2a13d07746ab1165741d0668c464439e0d75286ae79f4aee7f88fbe002186305b305fa5a2c255d48d29f1c843177a7a7981f58ce3fbad640bccad775b0577babb2e47b9f8cf468a4cae3661515b24f63fce962992721655cbd571fbe5281fbafd934d1f3404c592876bb24578a270ec37a693c69e872b5a060974a4be7f83469b1e2b101a923903cc98b39e570c0b480fac88fb29eee537193656e8158678499e18aadac5b535935c2b32021e32b61adce0e852b55a8a6497145aadab942ef5b096c3bffcd4bea2c581214d0d52e09244265374791e710adb032a0adfdb87a8d1fc23c06c41643744c9f1656a064ab477c596cd3fb3ed1d085cd9e39449e752b356a0e5c8f1ed4ea1c437b00f5ae88ff23910bdae2bfaec2b2e1a3f7e57e25bd94453a4b549f0d76dded9d24b8985fe7f58947fd44c144bb3858313929d5c4d413b7352ca6840ea6c80f474013f0f482aaeafd851eced3a437d53e63a1f5b6dd8c9120df9bf5dd3f71912d21a38824610203e8a25eded538787e748c712deba931e7afd8bff7f8bead4580f209a95d220c5ba34dee5326d804e3334e78fd13a96fa6bb29609ae627c6b872aa1a3d6b1c405fdb446187011c6a3ff041d0b2a8e2755c2dff300919236fb0da3f831249a30e551980e3767f6dab2ae8a28ce20b053957c610b7aa572f4575c78a4d9d85dcf0f44c87188d2abd5412e29ba52680b6dab758c77c6f00382d723df975f06838ea0b702ba2dde2a91fca77e0a5cf61e77fdc5e5a895dc97f2af2d05cdf18ae5b2f8e2fa72376033d517450d74f29f96091dae37bcbbf1c55cb8b4255808cf1447eee140cbe093116ef9dd208114b151b2b42b6cc5dd45042476248020389db88c7e0ffa4490e41165bfa83d8b5c65fa8a9d6a0659db18ec8dd3c7a3d453dc113cba41390e1dd214cecb9260e62fd341cc8159627cd5dafd9df6a9f4971da26c251e025c4f40c815844937c2e5fdff056be8b2d179f1367872f4f744f4d2c9919695bc68e9014c42e4645bd615769052ded378460bb8af3b81e162993c58f6378a634f7fffff75e35945f3b779378f18b8cbc8bedd79c47a411748bdc00671f472420b921937b00406c3b986a5b7c71a485f3b6fa2c82f359223664da8635d1f0c955f73a429659e1682a07e4ec9683fdb03ee057ed7362e2ecf51fd6b984f4c795cb4b54484559ae55177d81e95d48cd711426ce3254cfbf0756ab2c6401a5e27a6ea2bfeef6b1fd154934ccbc842673a951153de3a6014b06d03bf1e5ff68fb1cfbebbb1178f053dd7f02f186bb254bf3aae077de6d22b8e29e6849c0b77acd6a81982634ca8cb0abb0fa1cc3ebf8d813b350d873ca8fcb30ca582c4711be5d9940d6b23e5cf2c246adcfcc076eecc14def9349d5fcb3aff5cc0f03420005cd43009df48838bf15d2863dc01ff6cf46ecaac38ce8d1287d5f73a4ac2f1ef66a981085671a4fa2460c59efed368cfde73936b511a3d387d8317b59e7990b978df199b44093be37136554cd7ff29ce69f9cbec8b18a136e181086035cbb51990be5507676b78c20de69672e6069107412e554b43c587fb5c159cf373f34006addbc406f4fc175ff682594b59776a49342d27fa3e78db1b3701e5002cc8401641b5f7c92ebe4d9d3708b3f499dcf696dd03f1f9200e2fcc77b68aa479442527630a48abb1887daa3d5d3dd0d0feae8634e7eb8892abe6d3a5970c5d5ce217c327d64e2a1cbb180aea4e0e943632a2fe591696b96ba9349a1167b61898d784eb933873b4529a4e482583e8c04cd1d0da77bb171015064ffc344d523fe01fe1e8074f5fb9c65e55e40c4052628f907f1a6ec1da0a816abe5ed52e41df5645d101b3de0e595cc6117b1108bd6cf33d114fcaa1710c0b13cc6a63172ec370271f22963fb3a682c969edf59c894a8fa9ad88287ae2d68a35d822675eb7a1efea611edcb676898ed7d277248c877b0065ceab560cc2c6cc3ca4d40f75c6f1f10074daa35947659bd420f5d8abc4908f33db0b2164d823e01eb1c8e7654d5fb2c9b86bdb08e86286d4a024653e23f0a8c1214bb513fefa8c8854219bfadc4b2365f5a336988c0d554726f6b0ea971786b286cc98ba4007bfaa3fa155e0612f1e80a177bf94162df2d767987eee717c781883c256786fc1e4dd4688b995fad2a573c61a894e637b12d830232b580833b0f5f104f8511fc888b0d83b138919cdeb52b59649a7ef5efbd67fb221f316715b22174df43ee69ff06605d6c81083e1ab5552bc088419c57bbe25156339e02742a209d41faa8f90c189087cda244fb86dda70f566faea5ed2f128768ff0c1600c9985b762c99111c160a5cf40ea8a4eb7a37ce5eac76cf3383ee5d6df2a8eda83c7511d070bb6749cad6566cba30e92b85747289355a66f6c1180e52eaf21c73650ce6ea7d0dfd3a3a29ef078a46b79790c29c7bac836ee91d7e8688ae5f33af5857a4db808c9ad8efe9da25be0f2a7c7a5da26b28731c0b0f566d4e10afe7f05c32c080331f871319143af202550a4590e42c63a1dfc612b8fcccabc819f498faf72f6f2c8cd2d222699fa132d821d51541bcdb0ae604214462a520e078c516cb7453a5b15e460c047cf82cc331e283c90dc686ff58eb01a65db1b7130503f5abdccfc6de733387b80a951382a91b17e89615e0a9b957025ba71bb5119ffba154217d4c2f3a2eba5ce8a7f062212f63c5000581b35178d1cb81134b5d601718578a9a6feaa44f82dfd9142533314490bec3b0d0b0bc92b6ae1986c8f52e9ede0030037d53d757152acc0ca5ad456835c95ee5be23a6cc718de6e25eb8d10c755ae9f580585af681ebd5daeb1dc0e35a489c1e15e804801c009a7e1399bf49444564ba8a83e45dc1135839d6f0b5e94bab89f131212ea8763974244c175cb1d4d277e2507bd49f64f10d5946b7c6c4c97bfb007f5ff21862dd81cc798ef805862fcae102980ef5c9de49dab5fc6c79fd53de08f62efdf170792cf83e08cc0ccb9091712c1cce8add6f4253db7438bd0e785036d9c2dac04d1f83c4ea5aed6ba22a010a2ed187aca81f70a8dd3efa80c6aa34ce6fb1cc16005bd343821bc06baaa67adb9275151e39781543d8072c5b8c258e381d3748f3a568d97d4174a9efbbf3e5345910e645d098c84b6a39fb701821b6c4ec28c4190692395022d5e2109f6e29f790be5aa00338673b2bdf124355e52cadab997e9f07db3dffb791552be3f438cd06697c040b169abf6054d2a180a8aa18c9f930dda0261a468702499be85b94639a6a15ee7a10dea0289ba7e828fd36e654bf87cd812fdff3fd00b43346cd1b7416f9d4eb8f10e48921967aeabd6024b3559530d2ffa24f960e8310d9acb710cff25c2a0e21d294106a148aede540a168108fc835a07d31e71b2087b1dbad327b9574ac47b6e4e45ee6318025f8cf1d9d1ff286be7d7b92478429f792c0bf44c2af071efc048cb6b9c94df21a8ef1035e01e39a66deecd73e8a58c1f0726ce9858be47373038577049f67c46e093bcf2f2a0f0a9900cb06c84904806efb0879f78c3d1c29c58cdafca5efe68cf378018d24258118709d68dee3d4bcf7fb0ec010a9a6b21e86712f4e1ee853394faa2fbf36ce8cd3a373504889f8fdc97916c6b5938491a7233c74358aeaab0abd22a0b69be2bbb756c2e8957f912a9db0562b94a6dd8460ef88ec88ffa744bcc7119b3dbe6276c7a65e18d5c1f64cfb0496d6e61c0eccd94fc0de8cccbcdbbd770fa508926209317938f85253a17c44360cca8191684dd0654c53390301598e52028ccc9a3998cf2a240146331a964a1c8e4d1399919d6030223cb0ba7dc679ef631e912a6d4013f1bc2bf88aa3b50bfdc6c88b7edb046c8a1fba93106fdf6ece279bc2c36d245e45464f9666f0cc33bb23e956454522e3f427ca6f9615eda9ff53b62369f3ddfa8c96e39dac91925c283e87fc7db30001e82c6df3b32603ed5b115ba30c5938be00a890e9f4a393c37205c8bb474fe92aa739344650dbe2bff555b567ab3604a7d0664db4ed9031dd624c463f774dbc76007e3c5fff068e3c41fe1647a3c7ca954f86f0479f6827b52a47d51e7d54f4ac9b52b298bd5bd1d68a161315f232aa585ec7e171a403f81e3dcf452e75d57fa8bb2588edf4f94808dce0a84b88ab4caeb1d912130b66b9c7ee40bc17abaa1dc7cbe5d33fbabaaba92c3d349305e999c152732b26dbec1a16113f760b9fef1edd9d3c082a4eb7b241b2a788514dfbe091f512263a351c97741656cda0a8739bebb9442811de8aa05ad3cbdd03a9a0d5a4a005542a62574fc654228cd84d4f400cf405c6c1a8531a46056012e10966c67f7c474b372aa0f5ecc934d8018e4208771020385e79f0507ff1a0832d5b23c3aecf4140862b9efa14aba3d2bae1a4da5dd48335ef156ebe503ce13c840497c8c5c688f130f5a3a55eeae4d76b6ef4386f3b76579a3d6db43bf2d4b24f8305a92eacc4bdaa18f70d043eab21de31d01e6ed09626c138093c8fd5afdfd0cead7bf3bf4d911e2dca69e4c6f31afc638edf76d837d09d144c115aa6bc9a26eefc91cb4f0d57e82ef32efc25581ff70ff708e04dfc2bec3bc91fab33072243408b8db23cd314ca9d7d5db2c82d4ff16c0944d4312a54ab9ebeb3d7400b82b3f137c1d6bff586b315d64fca4492fca8bf4794ee0ab5ebe6a2477ff6773224c60279cbe7e5af6ee45ff0049e8a8e9df0a93a742262563eed38f6a0006a22325ccdd79f350c781d2f6f9b0a771c6e72f3df10aecd02a9cf0dc2f7263e38f6250bb2d1b43b0573b16beed43635c545bd52b5404034a904989177d697b1ce5e28d87587d9c5c04e76d1baecd9eb06aac5979679581c07321ee1e3eff91bd63f2bf44cfe8161cf295b26c072497a2f6f820c52d201c7ee54a7bdb3d6f7d37f1cbcdf453d2cbeba9440bc67c7f6d2846bd1d9e8d4875c2c1a24d5c458678098a19d944d8511f2c4aca843752b4b47f894df744109df678445945430866fe072de74c69816ba3ba52bcb1422173f22dfba3d0780821d9bd775ba631793438ffb9f2da20a3ed6fddab0c389530d228450fc18a22c9d5dc22f5dbd09921a5089ab3d0a038af82bfb8e8038c1efb60d98adc7b13604d8aa1fe46647ef5512ce4a3e085be468bc6f69694d37149bb484ba785a9eb7f25e9827b8094c3a2c8084de0803df2f3a9b8fadb5b973eef8bafec75eb8e83b6b11087f6a9b0f7ba2a65a229f1fb1b64ffec043f6bafd251106b42f11f8c7f79317878c40877df2dccf4e7fdac487dae10f6ec872b137a31a708e7607bd857a06438a9b514bd9a9a42e4f775bc0afa1c08356d8b6e2d92d6eb18d4db208532ac9fb097080263597e26262ae41d68cda07ea2270f12068c5e85723534568710aed16a2a071828d2f548d5fe7fa041a07bd0437c37bcef3fecddbbdeb078c794958b13c228cdec5a92334c57712efba3cc828b6bb19705b9f46bd45bff0c5cc3fe4bbb38ca740ce8c29d8fbcade653ab5fb6908b6643a2160a9b6beaf9f46912d8731da2d45efa72a7a8a116ef2e894c0471d14b99a3491ca288122d2258d0a02c804a6990367299e5cd12cadbc61643ccb73ef534604d9e403f2fda34b9b2cf14e01d05647929334f30ffd1fb6d5427edd0b66b77310cc153d65c46a2e474e5abadbecffd290f1bef16772eac590e2576a67b729bae8169b877f09f4463f170e31eb7334a83b2a860888249baa0b54898d921f26ab375bdc733f84e9903e2a74968b7f0832d931cd1e893653f0d391907a1850558ba888ea630044edb5e7835764254d9252fb6c521c9c1f158adc4cc54d1321a88beee251e385f1269847104fc9e7c2b026733d903e55b2e5d2af046ea44c2199d7d8133aba013a2041810ded6f3bf38394b49422c402b295027ce833b79383410f457546866951b6d3c22fddd9a931557c4d72c68442918e976a16bdfa3c1d71f4402676cb94e5048877d1963c6e263629845eba4777c1239b9f6420485731f2245fbab4d47cf4238ae16cf2c331f29a802ac5f4960338858776a3777623b7c2b0116797e67be945922f8c168fc6d80462796b5b7b537dcd4eea17f4d80c7122980112b768941eb483eeaf30477b979e954c19b853a29a96d48b41ff103c171b1bb72be3a2afcb45f6034b52594e7c8dc63eab9e1c8b712ff793b5e34c3f41f001afaa9421490f92c76aee56776ae8b77f706ce1bbae6d9d27287ba7c123213efe64e1baab167753417cd426d2e7aeff471938f0dafb267289b9dc7db1425c7453dab8b98dae1c04b3a561bc10d0bcbf3364de1cd93528830c930f5d56ed442ee593d49c37d6ead9fd9347c50cf52d90d6a6ce3c83bac4d0156e59c60cbd2b43652f5ab0cceafd77c143d2ae1f10fbdae799cd7f226493f96ebef4bde8b8448d590768df2c5368b8f25f5397ae94cfe9d03397d5dd083e1dafb16f1a89d99c9ff1734b2bfb61b125ea3b5823a8dcefaaf68922101d6b9417d1382218ec16793a7f45629f9335b678447ddbe01c820ae7f01cf06528eb6447bfe1e869fe54611de7a2605b6be5ab7688ce614cf9410867846267f42069ade3d515082bd5a813278f383d83d500087443e50610a43f46be0454ac146058b8031b7d2bdb91c9ec93a165be663aafa399ab5065c2958ff8a4e25c793b71a30f38278aa43873be89a617212afc168be1e1912c884bd2aac7dc2c5de00b064e304e64ff420f2ec2c86ae0963e51b27174d3d959421829f435d4b761426f5df463a2c696ffcdd9d028617dca90981495da563c952fa88317c2696a4c75b999f537bd7159d76554e2ab784c91a345a16a5580e850fd52211f5f81581e1af522c5201b0ea42940ace2a1e7ee4251ba19b0b23e60c6dd19cfaaf02785bc77db97d44376f13da696699aea50a9fb8d33abba78adc44464f37a75c009be4cb9a84b6fe4a78af1e0529971a7999ac3d8e100a61c01e0646a4952523ce5e23291b35bbb48ae8d3af11497d1a665f7096d31f8644819f775cc25749560b8ec0dc4c18e917986b1d2ddce090821000e024d98f8be346394ad44ef2e76e5040befb65f2e96fb00a2fc76262c01d427d0d30ffbbbb4f10b46aac302d68d4151f8e8d72e1b8eddf0e9052b6a4244d02e91c3e5f215c72fbe114492db7964aadbaaa58f738413de2c947f3559efa19fa7aa94ba67e4ff94d705498cb0a0c8d1e9a55b7d08ae27de291fd0fe60825d5aaace4ef601f50b87c18b96edea6f7e32a40e7752312a5eb8577d4a316ed340b9d892b7564afab7e32b2ec87977c62db458b86526f91c84419e64a2b5cbcc5216663f4c8ed98f9f8d7996873ce47e5c6dd42c9e39e74ef13690ba7421f95bf983726e740cef40a3b9d7d4bc126faa5fc11a7f7779f8d86c73b0560224c9a89f1a6e7e4ab27adfe182ac677244a31bf25abe49acbc5d839a8143a2263e702a72674ca3b37fda6561dba79e786fecf92acda96287e9ab4e57fa632b5ca3cdfee44d3db00ef99b53f16cec41d8c4dad6f3731078ac08390dadb6a2aeb750afd9816e24e034ab2bbe874c3693efcd59f70101162f1a7b08ba2e59d1bfdf86419a6bbf05d2b9e925027f033d951e27153025c6e2b41fc0b8fb40c1a37d2a5588af010a1f4f96236b5ac4f6ca68ac688ad38732a811b090dda36fd8eebca96d0e409cde5b6463154ce7d744c77f349e98f4bd5640f2ed61bd883902b7f71cffacb3f4f70272e2e8bd09896119dc0a1fcf88fe57dc28c291f1f284c26286516fd73b04489dec77b8330cd67fd4f78e521041a3059d0ea849f5db222a01b9ad87edf96d1af900a28ea418ecb385fd2d822095e9969776a4cf5f0f4e558659d0584dbc7ae97da1a7584f7a19c443525862bb3f2bc23d8573f8184bd6317f2def4a55565812706a9b96540958396ce915084a45592c7e8aca821edeb8b200447ff4db14b31531720b9447a1c51478e3069fb0e3286cac7aa24316ef0cb1c9cf9cfbdd3321417872c0fac5db082c5e23410704a54665d2d88f8696487fcb83e4e3767588e36fe5451cb22f85f1ae9219253f29c75818dea7d6cd5b5f449010567126f234b6fe93006b802d8df4e8c7133bd11dac06a571d58bd461a61b9801839805a43df3c9fac99278bd008ddd74a5f199a8a08966988e6242f229772d151cdcf0763c78e96477b071ebc568af789f05dde82c9799375a1ad094479ecd0d1bc54c685a5461a39158b64c901a99a4301564ee1cb22cb41db9c4e2dc4eba868f2a2afdb24f82afcf9794ab24c8255beee391e99e01edee3e1bbeddd12dc5930e75c0cafcf4b7a8ddb604dff71c764b97cea7c9a106c278fb1430de47103db78b76978299bca984b6679f8f9ac784b8859d2de9b7a7de3884590e99d58a669aeccd1fac2379e0e8aca56140ddb5b0fa4085a988fe66fed2fb0528677d84afd92cf81e2553c38eb36e170079486d0cca81147076b9b9a5a47ecbd25f306b8bdf5f5d4aaba15dbfafb5b4d59979816a91acbc8fcda3c33087ac81835d957e653b9b72279b7e755825db36767d2604916c58f9a5e6b09ae895641eb62e44e15d4a3aa9efd71ad46b0a678c7f26842a6c821bd3123bdfd1e5953eff3720315d8885fabaf8a37db856c6baa913893a9b07543b7df1e5ea5eb9abc6d9e0bab2a9eaa9adad9a54a26c1e7d11ec2f939480caf7608c596f29297e0561dbed3adcaba4a716fd5b5085cb19b62658cf609a42f66e96af9bb208b7fcfc13c3228049960a0b91c6464e8437b8fd09ebf5b4763a133447c2a36754954eac10b2ba0b9b60c53448185c39951784c8aaf64dc1016ca63b3bea25ae8f0082ec55537b8873b0ffe3dd8ed6da796129f9603b64245156de7539d75ef9cce815df40d019da83ded05da472f326dc00752827afafb0bc8b13cf22d8ebc219cdbc4d314f233de5d336c3b2a4ebfad27479962e1bf2638301d1dc20b32db5c1c96353e96a2ce8d86e59ce48940b46f10f4c74290582ff04c3a4282fd6c4eb0d94100778b66f4b8d439430363a21fbd87c6907c73648f44be1f97a48ce5792e757cca9273b926695fd0fe7b80287d3ea98c50127a1882d1ab0afb01cc69886a0956349aa78530659070d096eae135bd6ec16c088cf54d08145b9e3248b8a50c24d0ba63161834584781f7c63c285f2c201a57dabe22fb277501b698080d2c1b48dbce321cc057b8455174c695f5591d486dedaebda957ee7d0b434d511e21921e2ded5fb0f1154b79060a953f89efbd8923cba7f8b6741eb245e5baeb7d7415f2ea25a41d6b8e2374f28b7f1e9f8c30d31402eb8f2cb1daeeb734384728caee7f81af7d34f969f9a80ff148e0921dd5efb051abe68c007f6af2d4434d49651efb229955179c0852a37d5800bd362aa09eb3fac116c383daafef03d211a866df4551988ae848b6b84e05046c9296cb77c5f9bdbff3ab84dcff1f7338c6f4fd519e0ee4afb0624653e8d6b130592dcb886340f2d84a5111e4666949b2d362de772367e8371e34cf5c6c7911c343cc5669a18d770feeb7a6d37d2b1a10bc95791f6ea3f3b3fccc882dfa21aadbdeae78c88a1df85480dd434f7f6f75de842a8c4d06cdf2d2c77c900095a4307edac0d3a4acc807928dd7cec8ec643fdb51fe5c7285825730608fc0b5e8c4b4c3d849ab732ca343bab2a6ca15b440ae518e2a76bb2381939a68fcf5306406966bbfb4e90b450ed66d4c6d78937cdabb4e92c2b5ef96d6819cf72625c43b74b323979e5ddd1452eb0b627aab1eab4c2781684aa00e583b17ba11ee03325b158b6095b142aed8d7a0df84f97a19ad407f74256b40a1f5d022dd963eac1dd077d52b743660dec4efe9cbbf2bbaa7911abfabacc9c6c9169ed3448bd18a8fa067bfe9f66c1e57a106fe9938a9e7078a60abc6c9c2002d446e9ad4801a6a28b781e8624d5a2a680008c8efbd56ff6d4c2658e469cdbb415e135f3eb33ba18ded7bb3cabdb1d1f4baf3d2838f30ddeb2dd87a1febfa1ff917d9d95dfa788dbad450c7638b38a2aa774ccd91ab3e5b2e3e9bfb4fa95494db44a8cf3a8f36b3dd6ee732e977ee37a4179ec7473b823b366ae359041d9fc8d6ccce7e1d97e7415fcf396727486e671b4c8d0da3fc7e48e4520de31845c966a707bf2819e3ede9fa51f7bf5cd7360562a3ec33b6b54c194f8b5091591378e0bbfdb6a44fd435ba28285d7c459a89f124c41ccb29619ab8d824b986914707bd8f8cfcb187f7a8769e175cf99f8706023300f74bfb4330e544b4f8bbaea659656b135027be35a26fb482f6e000b3f29d68423441c7a3b292fa38c99899766052bbdbb32016165ad1be0ff1385150f339637c0934ab5d193bb5428e85a18704b1303c39dbe062473ecb41dea99b987d3e8fa6058de37d06d16818535cba6f2bdc3db04f6cc3de47e6591231d083ce64aa80e122d6f3beff94cf255657404b20d7ecc2d9ef90509aac735a4fa3caf980d2aecff09aa934f97324216c6bb71f0970986492748a4654e938e1d6ed40f040df790c3da1e3f78119963f62b61667fed02ea78a6f330260db0d4cf5e3e7fc332cf79ddcfee8907288648cca31fd1d86676f1cb599572c8dfcd258e1151ce848e896c8df81964f71d8dae2b48e6c4f5048e0fb42d8df3aedb15a1d0a218e21c769b08c21acb0a5b3c434329c06afe5d0207294a4e77023cdb245aeee2b992333c1823fd2e49fe93eaad05d8ceb515b0d35a2b400fd7f9a7d78fa6618e18eaf184353f259bb96f0b1458e9806de8c3d4366e823e4f13c04cf56ac175ad98e87575333a9b2757436dac203e80ad2ce1be212cab8df7db75bc5f81bbccb0da5c16b4b78cf03f9ddeca8ee49291e996a887a0a00f8ef4a6c8e05d9207cdd5aa5b9496403f24c82ca67b88ccb3aba5797b77b917f64c1bc7ab595d116bdc835183d5b8110dfcf6f1320ff4a7087b404bb9cc913e199000ed75143a4c4ff3805402065a3b3ee77b23807f4f0bc305459ab7298863d3c222aafd5272c77988742bf2354bf72df1dff1453b5df848edd33d3658bb8434609fb5a032f613e65b030850cdb2a32444f6a1fb4a22a6f9e018695c0feb80630069125d34bb47be3d515cfa5dd7bd9261f78cdb5c5c95f914365ecb9e5d75fcdd6602363f5d679c28aed88ddfdd0a00f55668ac7790ccb0efbf81a7332d4af18843f6468b574cb8d13ed84466f64afd5044cb5c53f00058bb4fb9580c1405fc53ae5d54c475587b271223b7c363b0d506c367fe64c1f7cd0a4c9d9044e0213573badd0f0fe38db4294933ee27822ef6ad27670c3fb1e9de3ec4c1d053c713c4590eb1febcaab2ad3536611cc49d2931e062a1e7e1684e16f5c7dc5ae77e66e5800431f5af72d6ae373f90b196a1e2e8302494608f2f8da262fab9f7e0132670cc9bf922888810883da55ffda0e4802c96b11a0123d309e388c1518503060b010c24b61636f7e2a3f77103e14bf6238701d531c6eb3441d751d983a97b1023a68b7001daf23cc5f382d475dc31e0ef2640284ab4985913a4953955ab784dfb19d731ed523380cc35a97252f4445742f4634342f9977d4546d47e0fed4030934b3df9fbf28313f52f0a30aef7c226af6924d3e3e6a581eecb53119e55379cf619dedfaede22a0b5aa254475874eab11ebe471e0370aaaf6ff01fda29e2dede6d99e1c86b842a1434f2623aa657010ad2c5398d2e7c11a42931a8eb942286a446a27ba2a9146007dca0d1d7a76b13447da8557c60337314e24aa9994d347a6b8eb943a31e8e796fa39f24b29f73ab40d71918463c3f91772bc90a0550370fdd4099b403603b5cb6ef5b69c8c1124ae6a53804184632ae2b1dfd26635c8e85c3ef9971ec30ed51d66a33cd1d29f3339b969e4009399922d47d0e71adc4603e6aae90f24825bd3bf56bacff94935943ad478b618b7491c7f20a111d20d4e8dccf89c3b1222c12d28c2d73fc89e0d16570ef74733c8e063da06ec109d2b4cd59612ee0045d1ea762cc18d623c6e95f9632e91c40e940de256faf91c047cb5f017c21f8109acdd9059c23df53b77fb0641451308165665a0a6fc148216a02332c360ddacb1f1ac8196387732a3267b54df7aa26e2617d31b44d2dc309363ad86e3e84cfc3df5b1259cd09e6d8c8abe0787ac55b11649003336cf5a1d69e3cad67baf121cce15e6fd4528aa094aac741076dab7f91ac66527c7175a879695abb694db4846cd81921517e994f20372a5807e0a26f6c9c19eea130b6793710f9cd69b96f0ac69501f61d2566c9b366f290128092bef76617212cd5d45eef5b5d8c8263171ba9705ed5885d3864ecfd0d552bbeff8a9cbbdd4b94db3367a3b4bd1373be08001c219fb750df9a7c4f6ec724e5d8ce1f704b16e8d16a499ad9dd801f4d5e6fe915480fd6a9f14dde263b29d3717489ba02427b674faedd42bc981cdcbb4bc1eb17b7586a04aaa9420f698cb0715520dcb3a5b8e184507739ff7532f38ffe006bd240d98db0a5f7f592d01f294cfaa10ff53f6e82882d1fc0206a8abf999db28f6e07fa6ba4043ec743d79d5487012b21bede2c70c1a5faee35316923bbf3e670fb675a2bf7343d4094ded8adb586dc131535a7d409b87006ec5aae57e1ff773265052af4f4a8fe69f4ad82158d4e620c53b1697f73010687e96c65432b342f0a2733ca386c26c97daf6c7d1a131b257c33ac9ffa996c7859035a826cc6d405a0f408c0ac156fb63023c80d3e7d8ed029b04bbbc13c971db3bde77b54df14678d72b0297b404fba313d113eaca612159ca336787731e7ef8280ffc94a40e1f4fa6969c90da19665918d7c4f067e2ca9d5372412ee327f7285046f36bb83969485e392c5a260d8ccade5304acd67896ea6a5e82a873c05dd133c8c2263f2c3b3f56d12ada89f4c4a9f8d81df75d7ea3232da8d84028fdaf595ddc70d614af70db47fc54c0e54d455b1b1f157ffb54c1cb9f1b2f124c398d6d62f134cfc7cecccb77461b5f476db282badb38debb3c8854d626bf41cee70f248ef18e171939bbbbe8f72590e990d56ab2d91af64b11802f521e1a165b1dca0885ff7139c95f6e7bbfff955a60efdd20d4cf69d73d9b6bf06c5ad8c667b23c87cdb636e183869405234d30ce208a4358b8189484bdc2aed1bf781fb1b27a5bae7da01c4f3f7fa46c86391f33d763ff126fb9b8998496e6da5b0b0cd274519a574933ffee14cb4b66f952ddb978d14d2f0d02be22de6a9051e653ce004386b467df06745cbee1a2b0603dfbfecd059922ebee4dfa84b393b5f421ee361d8a7cfb5ddde0b5ac28c8763245b26572363dde0c99841b4731b798d74f890188a5a0bfe673fb7ad2e40bed9bf9e69d3fa9b7964512b8550bc1d86cacab2dc1a177e3c3cc3cbdd1dfcdc316180887abec2ab624536d86031fff04b708b20f4d3032499a2eefcadc5b62b77a85b46b5b13b9c57b2563f68eb8e9c7e68e438d46666cdc1d98aa10e898e788b97324c9eec24d13b0b57653f1a76ec70f024f62a9258f4363abb0c04af3221b373711277dffeee253f45300fc05214b97d3d1aa333ef7443528a38a7bb1db626f92a1cc8ebd3449a4275e4940c1fd8a150e7477af2f8be5b7334a1ca975fb54fea6980ea5556e63688d5b0e3426522cab6ed3edf95d4d1a597e81b785a321a04aad3ef980e6606857390d9ace896c961ac87fe16b62e7fe03e54cbad428242f9a5407139dffef142ec43f017b010eff709e54b8d0bc70d38647a4da0247342b7b15a53b98a87a22a38459a0efd6614301ca88e33971d523c9625093973dc527d4cc9b61787e1f8c94123d520eb599f8570a84294dab593ef3ceaa5c7cf8bceb7738949440e310fdf041042cc8d4e4517f4d186b7880cb4c352838e33279b6e1602dac6801fd11ee72d839d0e141a951666b39c32207690c5030eab5494557ba292d9f5eb527fc52efaa4876e0e9ba54e7b67062f084f7ee838dcc3901fd4f976857cbdba67ac784a541e8a9998b5d63b68670e10ea8fe4a7ff2c52c69e20488b87c77566f087b0b070b6fb5d1da80716fdb140d4dd7e8acc38fa3dfc0d41815757c1e3cdb640f21742ea8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>My Book List</title>
    <url>/2018/04/30/%E7%94%9F%E6%B4%BB/My-Book-List/</url>
    <content><![CDATA[<h1 id="读书是一个很好的习惯"><a href="#读书是一个很好的习惯" class="headerlink" title="读书是一个很好的习惯"></a>读书是一个很好的习惯</h1><h2 id="Books-that-I-have-read"><a href="#Books-that-I-have-read" class="headerlink" title="Books that I have read"></a>Books that I have read</h2><table>
<thead>
<tr>
<th align="left">书名</th>
<th align="left">完成时间</th>
<th align="center">评分&#x2F;10</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;&lt;明朝那些事儿&gt;&gt;</td>
<td align="left">2013</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">&lt;&lt;卑鄙的圣人:曹操 1-6&gt;&gt;</td>
<td align="left">2018-Jun</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt;力哥说理财：小白理财入门必修课&gt;&gt;</td>
<td align="left">2018-Aug</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">&lt;&lt;卑鄙的圣人:曹操 7&gt;&gt;</td>
<td align="left">2018-Oct</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt;凤凰项目：一个IT运维的传奇故事&gt;&gt;</td>
<td align="left">2018-Nov</td>
<td align="center">9</td>
</tr>
<tr>
<td align="left">&lt;&lt;深入理解Java虚拟机JVM高级特性与最佳实践&gt;&gt;</td>
<td align="left">2019-Mar</td>
<td align="center">10</td>
</tr>
<tr>
<td align="left">&lt;&lt; Java并发编程的艺术&gt;&gt;</td>
<td align="left">2019-Dec</td>
<td align="center">10</td>
</tr>
<tr>
<td align="left">&lt;&lt;微服务设计&gt;&gt;</td>
<td align="left">2020-Feb</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">&lt;&lt;番茄工作法&gt;&gt;</td>
<td align="left">2021-May</td>
<td align="center">10</td>
</tr>
<tr>
<td align="left">&lt;&lt;高敏感是种天赋&gt;&gt;</td>
<td align="left">2021-Jun</td>
<td align="center">9</td>
</tr>
<tr>
<td align="left">&lt;&lt;格局&gt;&gt;</td>
<td align="left">2022-Jul</td>
<td align="center">15</td>
</tr>
<tr>
<td align="left">&lt;&lt;邓小平时代&gt;&gt;</td>
<td align="left">2022-Jul</td>
<td align="center">9</td>
</tr>
<tr>
<td align="left">&lt;&lt;超实用儿童心理学&gt;&gt;</td>
<td align="left">2022-Nov</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; 博弈论&gt;&gt;</td>
<td align="left">2022-Nov</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; The Commerce Model&gt;&gt;</td>
<td align="left">2023-Jan</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; 领导力&gt;&gt;</td>
<td align="left">2023-Nov</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; 非暴力沟通&gt;&gt;</td>
<td align="left">2024-Jan</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">&lt;&lt; Sales And Trading Flow&gt;&gt;</td>
<td align="left">2024-May</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">&lt;&lt; 国富论&gt;&gt;</td>
<td align="left">2024-Oct</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; 这就是人性&gt;&gt;</td>
<td align="left">2025-May-25</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">&lt;&lt; Risk Calc Fundamentals&gt;&gt;</td>
<td align="left">2024-Nov-19</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; Helm学习指南&gt;&gt;</td>
<td align="left">2025-Jun-12</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; Jenkins 2权威指南&gt;&gt;</td>
<td align="left">2025-Jun-18</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">&lt;&lt; 深入浅出Docker &gt;&gt;</td>
<td align="left">2025-Jun-23</td>
<td align="center">7</td>
</tr>
</tbody></table>
<hr>
<h2 id="Books-that-I-am-reading"><a href="#Books-that-I-am-reading" class="headerlink" title="Books that I am reading"></a>Books that I am reading</h2><table>
<thead>
<tr>
<th align="left">书名</th>
<th align="center">进度</th>
<th align="right">上次阅读时间</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;&lt;价值投资——原理与实战&gt;&gt;</td>
<td align="center">22&#x2F;151</td>
<td align="right">2021-Jun</td>
</tr>
<tr>
<td align="left">&lt;&lt;分布式中间件技术实战&gt;&gt;</td>
<td align="center">208&#x2F;435</td>
<td align="right">2021-Sep</td>
</tr>
<tr>
<td align="left">&lt;&lt;深入理解Java虚拟机Hotspot&gt;&gt;</td>
<td align="center">1%</td>
<td align="right">2021-Sep</td>
</tr>
<tr>
<td align="left">&lt;&lt; 云原生 &gt;&gt;</td>
<td align="center">79&#x2F;197</td>
<td align="right">2022-Jul</td>
</tr>
<tr>
<td align="left">&lt;&lt; How to Lead&gt;&gt;</td>
<td align="center">37&#x2F;213</td>
<td align="right">2025-Apr</td>
</tr>
<tr>
<td align="left">&lt;&lt; 重组与突破&gt;&gt;</td>
<td align="center">22&#x2F;954</td>
<td align="right">2025-May</td>
</tr>
<tr>
<td align="left">&lt;&lt; 战略与路径&gt;&gt;</td>
<td align="center">10%</td>
<td align="right">2025-May</td>
</tr>
</tbody></table>
<hr>
<h2 id="Books-that-I-want-to-read"><a href="#Books-that-I-want-to-read" class="headerlink" title="Books that I want to read"></a>Books that I want to read</h2><table>
<thead>
<tr>
<th align="left">书名</th>
<th align="center">原因</th>
<th align="right">优先级</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;&lt; Go程序设计语言&gt;&gt;</td>
<td align="center">云实战相关</td>
<td align="right"></td>
</tr>
<tr>
<td align="left">&lt;&lt; MongoDB权威指南&gt;&gt;</td>
<td align="center">DAL实战相关</td>
<td align="right"></td>
</tr>
</tbody></table>
<hr>
<h2 id="Books-of-reference"><a href="#Books-of-reference" class="headerlink" title="Books of reference"></a>Books of reference</h2><table>
<thead>
<tr>
<th align="left">书名</th>
<th align="center">进度</th>
<th align="right">上次阅读时间</th>
<th align="left">参考原因</th>
<th align="left">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;&lt; Spring实战&gt;&gt;</td>
<td align="center">10%</td>
<td align="right">后端主流框架</td>
<td align="left">2019-Oct</td>
<td align="left">工具书</td>
</tr>
<tr>
<td align="left">&lt;&lt; Spring boot实战&gt;&gt;</td>
<td align="center">5%</td>
<td align="right">后端小白主流框架</td>
<td align="left">2019-Oct</td>
<td align="left">工具书</td>
</tr>
<tr>
<td align="left">&lt;&lt; Spring Cloud 实战&gt;&gt;</td>
<td align="center">5%</td>
<td align="right">DevOps主流框架</td>
<td align="left">2020-Dec</td>
<td align="left">工具书</td>
</tr>
<tr>
<td align="left">&lt;&lt; React实战&gt;&gt;</td>
<td align="center">20%</td>
<td align="right">前端主流框架</td>
<td align="left">2021-Apr</td>
<td align="left">工具书</td>
</tr>
<tr>
<td align="left">&lt;&lt; Electron实战&gt;&gt;</td>
<td align="center">50%</td>
<td align="right">跨平台客户端框架</td>
<td align="left">2021-Apr</td>
<td align="left">工具书</td>
</tr>
<tr>
<td align="left">&lt;&lt; PWA实战&gt;&gt;</td>
<td align="center">30%</td>
<td align="right">前端演进框架</td>
<td align="left">2021-Apr</td>
<td align="left">工具书</td>
</tr>
<tr>
<td align="left">&lt;&lt;快学scala&gt;&gt;</td>
<td align="center">50%</td>
<td align="right">Scala语法快速讲解</td>
<td align="left">2021-May</td>
<td align="left">工具书</td>
</tr>
</tbody></table>
<h2 id="Books-that-I-am-not-reading-for-months"><a href="#Books-that-I-am-not-reading-for-months" class="headerlink" title="Books that I am not reading for months"></a>Books that I am not reading for months</h2><table>
<thead>
<tr>
<th align="left">书名</th>
<th align="center">进度</th>
<th align="right">上次阅读时间</th>
<th align="left">原因</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;&lt;张爱玲全集01：倾城之恋&gt;&gt;</td>
<td align="center">529&#x2F;1025</td>
<td align="right">2018-Aug</td>
<td align="left">闲书</td>
</tr>
<tr>
<td align="left">&lt;&lt;深入理解C#&gt;&gt;</td>
<td align="center">30%</td>
<td align="right">2017-Nov</td>
<td align="left">目前专注Java</td>
</tr>
<tr>
<td align="left">&lt;&lt;卑鄙的圣人:曹操 8&gt;&gt;</td>
<td align="center">716&#x2F;1187</td>
<td align="right">2018-Oct</td>
<td align="left">闲书</td>
</tr>
<tr>
<td align="left">&lt;&lt;知乎：金钱有术&gt;&gt;</td>
<td align="center">283&#x2F;788</td>
<td align="right">2018-Sep</td>
<td align="left">闲书</td>
</tr>
<tr>
<td align="left">&lt;&lt;算法设计与分析（王晓东）&gt;&gt;</td>
<td align="center"></td>
<td align="right">2018-May</td>
<td align="left">没有时间</td>
</tr>
<tr>
<td align="left">&lt;&lt; CLR via C#&gt;&gt;</td>
<td align="center">693&#x2F;798</td>
<td align="right">2019-Feb</td>
<td align="left">没有时间</td>
</tr>
<tr>
<td align="left">&lt;&lt; Office 365 开发入门指南&gt;&gt;</td>
<td align="center">15%</td>
<td align="right">2019-Sept</td>
<td align="left">领域不再关注</td>
</tr>
<tr>
<td align="left">&lt;&lt; Spring技术内幕&gt;&gt;</td>
<td align="center">0</td>
<td align="right">Spring原理讲解</td>
<td align="left">脱离应用场景</td>
</tr>
<tr>
<td align="left">&lt;&lt;巴菲特之道&gt;&gt;</td>
<td align="center">0</td>
<td align="right">理财启蒙</td>
<td align="left">领域不再关注</td>
</tr>
<tr>
<td align="left">&lt;&lt;大数据技术体系详解:原理、架构与实践&gt;&gt;</td>
<td align="center">0</td>
<td align="right">大数据概述</td>
<td align="left">领域不再关注</td>
</tr>
<tr>
<td align="left">&lt;&lt;企业级大数据平台构建:架构与实现&gt;&gt;</td>
<td align="center">0</td>
<td align="right">大数据概述</td>
<td align="left">领域不再关注</td>
</tr>
<tr>
<td align="left">&lt;&lt; Spark Streaming实时流式大数据处理实战&gt;&gt;</td>
<td align="center">0</td>
<td align="right">大数据实战</td>
<td align="left">领域不再关注</td>
</tr>
<tr>
<td align="left">&lt;&lt;亿级流量网站架构核心技术&gt;&gt;</td>
<td align="center">0</td>
<td align="right">高并发项目实践</td>
<td align="left">脱离应用场景</td>
</tr>
<tr>
<td align="left">&lt;&lt; Web性能权威指南&gt;&gt;</td>
<td align="center">0</td>
<td align="right">网络项目编程优化</td>
<td align="left">脱离应用场景</td>
</tr>
<tr>
<td align="left">&lt;&lt;大型网站——技术架构演进与性能优化&gt;&gt;</td>
<td align="center">5%</td>
<td align="right">2021-Jun</td>
<td align="left">脱离应用场景</td>
</tr>
<tr>
<td align="left">&lt;&lt;深入理解Java Web技术内幕&gt;&gt;</td>
<td align="center">280&#x2F;491</td>
<td align="right">2019-Dec</td>
<td align="left">脱离应用场景</td>
</tr>
<tr>
<td align="left">&lt;&lt;哈佛时间管理课&gt;&gt;</td>
<td align="center">48&#x2F;258</td>
<td align="right">2021-Sep</td>
<td align="left">进入实战阶段</td>
</tr>
<tr>
<td align="left">&lt;&lt;面向模式的软件架构——模式系统&gt;&gt;</td>
<td align="center">5%</td>
<td align="right">2021-Feb</td>
<td align="left">脱离应用场景</td>
</tr>
<tr>
<td align="left">&lt;&lt;算法设计与分析基础 by Anany Levitin&gt;&gt;</td>
<td align="center">5%</td>
<td align="right">2021-Nov</td>
<td align="left">脱离应用场景</td>
</tr>
<tr>
<td align="left">&lt;&lt;代码整洁之道&gt;&gt;</td>
<td align="center">73&#x2F;388</td>
<td align="right">2021-Nov</td>
<td align="left">进入实战阶段</td>
</tr>
</tbody></table>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Phoenix Project Reading Notes</title>
    <url>/2018/11/17/%E7%94%9F%E6%B4%BB/Phoenix-Project-Reading-Notes/</url>
    <content><![CDATA[<h1 id="读书笔记-——-《凤凰项目：一个IT运维的传奇故事》"><a href="#读书笔记-——-《凤凰项目：一个IT运维的传奇故事》" class="headerlink" title="读书笔记 —— 《凤凰项目：一个IT运维的传奇故事》"></a>读书笔记 —— 《凤凰项目：一个IT运维的传奇故事》</h1><p>本书从IT运维管理者的第一视角，讲述了IT部门每天都会发生的事情，并通过从工厂管理经验中借鉴到的方法，改善了IT部分的产能的故事。</p>
<h2 id="IT工作者的每日工作项目"><a href="#IT工作者的每日工作项目" class="headerlink" title="IT工作者的每日工作项目"></a>IT工作者的每日工作项目</h2><p>IT人员的工作往往分为如下几个项目。所以每一个程序员需要重视这四类工作。</p>
<h3 id="业务项目"><a href="#业务项目" class="headerlink" title="业务项目"></a>业务项目</h3><p>这是多数开发项目所包含的业务举措，通常隶属于项目管理办公室。虽然是IT项目，但大多数是跟业务的利润有直接相关联。</p>
<h3 id="IT内部项目"><a href="#IT内部项目" class="headerlink" title="IT内部项目"></a>IT内部项目</h3><p>IT内部项目包括可能由业务项目衍生出的基础架构或IT运维项目，亿级内部生成的改进项目（例如创建新环境和部署自动化等）。这类项目业务部门并不是直接集中跟踪管理的，而属于预算所有者（例如数据库经理、存储管理经理和分布式系统经理）。</p>
<h3 id="变更"><a href="#变更" class="headerlink" title="变更"></a>变更</h3><p>经常由前两种类型的工作引起，往往在保修系统中被跟踪（例如IT运维补救、JIRA或者用于开发的敏捷计划工具）。事实上，在价值流的两个不同部分中存在两个工作跟踪系统，这会引起问题，尤其在交接工作的时候。</p>
<p>某些情况下，在一些兼具功能开发和服务交付指责的专门团队中，所有工作都会处在同一个系统中。这样做的好处是，操作层面的故障会和功能缺陷以及新的特性功能一起，在存量工作和现行工作中显现。</p>
<p>在生产环境的变更是需要严格关注的，有的公司会专门对生产环境的变更进行记录。尤其会对变更本身的原因，步骤，以及风险评估和处理细节都进行记录。变更记录会交由管理者进行审批从而在计划时间窗口生效。</p>
<h3 id="计划外项目-x2F-救火"><a href="#计划外项目-x2F-救火" class="headerlink" title="计划外项目&#x2F;救火"></a>计划外项目&#x2F;救火</h3><p>包括操作事故和操作问题，通常由上述三类型的工作导致，而且往往以牺牲其他计划内工作为代价。</p>
<h2 id="布伦特——约束点问题"><a href="#布伦特——约束点问题" class="headerlink" title="布伦特——约束点问题"></a>布伦特——约束点问题</h2><p>文中的工程师布伦特是IT运维部的约束点，原因是：</p>
<ul>
<li>IT运维工作中最优秀的救火队员</li>
<li>IT运维视角唯一的项目系统架构师</li>
<li>IT变更项目中时常存在的执行者</li>
<li>项目半成品堆积：由于救火项目或者忙等待问题造成。</li>
</ul>
<p>每个工作中心中都存在他的身影，个人能力的有限决定了IT部门的产出有限。</p>
<p><strong>约束点问题解决了，工作产能问题便能解决。所有在非约束点做的改进都是假象。</strong></p>
<p>对应的改善约束点问题的方案：</p>
<ul>
<li>建立L3支持工程师代替执行并学习布伦特的救火技术，建立其他人可以借鉴的trouble shooting检查清单。</li>
<li>专一做到资深架构应该做的工作：关键项目的系统架构</li>
<li>将需要布伦特参与的项目进行工作和流程标准化管理</li>
<li>IT工作可视化并控制半成品</li>
</ul>
<blockquote>
<p>等待时间是工作中心中某个资源忙碌成都的函数。下图横轴坐标上是工作重心中给定资源的忙碌百分比，纵坐标轴上是大致的等待时间（更确切的说是队列长度）。等待时间&#x3D;忙碌时间百分比&#x2F;空闲时间百分比。曲线的形状表明，当资源使用率超过80%时，等待时间就会直线上升。这会对项目交付产生灾难性后果。</p>
</blockquote>
<p><img src="/2018/11/17/%E7%94%9F%E6%B4%BB/Phoenix-Project-Reading-Notes/WaitingTime.jpg" alt="waitingtime"></p>
<p>看板对于IT中的半成品问题是最有效、最简单的一种对策。两本书推荐阅读：</p>
<ol>
<li>《个人看板:了解工作&#x2F;驾驭生活》by吉姆·本森和托尼安妮·德马里亚·巴里</li>
<li>《看板方法：科技企业渐进变革成功之道》by戴维·J·安德森</li>
</ol>
<h2 id="工作流程改进————形"><a href="#工作流程改进————形" class="headerlink" title="工作流程改进————形"></a>工作流程改进————形</h2><p>为了将IT的工作项目完善的进行预先评估和量化分析，每一项工作类型都可以进行执行周期的管理与规划，尽量减少工作半成品的积压，并且最大化工作成品的“吞吐量”。本文提出需要进行“改进形”计划：</p>
<blockquote>
<p>以两周为周期，进行两个“计划-执行-审核-落实”改进周期，确立项目需要的四大要素：机器、方法、人员与测评。每两周必须做出一些改进，无论任何形式的改进。</p>
</blockquote>
<blockquote>
<p>积压的项目分为三类：需要布伦特参与的项目，可以提高布伦特生产力的项目，其他项目。优先开展后两类项目；对于需要布伦特参与的项目遵循约束点问题解决方案进行优化。</p>
</blockquote>
<p>“改进形”带来的好处：</p>
<ul>
<li>提供一种适用于各种问题或挑战的系统化科学规程；</li>
<li>组织成员普遍养成解决问题的习惯；</li>
<li>通过让经理开展周期性指导，让其向教练和导师的角色转变；</li>
<li>通过让人们每天慢慢进步的方法，形成PDCA（Plan-Do-Check-Action）。</li>
</ul>
<blockquote>
<p>微软IT案例研究《在9个月内实现逆袭：在微软IT部门应用鼓点-缓冲-绳子解决法（译注：即限制驱导式排程法）》，作者是戴维·J．安德森和德拉戈什·杜密特里乌。</p>
<p>当时安德森和杜密特里乌两人都在微软，他们描述了以前那种糟透了的状态。大多数IT从业人员&gt;对那种状态都再熟悉不过了。</p>
<p>❑ 完成业务部门要求的工作耗时过长：平均交付周期是155天。</p>
<p>❑ 对于延误和长交付周期的不满迫使IT管理作出“更多的工作预估”，这让经理们不得不把全部时<br>间都用来做PPT，而不是干实事（因为业务部门的结论是他们没有作出正确的工作预估）。</p>
<p>❑ 不管业务部门提出什么要求，回答永远是“做这件事需要5个月”。</p>
<p>❑ 每项任务都预计在20天内完成，但是没人知道多出的那135天都去哪儿了。</p>
<p>杜密特里乌在报修系统中创建了一个名叫“等待德拉戈什”的新字段（实际上，这个报修系统是微&gt;软缺陷跟踪系统），以及时发现工作阻碍。他很快得出结论，项目团队70%的时间都卡在了别人&gt;那里——也就是说，在70%的时间里，工作都在排队。<br>杜密特里乌认为，他的团队一个月只能完成3项工作，按照这个速度，需要三年才能完成所有的&gt;工作。以下是他提出的对策及其惊人结果。</p>
<p>❑ 他们不再预估工作，而采用根据历史数据得出的实际时间——他们有80个人——报修系统里有多&gt;年的工作记录供他们使用。这样做的结果是开发和测试效率立刻提高了30%。</p>
<p>❑ 他们不再采用成本核算，而采用简单的“基于预算贡献的ROI（Return on Investment，投资&gt;回报率）”。所节省的时间让PM能力立刻提高了20%。</p>
<p>❑ 发现约束点是开发部之后，PM接管了许多开发任务，把开发能力提高了20%。这样做也让开发&gt;人员更加高兴，因为他们可以专心写代码，不用再作任务预估了。</p>
<p>❑ 他们引进了一名可用性专家来调整变更申请表。（他打趣说：“我们得填完4页表格，才能得到&gt;一杯水；我们把4页表格换成2页的，上面还有很多自由格式字段，目的是保证从事这项工作的人&gt;了解其所需的全部信息。”）</p>
<p>❑ 接着他们减少了系统中允许的半成品数量：一开始平均有40到60个未结项目，他们把未结项目&gt;数减少到了5个。</p>
<p>❑ 然后他们创建了工作缓冲区，任何遇到阻碍的开发或测试人员都能在缓冲区里做一些工作。</p>
<p>❑ 交付周期从155天下降到22天。这么短的交付周期让他们创造了一个新的SLA认证（SLA &gt;guarantee）,25天（哇哦！）。</p>
<p>❑ 他们的下一轮生产能力大幅提高来自于增加开发人员数量，因为每两天的开发工作就需要一天&gt;的测试工作。他们提拔了愿意参与开发工作的测试人员，把开发人员和测试人员的比例从1∶1提&gt;高到2∶1。</p>
<p>❑ 上述种种的结果是什么？他们在9个月里完成了整整3年积压下来的工作；对他们服务的需求量&gt;也增加了，然后他们继续在其后的每个月都顺利完成并交付了所有业务部门要求的工作；不仅没&gt;人被解雇，而且很多人还升了职。<br>杜密特里乌说：“我们始终致力于降低交付周期，而不是开发和测试自身的优化，因此我们成功&gt;了。”</p>
<p>这只是详细描述的众多惊人转变之一。难以置信的是，转变主要不是基于自动化，相反，这种不&gt;可思议的改进来自于调整关于工作系统的策略和控制半成品的策略，确保有一个高效的跨职能团&gt;队，让所有事情都为约束点服务，以及管理好工作交接。</p>
</blockquote>
<h1 id="IT工作管理核心思想"><a href="#IT工作管理核心思想" class="headerlink" title="IT工作管理核心思想"></a>IT工作管理核心思想</h1><h2 id="三步工作法"><a href="#三步工作法" class="headerlink" title="三步工作法"></a>三步工作法</h2><p><strong>第一工作法</strong>是关于从开发到IT运维再到客户的整个自左向右的工作流。为了使流量最大化，我们需要小的批量规模和工作间隔，决不让缺陷刘翔下游工作中心，并且不断为了整体目标(相对于开发功能完成率、测试发现&#x2F;修复比率或运维有效性指标等局部目标）进行优化。</p>
<p>必要的做法包括持续构建、集成以及部署，按需创建环境，严控半成品，以及构建起能够顺利变更的安全系统和组织。</p>
<p><strong>第二工作法</strong>是关于价值流各阶段自右向左的快速持续反馈流，放大其效益以确保防止问题再次发生，或者更快地发现和修复问题。这样，我们就能在所需之处获取或嵌入知识，从源头上保证质量。</p>
<p>必要的做法包括：在部署管道中的构建和测试失败时“停止生产线”；日复一日地持续改进日常工作；创建快速的自动化测试套装软件，以确保代码总是处于可部署的状态；在开发和IT运维之间建立共同的目标和共同解决问题的机制；建立普遍的产品遥测技术，让每个人都能知道，代码和环境是否在按照设定的运行，以及是否达到了客户的目标。</p>
<p><strong>第三工作法</strong>是关于创造公司文化，该文化可带动两种风气的形成：不断尝试，这需要承担风险并从成功和失败中吸取经验教训；理解重复和练习是熟练掌握的前提。</p>
<p>尝试和承担风险让我们能够不懈地改进工作系统，这经常要求我们去做一些与几十年来的做法大不相同的事。一旦出了问题，不断重复的日常操练赋予我们的技能和经验，令我们可以撤回至安全区域并恢复正常运作。</p>
<p>必要的做法包括营造一种勇于创新、敢于冒险（相对于畏惧或盲目服从命令）以及高信任度（相对于低信任度和命令控制）的文化，把至少20%的开发和IT运维周期划拨给非功能性需求，并且不断鼓励进行改进。</p>
<h2 id="团队领导力的寓言"><a href="#团队领导力的寓言" class="headerlink" title="团队领导力的寓言"></a>团队领导力的寓言</h2><p>这是帕特里克·兰西奥尼在《团队领导的五大障碍：关于领导力的寓言》（The Five Dysfunctions of a Team: A Leadership Fable）一书中描述的方法。<br>他认为，团队无法达成目标的一个核心诱因是信任缺失。在他的模型中，五大障碍被描述为：</p>
<ul>
<li>信任缺失——不愿在团队中显示弱点；</li>
<li>惧怕冲突——在充满激情的建设性辩论中寻求和谐的假象；</li>
<li>缺乏诚意——假意与团队的决策达成一致，形成模棱两可的公司氛围；</li>
<li>回避问责——面对员工的失职行为，逃避追责，降低了工作标准；</li>
<li>忽视结果——对个人成就、地位和自我价值的关注超过了对团队成功的关注。</li>
</ul>
<p>考虑到开发部和IT运维部之间，以及IT和“业务部门”之间存在着长期、剧烈的部门斗争，我想我们非常需要兰西奥尼先生的教诲以实现开发运维的理想。<br>通常来说，运用兰西奥尼先生方法论的第一步，是领导人要展示自己的弱点（或者起码要从塑造示弱的行为着手）。在《凤凰计划》中，史蒂夫多年来已将这一实践内化于心，并主导了一场关于个人经历的分享活动。</p>
<h2 id="信息安全问题解决思想"><a href="#信息安全问题解决思想" class="headerlink" title="信息安全问题解决思想"></a>信息安全问题解决思想</h2><p>以不对IT系统做过多无用功就保护公司不受审计困扰，才是最终的胜利。而不是一昧的强制加入新的安全补丁，限制IT系统的功能与产出更多的维护问题。正如QA不需要测试不再需要的功能和不可能发生的性能压力，不要犯“眼界的错误”。</p>
<h2 id="优先项目永远优先"><a href="#优先项目永远优先" class="headerlink" title="优先项目永远优先"></a>优先项目永远优先</h2><p>关乎公司存亡的项目永远放在第一位。必要时可以冻结其他项目进度以提供充足的资源，人力和时间。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>运维管理</tag>
      </tags>
  </entry>
  <entry>
    <title>ResumeEN</title>
    <url>/2021/09/16/%E7%94%9F%E6%B4%BB/ResumeEN/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c93115c6e69525ee1a74843feeadf395d1b22411c16fb701b65e2d0e3eeb5fab"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>Resume</title>
    <url>/2021/09/16/%E7%94%9F%E6%B4%BB/Resume/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3ffab2a9edd56ab59e29f42f6e7b3408035f8fb389f98cc740d62b537228c566">6ef9acd99eb5d4fdb18c4065071cc80aa2ab1135d5478c06343710d32f7a9d6076678c068ecf7441075a5ad2fc5165ac59a88c01955f7fc540ac6d2d05a94d3cbfed20799633781d17a329a306f2c9d4afff17bdb3e4bc4370fa04102e074c2fdd39ccf736f9f8b82343da20104b08998dee1cf7dc9327a9ac25745b5c0684b5ec2584fc0c2a93f4585344c60d812fd43c6c34e5622b8bce06a229d13d12c15f7b9b72e6db9ba9947eb8c5f08544159cffe83f3ec0182b2f25fdcfa167ad4a360545741f82df7d32b71b42359116ca14ac5368b4a174ce1f4891796e20b264a54a7b824b1e8f8b83bc466a141232cf7f4077dcf869fe6f0b0e4d1a0c147cf8c24852d5e2375331b71fc9f50ea14474ac9a40225cd9efd4335c136703d60068321f430a7d9a823d04ba1eaab069c51c2226796914eaa6c91b10fde8c8c1617fb8d8458bc4949b522959f3affa050eec5ec8aeae71fa27835b05527c710dd37babb92c7019fc949818f762ceb7b39540391e3d0477fc6467d811f81327db21a635f430cc114a89b91302bf084e895bec2738db0c326b1de60e362496cab8470f20fb82b46cfadf305a340abef1b53a17932e937d9a0b887e5e60968162ca401f930bc3286af39415515bdc879394a7b45cc912836d459e72604ea59e2708994beb9e3aeee22b85ebe1c7ae9ea6842fcc534edeb6b5ead35e6e503e26f0b467c1637fca43a7e3b87e04a7657aff2d97b637b1550a72899cd73a977aca53c7d65f4e06616ed9ad1c0f43446530315b3b75df9b56d6bcb50693684f5b8cd5d59f0b881bc3ddb413bbcbed04a00091b3b4141dd4588abf4207b7bfc9da7b797e579d613d7e6d1bcc977c641ead1231abb323436f489a73bb921d3a8475faf40d4d52126692a8b4ec164b1fe6f79c39b30be693c0be3b1dde14fb790d5fc178fb0e8394bbc38fb69a3f42296dd259f6cc1b87e2d071d459a1158fc68153d5177fe77d8962043c1bbbc8d5a0933931ba69f11ce820dff2857a588f49dab5d19a0a6ea2dbe28d9f461b5cea0bf9f510e49623636c220e2d8c9568f927df26d384b9c4ec5ad43b65db8417bbbb9f11d9fb682361e53c69e07daa0b37d9b7a31776e519b7f2c0d23ac672e76c084ca3ee4e5103df94df504d6238bfcf1a15d9ab6bd2e8a08932d28ac4e60184e7ea3748f19f5bca767ffb2dd85b8b503564275906b8165e39bc78f63916e65f45b2d3edc4a13fc79d5778b0ad9e6f0f859cdac8325ee6f420bec7307baa3e729983ebc373dee5e551ab4d3a28964a202ce0df2e57f733316a2c288a79397722e4e0e831edbdff6fe1a49863197f97e3c4054e7f0cd47f755d66bfcc6ad5889993a9d80963ecd9bf0996a1f8326eb578e29468e12220d6b0bec919c81f21697b7a8e9cd34c47bbc996e4390622c5cc132e56b9699f2b2ca2528e4623d70d322e7eaabc8f718c9557327f4f1694f5e73cef0ab5f0039302674f776c8794dce6cff0f0e593cdb7b28ff175611623fe7d360c88d65ef4931cc1484882f3753f9d9fcb3ff73096e4f596e75a5c142c5b0d54b9b428646d0d8878d324aae77a988440d8cb407733cb4995a850975f53cf35dcca58a1292d60336f1668dbfcac84a87a29217a5a7618ab5c1120e2a29a8d82c7899b23ab274e459a5fb45ad0005f119930d19a12e01e3293215b6f347c0107519420cd38d9ff213896afa0a4ff3d98caab219dc0cf93ade5ada60f23df8c0d6222689676abff6877e205f1dd315ab23fffcd2e38d980e9510596d0244ba89119141574529679c18cb25f01fb78b26d83deaccf431e55afc2bc662d6ad2c7e34dd7b52fc648c339f7f55dc3e25ec2092b7ce53a04dd73bca7400b23bfc5b2fe4cb1fcfe65868860631d994fd8a9fb57aba303fd54053613f59444d2ffccb18577b9722371c9e0e35d68f6f7fac073de57984dbfbcb9283a7d69ed450a310064f1c9e7a8c4957ca8223e9b0ca53678d98d412b7098822cd4a97a6ff92c532b33519d210a17481cfb1e6f4b7d4352072bf744f5be494131c5bcbf32ab2186f051566bb5a3ba065e06bab488486c77583081fc3991d26b75fa981355c9d51b6912e8edabaaa74b4f79a55b063648eaba785aad156082c4e9dd465119e1c0d439692210046b112fcdfb3cbbbdd01a4a7daefea94915087593c9ed6640b258908495fd3b8b0a01183e1d6756f24fcc3aa2d9436c47fbb0f29adfb341adc6cb4f7c3cd1c09a490a5ce539cf97fe5a64424c385e23ebadab4e285462b00be087afbc090589db563051bc2b17968f5262f580326a32228de75424b004c380d5715ed5d950fdebca37d13a4575a29a0efa39c07a2665ac26430e21154a5d49d610f46126b19508eea3aed3944100f512dd8d3d8cdd652469ca7f128aaa859932b0ae4286095550966d700f5996cbb4dd78765ef2d75daa535c106f59342b99712a644eb756105b81b90c41371e84943be2f95677de0828b1064b2c0072a24e692e06f6f01e2dfc4f2cb254382608076cfb367e88025222bc2c5c39d1356a55f69961c5b4347d059cb50cbf40c6a8c3a662041f4c7b199959004e6fe4277e24564c64f335a8f5e899ca03ab9d77a430826cb9d7677fd67dc5e6f9967dd8e1b971ab847ad63a738f3407488f72323b562e3a22eaa93ecb7985996e09327c09b3f1ee16c0351dcaa2b71f626b291573844be0cffb5b9eea30d2978b7ca19918be035f6e2f609d0b23e956b733660e31e6dfa197e8f97591d5fde5eb8793f77573f3157b532b0f78eb04976f8e25980373d43fa6b71c586ff41036e1800d376e8a52037a0aaebea1d72ac265b7cdd17344ac048a8b3d9429db5086b159ae4457e75aab75fc3bfcbed58d211a9416d0f8e8cc18aa807c531cddb4a3816b8105154074613f2459c57ef08e3c56c42f21e0ffece03432faa30f265a33d6ab1bf3816265c7de6d0dac3b530f749ce22af88e24edb7a8e6d93241ece47a4be2120725ae18a883493e2670aebba4468ac357b9488e85bd7730271fdd8539473298708900939902fe3be739dd848fd66cd07d68e7e0be4648a06458055ea9dfad6a05e10af78322e2d874a5d1db51561a4fd60466a8db9128e9e6c1ebcda471754eb27ff85ac7fd5fe5bb599520ddfdff0de01a056aff2ecada2d06b7d6cdd5fab2dfd55cfa738c9380e28fa865bc0597073d5e7bbcf19d3f32d5030627d0214504ebeb00c941fb5577cfad8aeb3277de000b0f59a034069dc1341199318f16a614b7feb3b90a5b97bf29c8a67a59b363474b7893d1811bad7ae29c32aa07d2a3ae5a452f7d60da53ed1b6666177526766b8f75dc84b498371a7cf26fdded7ba904b7e944085bf47e1f6bd5915fd7d1a5b7b6ec1d25b66cc2f19d9807ca470b470f45098b327928e10d13e5cdccb382d54a89ae62e74e52a9067a2932bd56f2ad18e4a0a856c3804ed9b3615fbe0fda39de51c241d951306a5a309562b288d75eecb6a7812190d3c9584000aa18af5f77b39f749d2c389833c8153ef9f6f4c41c98c928999745fa05b1d49fbe60dcab600829d43a62450974f41b5f111e4c45badbf3f40f2c3311dbf679c19a6515c0d2d4a9c122866987d20f17b95c62d43fa054d6f1165182c3f818eefa202f1662dcb84871d2dce0c6859ccfdcaccc7e75d274f82ae1312252a8629e4b6cfd5e6e88cabb1397ec3e93244f12d74f4b666469228e97624953a29b1ee8f7acc8412c6561475b11b35ef59954591718d2cfa17ffef1c703268d0ee9de65d3ed9faeb714f26c00ad0b3d3bb242e1d7b124006012257e969bc91f98110c38f54e1aa66f048b665228c0429510c00536eef7cccd8892e53213943fc512e8091a1b3655c34ba918ed62b56557ed38fa2c15e6bda984e5fcf2359cb545482ddeeb5df3e09f2fdaca1be6b38729b977453fb04f92266555547877481aeab5510b9c4562ccc5a1df79699b6836e201836149a2af1b47d28e977351f17881edbf7211ed55d7dfb248935636667fd88aa1e0bf704c3c10fc8efb149a471e961497fe17cc016c813dd4938b82af3f8501a100bca777e0e2675435ce63a4e04a77275bcfce525f706ab78c6b880b54d08066daf4b02597f95ad8c492b77df67b2d30ef3cd26c038aa1c05d95205fd78e4d5a0fe16a3208f0bbfec1b4306e0ae8ac114e497a0502af68fd4261064cbe02104de951b97b423ba6c5fe29e87b5a50f26714da81199fddaff290e3841c60c9375168a8e432836f0b9914d796b21bea2125783a89973d009cb62189137802d6954096736b1970215338481d8768f0d3847a4e1b25e6fd9bca1c7a25987f7534baac2105621f703e3dcaefccc8737c3568f88f828f953c574bafbc92bfa8de9406aefb715a8fba003b5a9d1c941c13c15e01f54edf393a2744759bf7d078ea726a1cac901a7f4168c9c1d0d4548ab9721bd1812a970823b6398855e15f636e7d6ea3a544a928c6133554f10d36e359b3a265ff7151e689f3916502fefdf8740bad9d3123555a189b4b37ad224be5b584550c93d3a5f1995be5d641a563a442c956abfdf10e7176a34627bb9603c0f8e1fd2448fb17d6fabf83799d1898509b92429cec62f6f0786ef290b73bfe61f3d41aa08ffa5f9608e09fd484a23a249c0e0d26a981186123ff2c68633a83670cae1cbc3d8eac29d949ff706f458ce5eb79c11e13f3f6d4b055027ed1165f7b7caf417e7e7d0ea979105e9a5dceeb48d591126aeafd1f465e323eb5a6cf05910454837a0455ad77f9a750e494878926e6b713397143ac43dd9f9aad220207c5ec15f58efbaf98a372bd6d483165fb10a8d84fed98a1577775d7d10c71c7711de0c477a2240bc9f5bad4aeeec805ae5b8dece8be171ef835e82f3ab6403c55c964e23e2c008f031f8a993fdd6a879fd8a931f4e6ff9d446ee3ba05978b09c087d296df8460c728df33b8cfe614ec82ff6103e0d9ee001ce6a08fb9ab32e7c910a0d6a89dccadd78e257ac2741cf0701bae1eb52169ea8685c6d53a01cd22a64f3decf47ae6c702e4fc4a451ff26ae23592f962e7aeb67dc2d35ac69d045ebe816b3c8f5569dff10cc9ac4c2e39d706f78661182170fa9bb8fff7c8cd85f9742eb927815f70d0684794a4786ea85cd77aab73930c224dd69cfc89e2b3455baef7085c29cb9456a5da7d4128a07e0c50a7f9004e636f2679ac7c6013d1647e2f4ffa6d71dd526d2991cb87e74d90985b7a3037455a4562750e0037c7ab37dd0a792cddd2309fbb6a53d0f00f86eb515fa46c56dd59198e9d8777405c69b5e946d36d435b1487746b8f424c86fdd98cc2ec3696667e4721eda389137522609ebf406250ff8059543e79269041732b3f5dd4d6f189fdb6db3a411ee31a2cddda64e3d348f641e5715ecbe34cc102f8a2f3503b5843da6877ed9962343354865aa6edabba74d955080958d741fbafba9da668bc008fa637bb9ad16327e441357f568c528cf43d390f5142e5c245ceef0b5ebfe674bee28b2424d5a33221347bff0a0e95f02010e698b0db09c5855f76bd5ab38ed571ee37e7edbf5ea4fb9a416047a416a05d90b8a3647178c010477eb7f8ecc93cf4ebb2bc8bbefa6ab07b1da2474296f617fa67beb2b6d84b747f462d3b61030aabdda2e0f0a4213a468914be2b4781f6a3748587cc69d4fc1042c687f3689f883431615876ede9f3aeda257b43ca0ba04a4ae90df44c52529ad9768aec25ea77867605d7fee7d8b9f477a993ad2cfdf539c527de90755b3fd86932081e2bbd71f48eeabdd4c75b66e0cd8ed2d1bb3e5cee241789bf85597f1061a58cd9690307153eef8422331b8d6cd6afa15e263e98a24a0115db1b4f5752b130009b8bc98f68f86fee26895d1ab3cb100d9b3d3aa020f065ef43b7d165096c2dcda6dfd1c775858d997a960f48e62af9f461ae0605b5050db04ccf804be9c3bf65cce4a86686e80fd4d5a00467d6234939a179a05af8bcdfa9ebf17451b613507ee41bcc6f37717c256f508dd75940097945e2d9f37fc219c427352eba4c2a2105e32aa8e1341d47b9aa3e661f09d921470ad596e4c1a44440d4edf81663c792eb28de89cb664deb7bf885c8ccf57bec39d8038599d5066c031674c6760ceeaac0c3b47ca818d7a5ad92a116cd8be3312bb77d7a0bb883de7a4d87eca97bf14dea3b496123579fdc7033a7b8dfe7eae350bb87d988fb0b2ad55e65d069e43ab3fbb7adb639d60667f9f541e4153cfbe2ba96c67aad740dd28ecaaebe03c3f497fb89e74479b4683fe34b5e97668e602208fe4da137c14f80d5f21b986c9539826708f230dd4921b04c090936e3c745679b2724c2f38b91e925b3b67d949e299eef90015c7f96f51a1ed7793c73d52572827a1cdfb7ca8b99d7f277a7b021dc00b2a64f5cec93939f26e963ab01f524299849acd087ac8fc55729e4f81e592627764fc42eee1e1950d0df9f3655874bdf459b6e5210d2fd9e33263b8615ba6db1437e9203aaa4f09901478564e9d6ac5859818642ec044884fcff10cc57f37a2e906c91ca50fb4c932d23255c74702d2d26a58e550aa936a1716682239d46bc1541478f9d6873069207761f0535fb6d98cb4b0b860beec0c69ee725dd5501716269d22dcb45978e55b0ba00cbef8c290d07fe45c6da1982660fdeb6c6b8af5099469804a8cb41baf56d860241cdd37ff6189fcb3c6d01e68b4d3d7af664ea3dc83e3dbf3bb0b8be9e2812e89ca89ab54d1e18418e369618e9c1dd10ce9fd945d2757fe3686383bd59f9bcbe151fed63d1210ba47cdffe3cce486d4ca54304e28b2c695f9fa5636fe7f021f5eaa08b109b1df2e684c0465586b37a92f1348756f6ea9c2cac45a6eafadc783bf1cfa277906c29846d79d701833e3680f1c2b27518dd42da453cca482286e03146641d23896234bf15b559c1075a7ccf8f8887a13d024ce47aa6aec1169cf4a64c1daaa96e44d5b1e1901100d5b880d2404571f9768c2bd5a0c8d66fc40ab486391f86a82f76ea79ee95724f7830a2a31e07a14e2fa6c7fe3d9b8fa8601bfdef12a8e9ac55d9de24a3636665f48fb4e65ea3923f69c01074bc111c18b20baf460465ff0bc0545088348443dd733754249e34977a6bafc4f7549b3af6931981eaa0d7fc4b99bda445696e601662d0019e1628beeebc8e17e31bc7002423f49cc550cc5eea05d8ff0451e0b2a30fbf1931a612e0f907c5c9c56b832a34e0f62c2da8badc24b80adf947fc3dcf6f17a28e92a0560ecda308e4aa7792e0ab619dc00476adba7bb0d015875e2bad7a76a4d4e5a0a2e4f73a83779c6cc5dd4dc45370a3aafef39318da0961ad98a526c681f525cdf8eb8bcbc35ffacf3c94d311e81fa233758a2d0e2c920b0a49818fccd3b86ee068c01e690010c818bfb41c9813d6f13df5d331a2e5cc9a5269d5f75b5c4419179483526af0ea2c2a7fd3c273cc0b23c9037b5a5515f4af4526a43d07c44edf19ad7aa0f0b48a183fee5dae52b8001e3dcea4236f2cd58257f4ec937266883cb0f0f9d42ef1093ffed9f60a8141fe637efb0ceeb6ba3a4aafbdab4cfd784bbf350f68b76f9710da5925e5ed0e787272fbbfb2913062e7c29555fc1fd86960b6522e5894819007b7f4723ca72b196042c8fabea355d0517ea1c47a6a8f3f7b3e158e73dbbe7948bfe5debfb1203f1fed5218510ee2eb822bff12ec768de63c6a79d7dddcdcff80dab664722e700c40235a0c63cf27b2e5844338d0c834217179b44d24056b81e7e79f8885ebd7789d9ee57225f459917bcfc6dfee0bf024f1143ce389618b98b713259344a3213359fc3ea9a65b789b629b5011c415c525ecf417a8baeccb28613d696e3e0359dfea4389bf8c651c1ff026d640d19fb378494d7867c0761735126240b1b0a871ce7c730fa547d8c9c2a1fb32cc8e749c2e54ba5bcd97bd316e474d78e58d085ec651b84c907c3910ec33f62d7ccdd2422ba4ebc8af781f2c4407157038337825ee466e303135b6e211eaedb177f5a88d24613111b83188455a8ee78cc3840991ca238ab6e2936828c3b887dccbf36e7cb165dd7bf81d63f04376e773ed10c4ef45daa137cee330bcac0a55224433400895c17db84e836ba9d46082dbd12094ad16288f25fa7eceecf455eaf2839a2a154dce8db42a56363a0355c5177c7a13eef467b31178290d59add174cc36350fc209b4e107ee3f9b10603e4afa0dc0b95438e8e4d4c2562215f7c365cfeead5805958f9d82e827d6813b00995bce405935be7ab408f9070f32d6bf03bf8e2ad65976c9b85d119ffd90cd59ce29a822f30f4d125da27be53f1d41de2964526d9094132b5e7b9fb3ed4f2bcdfc3a045c4e23300e606c43ef9d1ce3a4a6b26132c03202e9dd298cea3ded367a59587f1a6ad077a9a3fbbe89d042fcc4df90dfee4c713d8b560e42a8d27cc6326f557da75992aeb47153f80a50c036fbefa61a19bd092c9d1e81c26e1c1821a8c52d59bbebb720bedf3f741c10fb5b6aedcf8a254eecdb3a3b2ea9ecd68a49ee7841cc55090bd692940b9d6e210331923d4cc8e494170ff5e2ba38a395a26c3e9761349934794100c3d8e655ca372b56e84913f2a2cd55d5c01c705823e663fa03f945d3b3f480bda14480d87018a29a1c44f635ce34b401ae0a6abc8eada0596fef75a2793148c702c80610a6b7fd583f3a440427a5809c83b178845436432fa679de363874c55a2ebe76016052003a74332e4c2802b164ec3a1a20f58d84c39c87a802b8b1c5170d83a0d8539b2c33e40b98b77be9df7656d444aaa3e4654660537ecc7b10db4681aaa77031dd3ab7f57a789e81051fb42829270566f8b393b40af5a34bde8c4cf741a45571afe16e47a31f9aa44297cdafafe0837a5a6c3163c27eaf909ac20e2456610bde5f28ff43913e33a001d0630ee888314ec07f90e08173c9de9b139c9c667d0f18393382906e2dde26971439454cf41b01474b3682550839a4d97681bcd567b2723ff42acebefa0477cdf3c86fb18eae81d6acd2caad42b153e0b4a5a20d63cdc014168b41f5b0550ff8e44a4415588bbf683325e47efbf3e89cccd8b0c92c08d8f98b4712667017bcff5dcaea60484eef585d7d2c4ef9a28345fd05d494763e98faf3bd282967a5788fae91eaf1c78655e7c917db6a9cb7e4f97ae8d6114e09e3b80428449023aa52a505274d09af87da55aa3e82b484d00ef41cf7cc9a6774fb664396407c64de7267c2928a9632c1d36cb350007e6d46e8e6ea414371f3a65d527f5f5002933e0d3231e2646427035422b4b10257ba8f4a2863e09cc644917726a2cab04ec1ab56fce87a41b54469748262a9bdf30f697220c52cdb4ab31dcaa174307a29df71406f9a654d0181c5b583ed5fb32b68a2d3947aba55d1878efcf83616d7e9e1a1e0935ccd28468167ba89337158d3a0443d5a50ae8ca55fa9558c0ad6c037c5593e5cd6049aae5c2617ae953be963170aa6d3131ee4ef32c2dffa84bfd284a88d0e5cebf49174ae5108d9ec672aaeb2773197d5cbbcc2cecc89bc2c9946115c7429742ad1197a30d7b472fd832b41be71eda44675e846cdb7cc7870f489271254d982a8c918fa99f8c5a705edd1876e1f94868d6fa46bc0e39ea9df54aef9c3292908aab33c010e75d383d6e83245109d837f6038842141de413199a64d6c7eb2a2924e7b802c4fe6a0e2d123beb37413a7b06e7d69115b8854d5effd0f32244067c582e971c7ece553f5d022f147d8c36d47c6c2554fd4d696395e52340adf797bdb8b562292b10299e0c33638f65a8ec8c04ba09bf01a9b668b8d2c6b054914cb6ce863734d02aa353c9ec2adade5d864cc4aa24703de9ea1809cf79f96c400fcee9de8d88be3c6a375279d488a31c0c48c5b0a025e99da849407ae2d37ba6322c92e7ad8b81410c81d9e483ed6640a4734e562d18cd3c9109adae8857e68b346669f3bedeef44c7c365eae852b81e3a7f2a1140c04a29b6553afd31c3d5ff274ead9823b91c0cbd31875fccc8b9faf825995be85a2ff87611933a2f20af6af3fa3b63bb804842573512a062f0d8c2f9ae1c60a598c64988221ef37b0cfbf12b7a2b7273cc0ec59977f4fff57651cd30ac7e9ea96a4d06de1bc41e3eb6eb4fc45a6b5bcc9fe6dbb1baad1fa74601883d0a7758edbb2c9b2ccd14c7b7c39457f8342cfa0c5b95600f131d7032e9cca75c47a5d7cc2ee5ea2e583d7e04c54fcca376b7bd0ea66c9877648143d7890f6a8351d801721d620d5748feddc50e271f2e04782e8482005a8a65c618cb641569178b16abb1ed220fd4addb9e93839fbed9299980e4c6f6b777af5cd6b343148a73710e090ba5aef2f282d9cdf666b306a9e54e31979392779535735e2e4e6b2ee8f836637fbbeee2b893209b13039070de3fb9f99764a76042cb8c28bf00d01ca0c34502ef3de744fee5312049a180e45752acdaf800c5a3b80bbd6beced1e78495c10771b8fa241e74a55d56a74505f468b1a14ad2f45a8cadf7167621608c2bb778d2aa7fe6cc3fc267f9040c146a556014d3be1d5272db5793964c84a589f37e52e94b70ae963a5bc71980aba8eee4acc462013117a7481636e7f308eed1ca1ba9315a67d34138ea93bdd1eafc3338076b0a4897dbd15d3f545f6bcf8e4985cb447fe8938f6490d94c026ba82d9d0f19d60d9336a70b265f7a2063a7d74db342fd8cda833e3ed582981d8ca2e59e339c2f7a00436fb726c11c73d277346cf5487b7ea0f7eb1a860f672c48d8aeecd65be6c0871d646e4bc2603e37f0ef7369810c9356c25937535725ee43d80b0577d512dee30302d50bf307765610bcdfb82fdbc58d989bedc2ada1e609633e16014d4fe011e3818fa9cdc675070701daf0ed2b2634ada8f60dbbfb78b84527b74d07e74f437823739e42bc05c86b4c290fbf9ee34e64c762ea24c02d30a41f9fa361e6a4bdd3670888f8b96d3b596a1b0b6c62ff19518a6fa21620062b24bced254fe91419b793e1d3299dbb7536ee5ec08112411246462bfe75bc06da0203b093ead5327bf6b27da55cbc69ade5c40ee70fd745d6c18eff15265f793a300abe1266e4f43254c4a54acce8d70da2dda89dfe9aa2a803ad58645a62effa579b8aed6a1f738294cffc9c25b290a5044b12cded0285f4f7d30e65f4b5c4b81e557eaa7d39bbd7680a931f1421a92ea0831464c71212754ce3b5b0407267b64714e41111a94a8049c2ce3457a7bc267f1d2a1dfe11cab4851c15d5c0b09af3a1960b2653beea71bb61f636e38f33a3ad425111b3fdcf521ee580ac92023d975ca04dc3e34f506836cd2bd01984b70d3b67fae45ba8af6ffa4a95344e54ebb506ceaf478f6d89607e1b7100421add8b04032eebe40c82d850fd53877897d384bd0c15c398c11a52f18d660da125f517eb0b71d003366fcaa8d763a3f5e9e019d402910161094c2a0ae1bfadd8a5b1bbcf8196d0f58bf2f226787a3d4cf19d868ac44028f5f98c8b6c798c148a9daeb60d6d22e8a3019d776d52ee90be2ee9facf842a2461a9aef84e050a6e96c50c9783864893fe1b5006ce35bb8426aaca8360a6ddcab734390657e228ce1af9e5faf84178934bbd62936902cf2ac8b3c11adcbaf477cd9f4bc7e499fafd2e0c1d7b8a159ec5f84c09238baab59b57c5aa58ed97ec007cdcfda2795f11fef232414ebbddb25c909ec1f2051e014b8d5eec612e54fd576e5f68cfd78ed70df1befac988181bda82b06d928422edae99cada8bb03b6f0b69cb6975b8724c3a16a6acb576b22bffe2ac41986ce4385907ea3c335f125cf30f04509aea80729c147d5ed2b2d84f49b36bde0ba4f53acbe2890770eee64095f45ebf631df14af066b6fa72f500117a696eae5a011c560fb240c8b8a17d65b42f8c476bafe097108a52d84fc59ca35d7d765a6cddb008fb612cd846301fea5add8910ed83ee9ca4369a79a3409d78c8a5f3e375494104f09eb9fa1935f2bad7e9b5ca1bf9497dcf71825a8bbf8874d39a21ae33750b59b00ce54f3d7fbb6fcb49ac401468b19d7b6252dd9a979591aa16febbf53aaf2ad6032a965b46d8579de3aa7b8b9791c12d7281e1d2835adac1560ea5e91d01efe52bc9586f036dcfc9491f3d14ca1afd9b8d7b056da91257545743749f4638c2ebb417ba28545a10bcd4d4e5218ffb3cf9901c7a43f7380b75ae3d5f92a80f8c077814d8fbed6fbc20d6b38e50aacd8e19aa441a7cef5d20ec4c25e4a08672b1a7d0ba4aa8010c654e2065c9f28c31d2631ab9374026e46116d2e049cf66ca01c1d51ad514f278fdf4137a728ea703d234386cc27884de76689cc24534e5ac3c29343c088d2f222779a57d19a60c5a9f6c2fcdb35ff449972b4834a407967155de7c7b8a96704570cc768359900ceabf99e79ab357d764e4951b12f4d1eb1d02831171847835be4fc8a7f2fac235cc3d74caa2d95a0eeafe5374bd59763f83a0a470d63ece63247996787fbd8a5948813d7b5c93ce3c2038f0f1124ee88b3893f18e39ce4645d449aadef51f8f7ead96c713428995a65ea7a235a206793da751238ac48e6c74b15839d0df54c0d50b5ba2669c2e31b573ce33d6a30509252c27fb5f4f70fd0bcb01b8e6ab267cea8c016ee340b46844ede5e725b35c2a93d2196f4b1f4acc91ec204220024a25cc5d642d4d7bb5d0f697782993a587d823bc41b62ec04e57532211fcf1e8e52960ff59df1bede17ad642010e5d1803c582d9b6cd327744e87905fff01bcff665b2d8a91779132cb23c877543feb4592242f28de86bca1fa5185ac3f07540348c73d83995bc97d8c0d5bedea457f4c88b4c31e75b283d630b47e7a148f7f6363c7904086fbf4e3f033a5daed162c2523339f510ba6d4558b74235253cb9b21f113fc573dbde50808b200c7cb35d35f256ce39542a20c1c2364c993c86de426911d5b643e7921e7ada7a1e8ce4668b7d08cd2312e61556d9e77fbae801c5b195e9d305b3a9469a078c2c552c09764ed4ead5f7ef44ad553277447009d750a983570300ac591d4bd4f8557a2038cf729857b0acb25719546a215dd7c6bc2a03efa90f7a296102ccb43ad9ac838cf62673a0de04bf1e6573f3b1a0ad224ad0491108946a4752edb3496364f47bc6fdd1ed087f8c46ebc86dbf4b34490ac6f545f56a0058b32fa2e2ec8653b65cf7ac79ed5901eee777e7a9df5bfa398c0a1c11793cf1972d066d55040c60fd1d7b908adf92432378245d6467141ffb517ecef0b52937ef9d0c60159d207bc08168c2d07017e2e51ccef622eb6cddb196c98080f294f598128f55957e02307c594173282fa72ddd7ee0b6d7c8c82220ef66ac00bdc4114f5b0c1da0f7b4a2a9e2e03d1fc3d0ed732dd17bba7c7a6c9d7a2c6a2e68cde868a6ed2c4ea2322b7b41eef601d549d257d7851ddb4fb5446a74adede736892790aa2267165d399f62eeb5d0ecd72145613c79082cac8263be69dcf77384c32dfd156154f6e50cb0d7ba00731f081eb7baa57f26bbabc819f8780eaf423f63deae24e793aafd4f34fb8f7b0b8ba713b266fcf41f331cd42d31b4b8fa0c23a33be23bd9488258de669360b4c863d17b684d9724bdb23a2287770bbe69577a765602410101bb13625c475382d4dcb82ada0a3306c4a21d8ab3de17e6f1c61dd25d9603f223e53a7e491061cfc7e1598b9f70fa46c5e9df86c9f51f4b4f86ed97b53e4294639a89f011150319e6f7060a82cbad6e43a23ea120df5847765d3f92b28dfa9e56d24da7d357d56dbc8751c29fa9a63693635e52253fa1f440acd5a136da600a51bff9471b9ab3c4f6f89603222889c76c6642140f925c13e59dc75ab2ddd267f3ff9fa90535941259370a81d7e36d5318fc11b44b797a35823fa7b53e3ff12bae68acd2c70b3203afda20852ace6eef35dbdc1a6ef72220de27baa2dcd13bb70122c160840238443baa7432b0a649d0e292a7bb5d0f141c34f426d45382dc2826e82cab6ca59b355c4b449473df6c6b4406e1891b3fe96d603446f727bc8664ca2d5e14ca4505769537b515c42043631f97abaeabb5cce4725d638f18680af96bcae2f595943332bb37d59ada73b3a3efb062e11c6a3f9566128a39aaa19132eeae8557c09430ed13a677667d7a7f4aefe104678b487f10d551f6950338ac83752ea293be04587fee260932384fbd4190bbd2ac374bb03c42ce4db9c157ca88d03bd4a7e1d294b7d474b3f6087f99e43c7442ac6b7184706d6114bd88c4cfdac21e92ed003a266c2a2eb84ffc444957cb4141eafaa872ea95a3b55c7b19fbff9b54ef30a1bb804f902337feed1922251c3f2670d5a068ace2c6bc851534b8a7b14fd074923f0a3dc76b835e0a1bce7affd0458ce72fd0c0318ff9a3e8b3a0b3db130e317b6a44ded27b2e116de5a7d61b8da184fde6caf43a43d7ce6cd2fd24c187cee5fdc95570cb9da4a54ed22305e5db02a5afa92438ed56926d10642fd33fb72173cd33bb4193d9701fd841dbad8bfab84361382a3b2a5f1035d588347aef056cbff976ba249942f8fc149a90ebc751aff55e2efe196f8df2408e2ad01ad8d2b93943d0d774acf8490b7a527c55398de929f3312f3fb9ff12fd4e52a80403f913a322462f99d249a70315f8a1a9498ab3b806c7fbc60489aa67598ba325ac8a83a77505a00dd3f6de4af7eb80ae4d14f827a6ed40d813f00f058a8b51e7f7e801b3a6d6e199c3c605d175c43910eb48a68dc2a37fbb9f51d6823fa07c95279bc00a6027f776bfcb95248ce2f011a173b1f9466b419f8ff1ccda490145db2bf3bed69a5ce3982093014374164e6e5a0ba1545a8fbb221be9fa18632a77a6562c3828e307356bfe4c11247ad1e0ba6d47b57b751006954554591afc38f9e0e612a7c1549539838ab8c3daca03ab44cb0d4b2f921bf27a8efe9400b6b9f30d85203b9ebc6693b62f4eedd367e30a06ff863b4454c2b84632b934c875984c028c86eb1db474c19afbd23576a96e19d7d518158a4ab98cf41d17a361c9804f4651738dbc07e3a2a2c494113c72dc2a6c6aa2a385e47f7b055b1aa6a73ee59dc66f7cedffa06f36632706c876e6cd541db14cfea696c148bf84373fdd6ded6f2eada8625d757b81a258ebe90be711920903ca4cb623c398b69ad97be2973b32ba0544dd4993fcc8c35a3bdac9a0799068c82f554c5731fcf6c99c30b36d8b1a9186018baad540b7e58308f661876104e16a238e3793dac87e58a04d4cda56904a98379c9079c2c224874aa706140bf11b98c56e07366f3407e315558675942ac3da147d4dc1e172a059c1f0cefd3f46312feea927cbc0836561d209b5d2acfe9dc017db56e895b3791bb3152726e868e723a699dba6786965316027bf6010fc91c1a883145ed3e1c482b373d0b268506d753dda87662df84c47f9b4b5c3a48b134af5cb12bc286787d33d8eec80e43d10e2b7aca78de18e193081b0ff5958ba3421e42886e21208361690e377b5aa64e56cdb83457b293ae5156b1d57719688e47ec0d88e8144716d0837e06ad6265d03543f95e81854c914aca003596d4f41d9de5e780b34ee9f6c4a81beb9152d8fb30c370df4905e5c202f5ff50e2be5ba7741c290d7ff866bdbddb44b365afee80fa3bc026f65615d6aafb18ba5292188bd9a8d78a9ca46b2ca42b6abc64b4f92e8ebe8df42a5d82023f83c8000bee592b1e28d3dd05d12e09ae97ccc08a3b249bd44e3aa9ac3e5f11fe737dccf35fd58aa5728099ff9f22f3232a5c08e60d406986069d95c37b8cd9665a9da05bc1288a81c842ec3cced42515bf463e771864cacf6453a3dce0275e1834a0cc82855ac3cb4d70ccec30b600dbbfc4490d0af4f863ad065ab705f1b3b3f9efb30a0a617dc6e719f8e72bfd60920389e894f428f317f9d78635c8032bf188b532ab7f2356d7df8d72ec43a77ca3607f4f3745a775707c27bda0ce34f82ec41fc93605c507a370dca26742bf15bf340b60f2b70c4a9d05baa21641052e3a30197dd0c76fbf235db197d43457d0d97d88670ce9bcd0255f1e2f52a5590ba7ebeb192bdb51727fcd24b2f05f928b2a92ab5933762f29864a272067112cf9aff91d20f51981d58b26b8661d661bddb5e40d6d2effb7166067f933d201492056e0e9bae8206364f5491fc829a4f349acba0720037ccb606fdec7175c49af74a4bded8f09ac6014eb1184c03625633026b945bacd3c4cf2aa3aed23869eb80334a13c4fcbaf59e16236424900e5edc14949caa0e87266ed1daf072327ab2c90b9aca2b9bcb5dba8506041b34e5d6284d908aede4653704c20aac7553a10e5e47c84f29b772aa5d71ff621ba0ced54f6a06e901496d0ac137bc820b7b2abfafc83aed1a4d5c26c8a747b1c60062eb40484dc3d1506b66418b52c291ab6b077d1891f44e60d4d873bfaf716b83d22ef04fe14eaf873e57f9b52fcd9445fca6db2c9b938b74701d94b7a5e3976ad09cf2a4e3e64bcf3f7d434623bb0d03f159801c8828bb3fa7db44bef2d32efb87ea36587d672427ca7612926fd16271c28441db5eebd973155e320244a42f01bc930f4620cf0af175fcaa6b004891366c6a0fdb2d37047eb9c80fb23a5bcdd2af60095420225259e2f233423e83367186a5c2192f546f9b707323cdf95fece0d3335168b09e663f6b642cec1639aaca7f9aefc27ab11cc56a9a89d9629298644e265cfb1cfea96e51c7fe806aca86e61d1e31e3215a43ecf1921cbb2f09154957215a5f83396233a933978eeca9bcf820d8df07807de30bcedab6ab9c961433e69cd7b424e94653e2de57439de1e2b63c0ff70d29621e902e6086a25edc600b1b01cf785e623b24d9b9216fb724a4d919cde237a6d0661953f464764415356f1562cd0405185aa0e81ff6174537c134fbfc236ea0901c8fdb4645e773c3f3310b5400c6e1fa54be2428154c9706ce10dd225fd2f12a995d0391d8b5808276abd955030970d5a9dff54ec45a1ad82e4e923827805a69ebce4d8a2c7ef5a9de05d62cbca9da19745bb1f3c2102289110817ee6fe18c117ffdc9cf918544a8c5c20d84fd9a930781f92ce6f0834d76ab4469d0c5908e7d005321d198cd7cb83aa16d12edca15871cbac3a46cfc5576f77b0a2c005d65ac6ac39ea8bf02182450f9181578aa3a28844fbbda6d9e99b3060b970d5555f8b9361e46c4b1382aec7e86ca97a608b0955f68399fc7756c5a28c228c89f4379bbd0a6393fe980fea91695ec883a8d4ce9ebce006cc152507f7e3936734d33d23e877cb3a16a9723b15b5b60a59eb611e5d8923eea5310fd95c68983116f112e879dce137ea8645c0b686ac6a99207589269155bc4502eafeeb8c2ec11c0d35645e275fd61b452c7ee154ad7e999c727744cd118dd9603d0fca607cb597a9ea34ce861f29db1593ee028c2c74b0b4e205231c9f7ff8bdbbd5d50069d48a82dec7946a23abee9c05dcc98109659612b5ed0b8347fe89f5b07306</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>宝宝成长记录</title>
    <url>/2025/05/26/%E7%94%9F%E6%B4%BB/%E5%AE%9D%E5%AE%9D%E6%88%90%E9%95%BF%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8878d4f24d81cc30369e7d19c897941e4ab42674bddfbc3bb1ab03be9e9a3a94"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>宝宝</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>番茄工作法</title>
    <url>/2021/04/21/%E7%94%9F%E6%B4%BB/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6a08b0ac2c0b79091c71bd816f6aed500668074561fc75d989b24f6b40591782"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure K8S runbook</title>
    <url>/2024/01/31/%E6%9E%B6%E6%9E%84/Cloud/Azure-K8S-runbook/</url>
    <content><![CDATA[<h1 id="Az-Setup-for-a-oc-cluster-in-single-node"><a href="#Az-Setup-for-a-oc-cluster-in-single-node" class="headerlink" title="Az Setup for a oc cluster in single node"></a>Az Setup for a oc cluster in single node</h1><h2 id="Az-Login"><a href="#Az-Login" class="headerlink" title="Az Login"></a>Az Login</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\loginid&gt; az login</span><br><span class="line">A web browser has been opened at https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize. Please <span class="built_in">continue</span> the login <span class="keyword">in</span> the web browser. If no web browser is available or <span class="keyword">if</span> the web browser fails to open, use device code flow with `az login --use-device-code`.</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;cloudName&quot;</span>: <span class="string">&quot;AzureCloud&quot;</span>,</span><br><span class="line">    <span class="string">&quot;homeTenantId&quot;</span>: <span class="string">&quot;85cb24e4-0bcf-4767-b44b-39eae544706e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;bd435e85-b401-48c5-90ad-96dbefac1503&quot;</span>,</span><br><span class="line">    <span class="string">&quot;isDefault&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;managedByTenants&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Visual Studio Professional&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;Enabled&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tenantId&quot;</span>: <span class="string">&quot;85cb24e4-0bcf-4767-b44b-39eae544706e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sunny_hll@hotmail.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Az-Terraform-example"><a href="#Az-Terraform-example" class="headerlink" title="Az Terraform example"></a>Az Terraform example</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\loginid&gt; az ad sp create-for-rbac --role=<span class="string">&quot;Contributor&quot;</span> --scopes=<span class="string">&quot;/subscriptions/bd435e85-b401-48c5-90ad-96dbefac1503&quot;</span></span><br><span class="line">Creating <span class="string">&#x27;Contributor&#x27;</span> role assignment under scope <span class="string">&#x27;/subscriptions/bd435e85-b401-48c5-90ad-96dbefac1503&#x27;</span></span><br><span class="line">The output includes credentials that you must protect. Be sure that you <span class="keyword">do</span> not include these credentials <span class="keyword">in</span> your code or check the credentials into your <span class="built_in">source</span> control. For more information, see https://aka.ms/azadsp-cli</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;414b5739-2c30-4cea-adff-d5c8ff1c6470&quot;</span>,</span><br><span class="line">  <span class="string">&quot;displayName&quot;</span>: <span class="string">&quot;azure-cli-2022-12-09-06-36-24&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;if48Q~Wd6aUHekpKNLrgJWeC3Pr-sstzZHRXfa90&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tenant&quot;</span>: <span class="string">&quot;85cb24e4-0bcf-4767-b44b-39eae544706e&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PS C:\Users\loginid&gt; <span class="variable">$Env</span>:ARM_CLIENT_ID = <span class="string">&quot;414b5739-2c30-4cea-adff-d5c8ff1c6470&quot;</span></span><br><span class="line">PS C:\Users\loginid&gt; <span class="variable">$Env</span>:ARM_CLIENT_SECRET = <span class="string">&quot;if48Q~Wd6aUHekpKNLrgJWeC3Pr-sstzZHRXfa90&quot;</span></span><br><span class="line">PS C:\Users\loginid&gt; <span class="variable">$Env</span>:ARM_SUBSCRIPTION_ID = <span class="string">&quot;bd435e85-b401-48c5-90ad-96dbefac1503&quot;</span></span><br><span class="line">PS C:\Users\loginid&gt; <span class="variable">$Env</span>:ARM_TENANT_ID = <span class="string">&quot;85cb24e4-0bcf-4767-b44b-39eae544706e&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="Az-手动创建VM"><a href="#Az-手动创建VM" class="headerlink" title="Az 手动创建VM"></a>Az 手动创建VM</h2><p>查询VM配置的地区Spot资源不太可用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az vm list-skus --location centralus --resource-type virtualMachines --zone --all --output table</span><br></pre></td></tr></table></figure>

<p>VM Login</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/oc_key.pem loginid@20.100.44.77</span><br></pre></td></tr></table></figure>


<h2 id="Az-部署oc"><a href="#Az-部署oc" class="headerlink" title="Az 部署oc"></a>Az 部署oc</h2><p>CRC setup guide: <a href="https://crc.dev/crc/getting_started/getting_started/using/">https://crc.dev/crc/getting_started/getting_started/using/</a></p>
<p>Maybe install for ubuntu OS:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-keyring</span><br><span class="line">sudo apt install dbus-x11</span><br><span class="line">sudo snap install kubectl --classic</span><br></pre></td></tr></table></figure>

<h3 id="下载CRC"><a href="#下载CRC" class="headerlink" title="下载CRC"></a>下载CRC</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/crc/latest/crc-linux-amd64.tar.xz -o /var/tmp/crc-linux-amd64.tar.xz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>VPN env network setting:</p>
<p><a href="https://github.com/crc-org/crc/wiki/VPN-support--with-an--userland-network-stack">https://github.com/crc-org/crc/wiki/VPN-support--with-an--userland-network-stack</a></p>
<p>!!reset Disk size t0 128G as crcbundle took more than 30G space.</p>
<h3 id="启动CRC"><a href="#启动CRC" class="headerlink" title="启动CRC"></a>启动CRC</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#Started the OpenShift cluster.</span></span><br><span class="line">sudo service haproxy stop <span class="comment"># previously broken haproxy bind 443 port....Orz</span></span><br><span class="line">crc start</span><br><span class="line"></span><br><span class="line">The server is accessible via web console at:        </span><br><span class="line">  https://console-openshift-console.apps-crc.testing</span><br><span class="line"></span><br><span class="line">Log <span class="keyword">in</span> as administrator:</span><br><span class="line">  Username: kubeadmin</span><br><span class="line">  Password: i4GM8-VqA42-8Eqix-pAg7h</span><br><span class="line"></span><br><span class="line">Log <span class="keyword">in</span> as user:</span><br><span class="line">  Username: developer</span><br><span class="line">  Password: developer</span><br><span class="line"></span><br><span class="line">Use the <span class="string">&#x27;oc&#x27;</span> <span class="built_in">command</span> line interface:</span><br><span class="line">  $ <span class="built_in">eval</span> $(crc oc-env)</span><br><span class="line">  $ oc login -u developer https://api.crc.testing:6443</span><br></pre></td></tr></table></figure>

<h3 id="创建oc-hello项目"><a href="#创建oc-hello项目" class="headerlink" title="创建oc hello项目"></a>创建oc hello项目</h3><p>环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crc 命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:$HOME/bin&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="comment"># oc 命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/home/loginid/.crc/bin/oc:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;alias k=kubectl&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;oc login -u developer https://api.crc.testing:6443&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create project </span></span><br><span class="line">oc new-project my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># create http server</span></span><br><span class="line">kubectl create deployment hello-node --image=registry.k8s.io/e2e-test-images/agnhost:2.43 -- /agnhost  netexec --tls-cert-file /home/loginid/test.crt --tls-private-key-file /home/loginid/test.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># expose as service</span></span><br><span class="line">oc expose deployment hello-node --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.baeldung.com/openssl-self-signed-cert</span></span><br><span class="line"><span class="comment"># prepare self-signed key remove -des3</span></span><br><span class="line">openssl genrsa -out test.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># create csr</span></span><br><span class="line">openssl req -key test.key -new -out test.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># sign</span></span><br><span class="line">openssl x509 -signkey test.key -<span class="keyword">in</span> test.csr -req -days 365 -out test.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># upload</span></span><br><span class="line">scp -i ~/.ssh/oc_key.pem /mnt/d/Git/mypages/test.key loginid@hostip:/home/loginid/test.key</span><br><span class="line"></span><br><span class="line">scp -i ~/.ssh/oc_key.pem /mnt/d/Git/mypages/test.crt loginid@hostip:/home/loginid/test.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># create secret https://www.baeldung.com/openssl-self-signed-cert</span></span><br><span class="line">oc create secret generic my-cert --from-file=/home/loginid/test.crt --from-file=/home/loginid/test.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># mount secret for deployment pods</span></span><br><span class="line">oc apply -f deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># create route on haproxy from hostName=oc-dev.centralus.cloudapp.azure.com</span></span><br><span class="line">oc create route passthrough test-pass --service=hello-node --port=8080 --hostname=oc-dev.centralus.cloudapp.azure.com.crc.testing</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="本地服务测试"><a href="#本地服务测试" class="headerlink" title="本地服务测试"></a>本地服务测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># pod DNS</span></span><br><span class="line"></span><br><span class="line">curl https://hello-node-7556f558d-psbrp:8080 -k</span><br><span class="line"></span><br><span class="line"><span class="comment"># service DNS</span></span><br><span class="line"></span><br><span class="line">curl https://hello-node-svc.optimus.svc.cluster.local -k</span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster DNS</span></span><br><span class="line"></span><br><span class="line">curl https://oc-dev.centralus.cloudapp.azure.com.crc.testing -k -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="远程连接admin-console"><a href="#远程连接admin-console" class="headerlink" title="远程连接admin console"></a>远程连接admin console</h3><p><a href="https://www.redhat.com/en/blog/accessing-codeready-containers-on-a-remote-server">https://www.redhat.com/en/blog/accessing-codeready-containers-on-a-remote-server</a></p>
<p>在服务器端，需要利用haproxy做外部网卡IP的端口转发到内部地址127.0.0.1，建立外网网卡与内网之间的网桥.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install haproxy</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">cp</span> /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上一下端口转发规则</span></span><br><span class="line"></span><br><span class="line">frontend apps</span><br><span class="line">    <span class="built_in">bind</span> SERVER_IP:80</span><br><span class="line">    <span class="built_in">bind</span> SERVER_IP:443</span><br><span class="line">    option tcplog</span><br><span class="line">    mode tcp</span><br><span class="line">    default_backend apps</span><br><span class="line"></span><br><span class="line">backend apps</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option ssl-hello-chk</span><br><span class="line">    server webserver1 CRC_IP check</span><br><span class="line"></span><br><span class="line">frontend api</span><br><span class="line">    <span class="built_in">bind</span> SERVER_IP:6443</span><br><span class="line">    option tcplog</span><br><span class="line">    mode tcp</span><br><span class="line">    default_backend api</span><br><span class="line"></span><br><span class="line">backend api</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option ssl-hello-chk</span><br><span class="line">    server webserver1 CRC_IP:6443 check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SERVER_IP=$(hostname --ip-address)</span><br><span class="line"><span class="built_in">export</span> CRC_IP=$(crc ip)</span><br><span class="line">sudo sed -i <span class="string">&quot;s/SERVER_IP/<span class="variable">$SERVER_IP</span>/g&quot;</span> haproxy.cfg</span><br><span class="line">sudo sed -i <span class="string">&quot;s/CRC_IP/<span class="variable">$CRC_IP</span>/g&quot;</span> haproxy.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务haproxy</span></span><br><span class="line">sudo ststemctl start haproxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 诊断</span></span><br><span class="line"></span><br><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure>

<h3 id="Java-API创建Route资源"><a href="#Java-API创建Route资源" class="headerlink" title="Java API创建Route资源"></a>Java API创建Route资源</h3><h4 id="Useful-Code-example"><a href="#Useful-Code-example" class="headerlink" title="Useful Code example"></a>Useful Code example</h4><p><a href="https://github.com/kubernetes-client/java/wiki/3.-Code-Examples">https://github.com/kubernetes-client/java/wiki/3.-Code-Examples</a></p>
<h4 id="Leader-Election-Example"><a href="#Leader-Election-Example" class="headerlink" title="Leader Election Example"></a>Leader Election Example</h4><p><a href="https://github.com/kubernetes-client/java/blob/master/examples/examples-release-18/src/main/java/io/kubernetes/client/examples/LeaderElectionExample.java">https://github.com/kubernetes-client/java/blob/master/examples/examples-release-18/src/main/java/io/kubernetes/client/examples/LeaderElectionExample.java</a></p>
<h2 id="安装-Helm-到-oc-dev的crc-cluster上"><a href="#安装-Helm-到-oc-dev的crc-cluster上" class="headerlink" title="安装 Helm 到 oc-dev的crc cluster上"></a>安装 Helm 到 oc-dev的crc cluster上</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash</span><br><span class="line"></span><br><span class="line">huangsun@oc-dev:~$ helm version</span><br><span class="line">version.BuildInfo&#123;Version:<span class="string">&quot;v3.18.1&quot;</span>, GitCommit:<span class="string">&quot;f6f8700a539c18101509434f3b59e6a21402a1b2&quot;</span>, GitTreeState:<span class="string">&quot;clean&quot;</span>, GoVersion:<span class="string">&quot;go1.24.3&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="helm-chart-开源仓库"><a href="#helm-chart-开源仓库" class="headerlink" title="helm chart 开源仓库"></a>helm chart 开源仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add stable https://charts.helm.sh/stable</span><br><span class="line">helm search repo stable</span><br></pre></td></tr></table></figure>

<h3 id="helm-创建一个release"><a href="#helm-创建一个release" class="headerlink" title="helm 创建一个release"></a>helm 创建一个release</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建一个空release</span></span><br><span class="line">helm create gsm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成目录</span></span><br><span class="line"></span><br><span class="line">huangsun@oc-dev:~/helm$ <span class="built_in">cd</span> gsm/</span><br><span class="line">huangsun@oc-dev:~/helm/gsm$ <span class="built_in">ls</span></span><br><span class="line">Chart.yaml  charts  templates  values.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># intall release</span></span><br><span class="line"></span><br><span class="line">huangsun@oc-dev:~/helm$ helm install myapp gsm</span><br><span class="line">NAME: myapp</span><br><span class="line">LAST DEPLOYED: Sun Jun  1 10:07:23 2025</span><br><span class="line">NAMESPACE: optimus</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">NOTES:</span><br><span class="line">1. Get the application URL by running these commands:</span><br><span class="line">  <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace optimus -l <span class="string">&quot;app.kubernetes.io/name=gsm,app.kubernetes.io/instance=myapp&quot;</span> -o jsonpath=<span class="string">&quot;&#123;.items[0].metadata.name&#125;&quot;</span>)</span><br><span class="line">  <span class="built_in">export</span> CONTAINER_PORT=$(kubectl get pod --namespace optimus <span class="variable">$POD_NAME</span> -o jsonpath=<span class="string">&quot;&#123;.spec.containers[0].ports[0].containerPort&#125;&quot;</span>)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Visit http://127.0.0.1:8080 to use your application&quot;</span></span><br><span class="line">  kubectl --namespace optimus port-forward <span class="variable">$POD_NAME</span> 8080:<span class="variable">$CONTAINER_PORT</span></span><br><span class="line"><span class="comment">#查看pod状态</span></span><br><span class="line">huangsun@oc-dev:~/helm$ k get po</span><br><span class="line">NAME                         READY   STATUS    RESTARTS      AGE</span><br><span class="line">hello-node-7556f558d-psbrp   1/1     Running   4             537d</span><br><span class="line">myapp-gsm-7f8b95f4-g856s     0/1     Error     3 (29s ago)   50s</span><br><span class="line"><span class="comment">#查看release状态</span></span><br><span class="line">huangsun@oc-dev:~/helm$ helm list</span><br><span class="line">NAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION</span><br><span class="line">myapp   optimus         1               2025-06-01 10:07:23.835586443 +0000 UTC deployed        gsm-0.1.0       1.16.0</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Authentication</title>
    <url>/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/</url>
    <content><![CDATA[<h1 id="Authentication服务鉴权机制"><a href="#Authentication服务鉴权机制" class="headerlink" title="Authentication服务鉴权机制"></a>Authentication服务鉴权机制</h1><p>用户在访问系统或者服务时，服务器端需要验证用户是否拥有访问的权力，这个过程称为鉴权。在服务器-客户端架构的软件系统中，当一个没有经过鉴权的用户登录时，服务器可能会返回鉴权请求。鉴权是一种客户端和服务器协同认证的方式，有多种方式可以实现：</p>
<ul>
<li>HTTP Basic Authentication</li>
<li>session-cookie</li>
<li>Token 验证(JWT)</li>
<li>OAuth(开放授权)</li>
</ul>
<h1 id="HTTP-Basic-Authentication"><a href="#HTTP-Basic-Authentication" class="headerlink" title="HTTP Basic Authentication"></a>HTTP Basic Authentication</h1><p>HTTP认证时一种无状态的认证模式，因此用户在提供相关凭据的请求中能够得到认证用户的访问，而服务器本身在接下来的请求中并不能持续保持登录状态。</p>
<p>HTTP基本认证的具体流程如下:</p>
<p>在你访问一个需要HTTP Basic Authentication的URL的时候，如果你没有提供用户名和密码，服务器就会返回401，返回Header中会包含类似”WWW-Authenticate: Basic realm&#x3D;”test””信息。如果你直接在浏览器中打开，浏览器会弹出对话框提示你输入用户名和密码。</p>
<p>要在发送请求的时候添加HTTP Basic Authentication认证信息到请求中，有两种方法:</p>
<ol>
<li>在请求头中添加Authorization信息：Authorization: “Basic {用户名:密码}的base64加密字符串”。</li>
<li>在url中添加用户名和密码。</li>
</ol>
<p>其中，鉴权机制中的身份验证并非一定要依赖Basic方式的用户名密码作为凭据，可以通过如下方式：</p>
<ol>
<li><p>“WWW-Authenticate: Negotiate” SPNEGO协议,支持Kerberos, NTLM点对点认证方式完成。在协商过程中：</p>
<ul>
<li>可以请求 Authorization: Negotiate {kerberos票据}进行Kerberos验证</li>
<li>或者也能读取返回头中的 Authorization: Negotiate NTLMSSP{八字节质询码} ，并在请求头部中加入 Authorization: Negotiate NTLM{加密的质询码和明码用户名}</li>
</ul>
</li>
<li><p>“WWW-Authenticate: Digest realm&#x3D;”test”,qop&#x3D;”auth”,nonce&#x3D;”{md5加密时间},opaque&#x3D;”{不透明字符串}”摘要认证协议，能避免明文传输数据。</p>
<ul>
<li>在请求中需要加入 Authoriztion: Digest username&#x3D;”guest”,realm&#x3D;”test”,nonce&#x3D;”{同上},qop&#x3D;”auth”,nc&#x3D;”00000001”,response&#x3D;”{通过md5加密的user paswd httpmethod uri等信息}”,cnonce&#x3D;”{客户端提供的非明文字符串}”,uri&#x3D;”{uri信息}”</li>
<li>服务器需要检查时间在允许范围内，而且response匹配本地生成值。使用MD5算法的优势在于可以很快正向哈希，而无法短时间内逆向哈希得出用户密码等信息。</li>
</ul>
</li>
</ol>
<h1 id="session-cookie鉴权"><a href="#session-cookie鉴权" class="headerlink" title="session-cookie鉴权"></a>session-cookie鉴权</h1><p>Session是HTTP协议中为了支持有状态的通信而发明的会话机制，本质上是通过服务器为用户建立sessionid从而保证用户的状态信息能够在服务器端保存。用户不需要反复进行登录认证就能保持会话。</p>
<p>而Cookie则是一种特殊的HTTP头部，能够在HTTP通信中保存一定的用户信息，如sessionid从而达到认证用户的目的。由于Cookie本身是针对某一域名而产生的，所以在发送Cookie过程中必须提供正确域名的sessionid才行。</p>
<p>具体流程如下：</p>
<p><img src="/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/CookieAuth.jpg" alt="cookieAuth"></p>
<p>Cookie鉴权常用Single Sign On场景，例如，于对于企业中的不同子域名的验证，可以通过结合SAML, CAS等协议完成。对于不同网络更加广泛的第三方验证则有OIDC协议支持。</p>
<h1 id="Token-验证-JWT"><a href="#Token-验证-JWT" class="headerlink" title="Token 验证(JWT)"></a>Token 验证(JWT)</h1><p>Token验证方式和Seesion验证方式很类似，不同的是Token本身包含一些有意义的信息：用户名、密码、过期时间等。Token本身由服务器签发，客户端请求的发送中需要包含 Authorization : JWT “{jwt token}”，服务器提取token信息通过相同的算法验证即可。相较于Session验证方式节约了分布式系统中服务器存储sessionid和用户信息的开销，只需要服务器拥有相同的密钥即可。</p>
<p>具体流程如下:</p>
<p><img src="/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/TokenAuth.png" alt="tokenAuth"></p>
<p>JWT(json-web-token)算法细节：</p>
<p>JWT由三部分”{header}.{payload}.{signature}’,两种算法生成，公式如下：<br>    signature &#x3D; sha256(base64(header)+’.’+base64(payload),{服务器密钥})</p>
<ol>
<li>header包含算法和类别信息, </li>
<li>payload为加密部分，包含公有声明和私有声明，公有声明为约定的key，私有为公司定制key，</li>
<li>signature，算法签名。</li>
<li>sha256为header中写的加密算法，基于服务器密钥生成不同的加密签名,具有不可逆性</li>
<li>base64为编码算法，可逆运算</li>
</ol>
<h1 id="OAuth2-x2F-OIDC认证"><a href="#OAuth2-x2F-OIDC认证" class="headerlink" title="OAuth2&#x2F;OIDC认证"></a>OAuth2&#x2F;OIDC认证</h1><p>OIDC 即Open ID Connect, 是一种基于OAuth2授权流程，并且扩展了身份认证层的一种新的认证机制。</p>
<p>OIDC认证模型主要包含如下四个角色和一个令牌（完整术语参见<a href="http://openid.net/specs/openid-connect-core-1_0.html#Terminology%EF%BC%89%EF%BC%9A">http://openid.net/specs/openid-connect-core-1_0.html#Terminology）：</a></p>
<ul>
<li>EU用户：End User：一个人类用户。</li>
<li>RP客户端：Relying Party ,用来代指OAuth2中的受信任的客户端，身份认证和授权信息的消费方；</li>
<li>OP认证服务器：OpenID Provider，有能力提供EU认证的服务（比如OAuth2中的授权服务），用来为RP提供EU的ID Token身份认证信息和Access Token访问令牌；</li>
<li>UE用户资源服务器：UserInfo Endpoint用户信息接口（受OAuth2保护），当RP使用Access Token访问时，返回授权用户的信息，此接口必须使用HTTPS。</li>
<li>ID Token认证令牌：JWT格式的数据，包含EU身份认证的信息。通过OP提供。</li>
</ul>
<p>认证流程如下：</p>
<p><img src="/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/OIDCAuth.jpg" alt="OIDCAuth"></p>
<p>其中，UserIndo EndPoint是一个受OAuth2保护的资源。在RP得到Access Token后可以请求此资源，然后获得一组EU相关的Claims，这些信息可以说是ID Token的扩展，比如如果你觉得ID Token中只需包含EU的唯一标识sub即可（避免ID Token过于庞大），然后通过此接口获取完整的EU的信息。此资源必须部署在TLS之上。</p>
<p>OIDC的支持的授权流程如下：</p>
<ol>
<li>Authorization Code(授权码模式)：使用OAuth2的授权码来换取Id Token和Access Token。</li>
<li>Implicit (简化模式)：使用OAuth2的Implicit流程获取Id Token和Access Token。</li>
<li>Hybrid(混合模式)：混合Authorization Code +Implicit。</li>
</ol>
<h2 id="OAuth2授权模型"><a href="#OAuth2授权模型" class="headerlink" title="OAuth2授权模型"></a>OAuth2授权模型</h2><p>OAuth2的授权模型时为了已登录用户通过第三方应用访问资源服务器进行授权的流程，授权模型和OIDC相似，包含如下四个角色:</p>
<ul>
<li>资源拥有者（User） - 指应用的用户，比如github的一个账户拥有者</li>
<li>认证服务器 （Authorization Server） - 提供登录认证接口的服务器，比如：github等</li>
<li>资源服务器 （Resources Server） - 提供资源接口及服务的服务器，通常和认证服务器是同    一个应用。</li>
<li>第三方客户端（Client） - 第三方应用，希望使用资源服务器提供的资源，比如你的一个支持通过github账户登录的应用</li>
<li>服务提供商(Provider): 认证服务和资源服务归属于一个机构，该机构就是服务提供商，比如github公司</li>
</ul>
<p>OAuth2具有四种授权模式，下文将分述这四种模式具体流程：</p>
<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>
<h3 id="授权码模式-最为常见"><a href="#授权码模式-最为常见" class="headerlink" title="授权码模式(最为常见)"></a>授权码模式(最为常见)</h3><ol>
<li>用户访问客户端应用</li>
<li>引导用户到认证服务器进行登录（此步骤需要携带客户端应用的clientId，可以是html直接转发认证服务器），用户输入用户名、密码</li>
<li>认证成功后，认证服务器向客户端应用发一个授权码code</li>
<li>客户端应用拿着授权码code，和clientId，clientSecret，去换取access_token</li>
<li>返回access_token给客户端应用</li>
</ol>
<p><img src="/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/AuthorizationCodeOAuth.png" alt="AuthorizationCodeOAuth"></p>
<p>这种场景下，用户名、密码、客户端应用信息，都没有直接暴露在浏览器，是web下是最安全的。</p>
<h3 id="简化模式"><a href="#简化模式" class="headerlink" title="简化模式"></a>简化模式</h3><p>授权码模式的简化，用户认证成功后，直接将token返回给浏览器。因为某些应用没有前端服务器，只有一堆静态的html（很少见），这种模式，一般不用。</p>
<p><img src="/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/ImplicitOAuth.png" alt="ImplicitOAuth"></p>
<h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p>适用场景：手机app ，这个客户端应用是你完全可以信任的，你的app就是自己公司开发的。但是这个模式并不适合在web场景下用，在web下，用户名密码并不是直接填给自己写的应用的，而是填在浏览器呈现的一个页面上的，这个浏览器是客户端应用的一个代理，浏览器是没法保证安全性的。</p>
<p><img src="/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/PasswordOAuth.png" alt="PasswordOAuth"></p>
<h3 id="客户端证书模式"><a href="#客户端证书模式" class="headerlink" title="客户端证书模式"></a>客户端证书模式</h3><p>客户端应用直接发 clientId、clientSecret给认证服务器，发的令牌是针对客户端应用的，不是针对用户的。跟没授权一样，令牌不能识别用户身份。</p>
<p><img src="/2024/06/03/%E6%9E%B6%E6%9E%84/Web/Authentication/ClientCertOAuth.png" alt="ClientOAuth"></p>
<h1 id="Authentication实战"><a href="#Authentication实战" class="headerlink" title="Authentication实战"></a>Authentication实战</h1><p>本章将着重描述如何在java springboot应用中实现相应的认证流程。springboot提供了一站式应用的开发模式，但是认证流程是需要spring security，同时具体的认证核心模块需要spring securty keberos或者spring security oauth组件支持。下文将主要介绍如何利用这两个模块实现具体的基于siteminder&#x2F;spnego&#x2F;oauth协议的认证流程。</p>
<h2 id="siteminder-sso-preauth"><a href="#siteminder-sso-preauth" class="headerlink" title="siteminder sso + preauth"></a>siteminder sso + preauth</h2><p>Siteminder是企业级认证产品，它提供了一站式认证中间件，从应用开发者的角度来看，就是采用了外部认证系统，应用不需要重新进行认证而是可以直接从siteminder处理过的http request header中提取SM_USER中拿到userprincipal()。因此从spring securty框架的角度之需要直接读取认证后的信息，而不需要再对request进行认证验证。这通常是一种企业内网用户认证采用的sso机制，因为用户之需要进行简单认证后就能得到对多种内部webapp的访问toekn，而且不需要进行细粒度的鉴权的场景适合大部分内部应用，但是，因为外部网站可容易会被假的header所欺骗，安全性较差而不会采用这种方式进行验证。</p>
<h2 id="spnego-auth"><a href="#spnego-auth" class="headerlink" title="spnego auth"></a>spnego auth</h2><p>SPNEGO是微软设计的一种企业级认证协议，底层支持多种token协议，因此是应用proid常用的一种方式，因为应用的id会常常跑在不同的window&#x2F;linux环境，而spnego能够支持多种密钥认证从而对跨系统认证能有很好的支持，这种认证方式需要用户自己执行认证检查，所以需要spring-security-keberos模块的相关auth provider进行验证。</p>
<h2 id="oidc-oauth2-ping-federate"><a href="#oidc-oauth2-ping-federate" class="headerlink" title="oidc oauth2 + ping federate"></a>oidc oauth2 + ping federate</h2><p>oauth标准的实现一般是用oidc协议，spring security oauth2拥有对oauth2标准的鉴权模型的实现，并且可以通过适当的配置完成oidc用户验证。oauth单独并不能完成验证鉴权功能，需要部署一个oauth provider例如云服务商azure AD等，企业级内部可以自己部署ping federate服务器完成auth信息提供功能，并且向下兼容sso（即open Id）功能。</p>
<h3 id="Ping-Identity是支持OIDC和OAuth2标准的企业化产品"><a href="#Ping-Identity是支持OIDC和OAuth2标准的企业化产品" class="headerlink" title="Ping Identity是支持OIDC和OAuth2标准的企业化产品"></a>Ping Identity是支持OIDC和OAuth2标准的企业化产品</h3><p>以<a href="https://abc.com作为签发域名，PingIdentity具体支持方式如下：">https://abc.com作为签发域名，PingIdentity具体支持方式如下：</a></p>
<ul>
<li>openid配置查询Url：<a href="https://abc.com/.well-known/openid-configuration">https://abc.com/.well-known/openid-configuration</a> 返回json配置提供相关的认证终端信息，例如：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://abc.com&quot;</span><span class="punctuation">,</span> <span class="comment">// </span></span><br><span class="line">  <span class="attr">&quot;authorization_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://abc.com/as/authorization.oauth2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://abc.com/as/token.oauth2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;revocation_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://abc.com/idp/userinfo.openid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;introspection_endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://abc.com/as/inrospect.oauth2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jwks_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://abc.com/pf/JWKS&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outh_jwks_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://abc.ocm/ext/oauth/JWKS&quot;</span><span class="punctuation">,</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">&quot;scopes_supported&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;phone&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;openid&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;profile&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;claims_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;email&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;email_verified&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;family_name&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;given_name&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;preferred_username&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sub&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;grant_types_supported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;implicit&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;authorization_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;refresh_token&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;client_credentials&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>authorization_code 授权码流程</li>
</ul>
<ol>
<li>用户发起请求到授权码endpoint：</li>
</ol>
<p>打开chrome.exe，发起 GET <a href="https://abc.com/as/authorization.oauth2?client_id=foo&response_type=code&redirect=https://abc.com/real/docs/&scope=openid">https://abc.com/as/authorization.oauth2?client_id=foo&amp;response_type=code&amp;redirect=https%3A%2F%2Fabc.com%2Freal%2Fdocs%2F&amp;scope=openid</a> 请求</p>
<p>Chrome界面 redirect to url: <a href="https://abc.com/real/docs/?code=XXXXXXXXXXXXXXXXXX">https://abc.com/real/docs/?code=XXXXXXXXXXXXXXXXXX</a> 获得授权码。</p>
<ol start="2">
<li>用户用返回授权码发起token请求：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -k --data <span class="string">&quot;grant_type=authorization_code&quot;</span> --data <span class="string">&quot;client_id=foo&quot;</span> --data <span class="string">&quot;code=xxxxxxx&quot;</span> --data <span class="string">&quot;redirect_uri=https://abc.com/real/docs/&quot;</span> https://abc.com/as/token.oauth2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回token json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id_token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">7200</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>用户刷新过期token请求：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -k --data <span class="string">&quot;grant_type=refresh_token&quot;</span> --data <span class="string">&quot;client_id=foo&quot;</span> --data <span class="string">&quot;refresh_token=XXXXXXXXXX&quot;</span> --data <span class="string">&quot;redirect_uri=https://abc.com/real/docs/&quot;</span> https://abc.com/as/token.oauth2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>JWT 验证流程：</li>
</ul>
<ol>
<li><p>对于RSA加密算法加密的token，需要公私钥才能进行加解密。 “jwks_uri”: “<a href="https://abc.com/pf/JWKS">https://abc.com/pf/JWKS</a>“, 认证服务器会用私钥将内容加密并且作为jwt的签名部分签发给客户端，资源服务器拿到jwt token后，需要用公钥解密签名，并且和明文的payload的进行比较确认没有篡改则为有效。整个算法过程有已有的实现例如jose4j。</p>
</li>
<li><p>对于对称加密算法的token，假设资源服务器和认证服务器都已经知道密钥内容，客户端拿到jwt token后，资源服务器需要利用密钥进行解密，并且验证payload的合法性即可。</p>
</li>
</ol>
<h2 id="Jetty-Session-Model"><a href="#Jetty-Session-Model" class="headerlink" title="Jetty Session Model"></a>Jetty Session Model</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Authentication</tag>
        <tag>Microservice</tag>
      </tags>
  </entry>
  <entry>
    <title>Microservices Deployment via Docker/K8S</title>
    <url>/2025/06/23/%E6%9E%B6%E6%9E%84/Cloud/Microservices-Deployment-via-Docker/</url>
    <content><![CDATA[<p>微服务是可以快速构建、修改和部署到独立生产环境中的小型代码单元。可以快速进行迭代开发和交付，从而部署应该也具有如下特征：</p>
<ul>
<li>自动的——部署应该是能全部自动化的。</li>
<li>可重复的——部署流程是可以重复的，不因开发人员或环境变化而影响</li>
<li>完整的——部署成果应该是一个完整的虚拟机或者容器镜像（Docker），能够自包含运行</li>
<li>不可变的——服务镜像一旦构建运行时配置不应该被修改，修改应该从代码提交开始</li>
</ul>
<h1 id="云原生——Docker容器技术"><a href="#云原生——Docker容器技术" class="headerlink" title="云原生——Docker容器技术"></a>云原生——Docker容器技术</h1><p>容器是镜像的运行时实例。容器虚拟化操作系统资源，容器引擎划分操作系统资源（比如进程树，文件系统，网络栈等），将其打包到成为容器的虚拟操作系统中，运行一个应用。<br>容器技术不同于Hypervisor技术，后者将物理资源划分为虚拟机的虚拟版本，前者将操作系统本身划分为容器的虚拟版本。</p>
<h2 id="容器镜像构建"><a href="#容器镜像构建" class="headerlink" title="容器镜像构建"></a>容器镜像构建</h2><p>Dockerfile是镜像构建的描述文件，以易于阅读的格式准确描述了应用及其依赖。Dockerfile由一系列指令组成，每条指令构建镜像的一层。镜像构建的基础目录就是Dockerfile所在的目录。</p>
<p>Dockerfile的构建指令包括：</p>
<ul>
<li>FROM：指定基础镜像</li>
<li>RUN：在容器中执行命令</li>
<li>COPY：复制文件到容器中</li>
</ul>
<p>元数据指令包括：</p>
<ul>
<li>MAINTAINER：镜像作者</li>
<li>LABEL：镜像标签</li>
<li>EXPOSE：容器对外暴露的端口</li>
<li>ENV：环境变量</li>
<li>ENTRYPOINT：容器启动时执行的命令</li>
<li>CMD：容器启动时执行的命令</li>
<li>VOLUME：容器数据卷</li>
</ul>
<p>Docker镜像的构建是分层叠加文件系统的过程，每条指令构建一层，镜像构建完成后，可以运行容器。文件是增量叠加的，删除上层镜像中的文件目录并不能真正的删除文件本身，而是在顶层layout中将文件隐藏，所以镜像文件并不能真正的变小。</p>
<ul>
<li>docker inspect命令可以查看镜像的构建过程，包括每一层构建的layer文件和指令。</li>
<li>docker build命令可以逐行解析运行dockerfile构建镜像。</li>
<li>docker history命令可以查看构建镜像的所有指令。</li>
</ul>
<h3 id="多段构建"><a href="#多段构建" class="headerlink" title="多段构建"></a>多段构建</h3><p>多段构建有多个FROM命令，每一个FROM命令都会构建一个WORKINGDIR，以及一个独立的镜像，这为灵活运用镜像构建WORKSPACE提供了能力，甚至最终的运行时镜像可以引用完全不同的净化的base image，从而构建出与开发环境完全不同的运行时镜像。</p>
<p>同时也可以用 –target prod-client -f Dockerfile-final来灵活指定构建生产环境的客户端镜像。</p>
<h2 id="容器网络栈虚拟化"><a href="#容器网络栈虚拟化" class="headerlink" title="容器网络栈虚拟化"></a>容器网络栈虚拟化</h2><p>Docker网络是基于容器网络模型的开源可插拔架构。libnetwork是CNM的实现，提供了docker的核心网络能力。Linux OS层面提供网络虚拟化的基础是VLAN，这是对eth0的拆分，每个VLAN都是一个独立的虚拟网络绑定到eth0.100等等，每个VLAN的流量都是隔离的，这是因为网桥间的隔离。Docker网络虚拟化基于VLAN，但是VLAN的隔离粒度是二层，而Docker网络虚拟化可以支持三层隔离，即每个容器可以拥有独立的IP地址，从而实现容器之间的子网隔离，也就是说在VLAN内部，即使可以将容器放在不同的子网段，保证网络间的相互通信。</p>
<h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><p>对于操作系统能L2的链路设计，是基于802.11Q扩展协议，让网卡从硬件上支持虚拟化，从而实现VLAN的隔离。VLAN不直连，并不代表两边的容器不同相互通信，如果VLAN是连向公网的，就可以通过公网通信。</p>
<h3 id="VNET"><a href="#VNET" class="headerlink" title="VNET"></a>VNET</h3><p>虚拟子网一般是一个私网，类似于一个k8s cluster的所有容器都会在同一个VNET中，对于集群向外的通信，不要一个网关（也就是路由器）同时拥有私网IP（一般是网关IP）和公网IP（普通IP）从而可以建立路由规则，将私网向外访问的流量转发到网关，转发出去。类似于cluster的Egress IP。Ingress则是负载均衡的入口，对于外网的客户端，需要访问clkuster内部的应用，必须通过Ingress负载均衡反向代理流量进入容器，从而达到通信的目的，客户端只能发现到Ingress的IP。</p>
<h2 id="容器运行时"><a href="#容器运行时" class="headerlink" title="容器运行时"></a>容器运行时</h2><p>runc是开放容器计划OCI运行时规范的实现。它的任务是与底层OS交互，启动和停止容器，docker每个容器都是runc创建的。OCI包括镜像规范，运行时规范，分发规范。</p>
<p>containerd管理容器的生命周期，包括拉取镜像和管理runc实例。</p>
<p>dockerd执行更高级别的任务，如暴露docker API，管理镜像，管理卷，管理网络等。</p>
<pre class="mermaid">flowchart TD;

    A[runc内核级工作] --> B[containerd容器生命周期管理]
    B --> C[Docker守护进程CLI/API/Image/Network/Storage]</pre>

<h1 id="云原生——K8S容器编排技术"><a href="#云原生——K8S容器编排技术" class="headerlink" title="云原生——K8S容器编排技术"></a>云原生——K8S容器编排技术</h1><p><img src="/2025/06/23/%E6%9E%B6%E6%9E%84/Cloud/Microservices-Deployment-via-Docker/k8s.png" alt="k8s"></p>
<h1 id="无服务器架构——基于容器的自动化构建和部署管道"><a href="#无服务器架构——基于容器的自动化构建和部署管道" class="headerlink" title="无服务器架构——基于容器的自动化构建和部署管道"></a>无服务器架构——基于容器的自动化构建和部署管道</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Microservice</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP protocol introduction</title>
    <url>/2019/08/11/%E6%9E%B6%E6%9E%84/Web/HTTP-protocol-introduction/</url>
    <content><![CDATA[<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><p>HTTP协议属于应用层协议，其设计目的是为了方便文本内容的分享与发布。HTTP协议是Web资源共享的基础，与URL(文档地址定位符)，HTML共同构建了Web世界。</p>
<p>HTTP协议属于点到点通信协议，请求访问资源的一端称为客户端，提供资源相应的一端称为服务器。</p>
<h2 id="HTTP协议方法"><a href="#HTTP协议方法" class="headerlink" title="HTTP协议方法"></a>HTTP协议方法</h2><ul>
<li>GET：请求访问资源。</li>
<li>POST：传输主体内容。</li>
<li>PUT：传输内容，幂等传输。</li>
<li>HEAD: 获得报文首部，用于确认资源有效性和更新日期。</li>
<li>DELETE: 删除内容。</li>
<li>OPTIONS: 询问资源支持方法。</li>
<li>TRACE：追踪路径，用于计算客户端到服务器端的跳数。</li>
<li>CONNECT: 要求用socket协议连接代理。</li>
</ul>
<p>HTTP方法本身是无状态协议，为了支持复杂有状态场景，引入了Cookie技术，确保认证客户端通信的上下文是连续的。</p>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">类别</th>
<th align="left">原因短语</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1XX</td>
<td align="left">Informational(信息性状态码)</td>
<td align="left">接收的请求正在处理</td>
</tr>
<tr>
<td align="left">2XX</td>
<td align="left">Success（成功状态码）</td>
<td align="left">请求正常处理完毕</td>
</tr>
<tr>
<td align="left">3XX</td>
<td align="left">Redirection（重定向状态码）</td>
<td align="left">需要进行附加操作以完成请求</td>
</tr>
<tr>
<td align="left">4XX</td>
<td align="left">Client Error（客户端错误状态码）</td>
<td align="left">服务器无法处理请求</td>
</tr>
<tr>
<td align="left">5XX</td>
<td align="left">Server Error(服务器错误状态码)</td>
<td align="left">服务器处理请求出错</td>
</tr>
</tbody></table>
<h2 id="HTTP协议架构中的转发功能节点"><a href="#HTTP协议架构中的转发功能节点" class="headerlink" title="HTTP协议架构中的转发功能节点"></a>HTTP协议架构中的转发功能节点</h2><ul>
<li>代理：代理服务器的基本行为是接收客户端发送的请求转发给其他服务器，不改变请求URI。分为两类：<ol>
<li>缓存代理：缓存内容。</li>
<li>透明代理：纯粹内容转发，不做缓存。</li>
</ol>
</li>
<li>网关：网关为通信链路上的服务器提供非HTTP协议连接，例如与信用卡结算系统联动，数据库联动等。</li>
<li>隧道：隧道的建立能够确保客户端与服务器之间安全的通信。也能扩展HTTP通信协议，例如支持推送功能等等。</li>
</ul>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h2 id="HTTP协议的缺点："><a href="#HTTP协议的缺点：" class="headerlink" title="HTTP协议的缺点："></a>HTTP协议的缺点：</h2><ol>
<li>明文信息会被窃听；</li>
<li>无法验证通信方身份，会被伪装；</li>
<li>无法验证报文的完整性，会被篡改。</li>
</ol>
<h2 id="HTTP-over-SSL-x2F-TSL"><a href="#HTTP-over-SSL-x2F-TSL" class="headerlink" title="HTTP over SSL&#x2F;TSL"></a>HTTP over SSL&#x2F;TSL</h2><p>SSL&#x2F;TSL协议独立与HTTP协议，存在于HTTP和TCP协议之间，在建立HTTP连接之前，先建立SSL通信机制，交换加密密钥，从而在HTTP通信报文可以进行加密传输。</p>
<p>HTTPS 协议通信握手&#x2F;分手协议步骤：</p>
<p><img src="/HTTP-protocol-introduction%5CHTTPS.jpg" alt="HTTPS"></p>
<p>握手主要分为4个阶段:</p>
<ol>
<li>SSL证书请求，及公钥获取。&lt;&#x3D; 由于非对称加密机制的效率较低，安全性高，只用作密钥交互。</li>
<li>客户端密钥加密发送。</li>
<li>服务器端密钥确认。</li>
<li>数据传输… &lt;&#x3D; 数据传输阶段的加密是基于协商确定的对称密钥发送，效率较高。</li>
</ol>
<h1 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h1><p>Web浏览器支持的全双工通信协议，在HTTP部首加入upgrade：websocket字段，服务器通过返回状态码101 swtiching protocols响应连接，一旦服务器与客户端建立WebSocket协议的通信连接，之后所有的通信都用这个专用协议进行。</p>
<ul>
<li>推送功能： 服务器可以直接发送数据到客户端。</li>
<li>减少通信量：保持连接的状态减少HTTP协议的连接开销。</li>
</ul>
<h1 id="用户认证问题"><a href="#用户认证问题" class="headerlink" title="用户认证问题"></a>用户认证问题</h1><p>HTTP&#x2F;1.1常见的认证方式如下：</p>
<ul>
<li>BASIC认证：直接提交用户名密码完成认证。<br><img src="/HTTP-protocol-introduction%5CBASIC.jpg" alt="BASIC"></li>
<li>DIGEST认证：客户端根据服务器端的质询码生成响应码完成认证。<br><img src="/HTTP-protocol-introduction%5CDIGEST.jpg" alt="DIGEST"></li>
<li>SSL客户端认证：凭借HTTPS的客户端认证证书完成认证。</li>
<li>FormBase认证：在用户登录信息以表单形式提交后，服务器端发放Session ID用于用户认证状态的绑定和保持。<br><img src="/HTTP-protocol-introduction%5CFORMBASED.jpg" alt="FORM"></li>
<li>Kerberos认证：</li>
<li>NTLM认证：</li>
<li>SSO认证：</li>
</ul>
<h1 id="Web安全问题"><a href="#Web安全问题" class="headerlink" title="Web安全问题"></a>Web安全问题</h1><ul>
<li>跨站脚本工具XSS：通过执行非法HTML标签&#x2F;JS脚本进行攻击。<ol>
<li>表单中插入非法标签执行JS脚本。</li>
<li>基于用户Cookie的窃取攻击</li>
</ol>
</li>
<li>SQL注入攻击：通过加入SQL结束符，强制加入SQL语句执行。</li>
<li>OS命令攻击:通过Shell脚本注入执行系统命令。</li>
<li>HTTP部首注入攻击：通过访问URL加入换行符，注入HTTP首部字段进行攻击。<ol>
<li>Cookie设置字段生效。</li>
<li>HTTP响应截断攻击，强制显示伪造内容。</li>
</ol>
</li>
<li>邮件首部注入攻击: <ol>
<li>BCC邮件泄露。</li>
</ol>
</li>
<li>目录遍历攻击: 访问无疑公开的文件目录。</li>
<li>远程文件包含漏洞：引入其他包，例如System包进行代码污染。</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Load Balancing</title>
    <url>/2021/09/16/%E6%9E%B6%E6%9E%84/Web/Load-Balancing/</url>
    <content><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="服务器负载均衡"><a href="#服务器负载均衡" class="headerlink" title="服务器负载均衡"></a>服务器负载均衡</h2><h3 id="TCP层负载均衡"><a href="#TCP层负载均衡" class="headerlink" title="TCP层负载均衡"></a>TCP层负载均衡</h3><ul>
<li>示例</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_43914278/article/details/104515787">https://blog.csdn.net/weixin_43914278/article/details/104515787</a></p>
<p><a href="https://blog.csdn.net/hackersuye/article/details/83269511">https://blog.csdn.net/hackersuye/article/details/83269511</a></p>
<ul>
<li>TCP连接</li>
</ul>
<p><a href="https://blog.csdn.net/ynnmnm/article/details/26117191">https://blog.csdn.net/ynnmnm/article/details/26117191</a></p>
<p><a href="https://www.cnblogs.com/zhuweisky/archive/2007/09/16/894738.html">https://www.cnblogs.com/zhuweisky/archive/2007/09/16/894738.html</a></p>
<ul>
<li>混合模式</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_30502965/article/details/96408843?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.base&spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_30502965/article/details/96408843?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.base&amp;spm=1001.2101.3001.4242</a></p>
<h3 id="HTTP层负载均衡"><a href="#HTTP层负载均衡" class="headerlink" title="HTTP层负载均衡"></a>HTTP层负载均衡</h3><ul>
<li>示例</li>
</ul>
<p><a href="https://blog.csdn.net/qq_42241932/article/details/83005752?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.base&spm=1001.2101.3001.4242">https://blog.csdn.net/qq_42241932/article/details/83005752?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.base&amp;spm=1001.2101.3001.4242</a></p>
<p><a href="https://blog.csdn.net/developerinit/article/details/76141571">https://blog.csdn.net/developerinit/article/details/76141571</a></p>
<ul>
<li>Websocket示例</li>
</ul>
<p><a href="https://www.haproxy.com/fr/blog/websockets-load-balancing-with-haproxy/">https://www.haproxy.com/fr/blog/websockets-load-balancing-with-haproxy/</a></p>
<p><a href="http://nginx.org/en/docs/http/websocket.html">http://nginx.org/en/docs/http/websocket.html</a></p>
<h3 id="软件负载均衡应用"><a href="#软件负载均衡应用" class="headerlink" title="软件负载均衡应用"></a>软件负载均衡应用</h3><h4 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a>HAProxy</h4><p><a href="https://blog.csdn.net/weixin_30701521/article/details/97463818">https://blog.csdn.net/weixin_30701521/article/details/97463818</a></p>
<p><a href="https://blog.csdn.net/audioo1/article/details/53189032">https://blog.csdn.net/audioo1/article/details/53189032</a></p>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p><a href="https://blog.csdn.net/aa1358075776/article/details/97779277">https://blog.csdn.net/aa1358075776/article/details/97779277</a></p>
<p><a href="https://segmentfault.com/a/1190000000453817">https://segmentfault.com/a/1190000000453817</a></p>
<h2 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h2><h3 id="Ribbon客户端负载均衡"><a href="#Ribbon客户端负载均衡" class="headerlink" title="Ribbon客户端负载均衡"></a>Ribbon客户端负载均衡</h3><p><a href="https://www.cnblogs.com/zhenghongxin/p/10812137.html">https://www.cnblogs.com/zhenghongxin/p/10812137.html</a></p>
<h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><p><a href="https://www.jianshu.com/p/253790f4aa20">https://www.jianshu.com/p/253790f4aa20</a></p>
<p><a href="https://blog.csdn.net/bjgaocp/article/details/88381859">https://blog.csdn.net/bjgaocp/article/details/88381859</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Microservice Architecture</title>
    <url>/2020/02/22/%E6%9E%B6%E6%9E%84/Web/Microservice-Architecture/</url>
    <content><![CDATA[<h1 id="Why-Microservice"><a href="#Why-Microservice" class="headerlink" title="Why Microservice"></a>Why Microservice</h1><ul>
<li>Heterogenious technical stack：<br>支持多重技术栈，由于HTTP协议被多种编程语言支持，微服务可以用多种语言实现。</li>
<li>Robustness：整个App mesh网络不会因为单一的微服务的奔溃而停止工作。</li>
<li>Extensions：可以针对单一微服务进行扩展。</li>
<li>Simple deployment：微服务可以进行独立部署，不需要因为单一服务升级而多次部署。</li>
<li>Efficiency：微服务小团队开发高效敏捷。</li>
<li>More client support：多种前端客户端支持，可以重复利用同一个微服务后端网络。</li>
<li>Migration：基于单一微服务迁移的整体升级，阻碍更小。</li>
</ul>
<h1 id="What-is-Microservice"><a href="#What-is-Microservice" class="headerlink" title="What is Microservice"></a>What is Microservice</h1><p>微服务就是一些协同工作的小而自治的服务。</p>
<h1 id="How-to-architect-Microservices"><a href="#How-to-architect-Microservices" class="headerlink" title="How to architect Microservices"></a>How to architect Microservices</h1><h2 id="微服务特点"><a href="#微服务特点" class="headerlink" title="微服务特点"></a>微服务特点</h2><ul>
<li><p>Loose coupling松耦合</p>
</li>
<li><p>High Cohesion高内聚</p>
</li>
</ul>
<h2 id="上下文边界确定"><a href="#上下文边界确定" class="headerlink" title="上下文边界确定"></a>上下文边界确定</h2><p>业务或者职能的界限，往往也可以作为微服务架构中的服务边界。不同的业务只能之间的内部细节并不需要相互知晓。同一个事件，在不同的业务职能会有不同的体现，但是在内部细节上却没有相互交叉。</p>
<h2 id="共享和隐藏模型设计"><a href="#共享和隐藏模型设计" class="headerlink" title="共享和隐藏模型设计"></a>共享和隐藏模型设计</h2><p>限界上下文的确立，能够帮助确立共享模块，对于处于两个上下文边界上需要共同的消息，可以确立一个共享模块，专门进行信息共享。同时，对于上下文内部的逻辑，也能进行对应的逻辑模块设计，从而完成对于整个上下文的设计。</p>
<h2 id="切勿过早划分"><a href="#切勿过早划分" class="headerlink" title="切勿过早划分"></a>切勿过早划分</h2><p>对于一些过早划分的业务产品，警惕由于后期需求用例改变造成多个上下文之间的重叠。比较推荐的是先进行单体设计，不进行划分，在服务稳定之后再进行划分设计迁移，基于以有代码进行划分，比从头开始构建微服务简单得多。</p>
<h2 id="逐步划分上下文"><a href="#逐步划分上下文" class="headerlink" title="逐步划分上下文"></a>逐步划分上下文</h2><p>不断对上下文的界限进行迭代，从复杂的共享模型中慢慢抽出简单的共享模型，将嵌套的模块逐步上升到顶层模型，对其中某些紧密关联模型进行共享。当然，模型共享的粒度取决于代码是分开维护还是集中维护，如果是集中维护也未尝不可进行嵌套模型共享。</p>
<h1 id="微服务的集成"><a href="#微服务的集成" class="headerlink" title="微服务的集成"></a>微服务的集成</h1><p>微服务之间的通信机制，可以成为微服务的集成。微服务间的API相互调用设计需要注意一下几个方面：</p>
<ul>
<li><p>为用户创建接口</p>
<p>  用户上下文会触发一定特定的流程。</p>
</li>
<li><p>共享数据库</p>
<p>  数据库是多个微服务共享的，因为每个微服务都可能对同一个数据库进行修改。</p>
</li>
<li><p>同步与异步通信模式</p>
<p>  两种不同的通信模式中，同步模式会阻塞线程，而异步模式是基于事件响应请求的，能提降低耦合性，提高吞吐量。</p>
</li>
<li><p>编排与协同</p>
<p>  编排和协同是两种管理流程的架构风格。（同步）编排是通过一个中心执行者将每一步的步骤执行，知道获取最终的结果。（异步)协同则是以事件为机制进行执行，执行单元会订阅事件，API调用会触发一个事件，事件订阅者则会自动执行响应的流程。后者会需要监控服务，监控结果要映射到流程中，troubleshooting难度增加，这是一个难题。ATOM是一个符合REST规范的协议可以通过它提供资源feed的发布服务，客户端可以消费该信息。</p>
</li>
<li><p>RPC与REST</p>
<p>  远程调用允许进行本地调用，事实上是由某个远程服务器产生。RPC会有一定的技术耦合要求。protocol buffers, Thrift是比较推荐的RPC框架。REST则是RPC的一个替代方案。通过URI对客户端与服务器进行了松耦合。</p>
</li>
<li><p>Json与XML</p>
<p>  JSON与XML都是一种有效的数据序列化格式，前者更加流行XML对超媒体控制更加好。</p>
</li>
<li><p>API重定向</p>
<p>  API的重定向常常发生在多个API版本共存的时候，当老版本的API准备deco时，需要绞杀者模式将旧的API拦截，选择是否替换成新版本的实现。当旧版本的访问完全消失时，再删除旧的API。</p>
</li>
</ul>
<h1 id="拆分成微服务"><a href="#拆分成微服务" class="headerlink" title="拆分成微服务"></a>拆分成微服务</h1><ol>
<li>寻找独立的上下文边界——接缝</li>
<li>拆分数据库表格的混合加载功能，放弃直接利用数据库命令访问上下文边界间的外键，改为由代码（微服务服务API）</li>
<li>共享的静态数据改由配置维护关联。</li>
<li>针对共享数据，建立合适的领域进行关联，例如代码中建立客户关系，来维护财务——客户——仓库关系。</li>
<li>共享表格，对于有大量列信息的表格，可以根据上下文边界将表格拆分成两个。</li>
<li>自数据库开始进行代码重构。</li>
<li>事务的边界重构，对于多表的修改操作，需要协同处理错误，或者利用分布式事务处理工具代为管理事务。</li>
<li>拆分后的数据库在制作报表时会出现问题，因为不再能用sql语言进行表格操作。解决方法可以是主动定期导出表格合并，或者基于修改时间订阅导出行为。</li>
</ol>
<h1 id="部署微服务"><a href="#部署微服务" class="headerlink" title="部署微服务"></a>部署微服务</h1><ol>
<li>准备CI系统，流水线，自动化流程</li>
<li>Paas，Docker打包部署</li>
</ol>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol>
<li>单元测试</li>
<li>服务测试(mock&#x2F;打桩)</li>
<li>E2E测试 —— 消费者驱动的测试</li>
<li>上线 —— 金丝雀发布法</li>
</ol>
<h1 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h1><p>微服务的监控难度高于单一服务器应用。微服务包含多个服务，而每个服务的实例个数不等。关联标识可以帮忙关联同一个事件服务调用的日志，采用统一标准化的格式能够更快的辅助错误定位。</p>
<p>监控的内容包括CPU，响应时间，以及合理的语义监控（合成事务监控）。</p>
<h1 id="微服务安全"><a href="#微服务安全" class="headerlink" title="微服务安全"></a>微服务安全</h1><ol>
<li>身份验证和授权</li>
</ol>
<p>身份雅正确认了登录者的身份。授权机制能够确定登录者可以访问和进行的操作。常见的单点登录（Single Sign-On)，企业级标准为SAML和OpenID Connect，前者基于SOAP标准，后者基于OAuth2.0. 身份提供者可以是外部系统或者内部目录服务，如LDAP&#x2F;AD等。</p>
<p>微服务的身份认证和授权部分可以依托于网关，网关可以作为认证代理，通过网管认证的所有查询和操作都可以发送到微服务集群任意一个实例中处理。微服务内部可以决定身份可以授权的操作。</p>
<ol start="2">
<li>服务间的身份验证和授权</li>
</ol>
<p>服务之间的身份验证是指微服务的各个服务之间的身份验证和授权，一般来说有如下几种方式管理:</p>
<ul>
<li>在微服务边界内允许一切</li>
<li>HTTP(S)基本身份验证（HTTP明文传输认证信息，如果基于SSL认证则需要管理多台服务器之间的自签发证书。）</li>
<li>使用SAML或OpenID Connect认证授权，可以有效的避免中间人攻击，这样每个服务也需要一个身份。</li>
<li>客户端证书（采用客户端X.509证书，通过TLS层协议对服务器验证进行保证。)</li>
<li>HMAC（Hash-based Message Authentication Code,请求主题和私有密钥一起被哈希处理后进行发送，服务器使用请求主题和自己私钥副本重建哈希值。如果匹配则接收，防止的中间人攻击。)</li>
<li>JWT(JSON Web Token,JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户。当用户与服务器通信时，客户在请求中发回JSON对象。服务器仅依赖于这个JSON对象来标识用户。为了防止用户篡改数据，服务器将在生成对象时添加签名。)</li>
<li>API密钥(API密钥是给予某种形式的秘密令牌的名称，该秘密令牌与Web服务（或类似）请求一起提交以便识别请求的来源。密钥可以包括在请求内容的一些摘要中，以进一步验证原点并防止篡改值。)</li>
</ul>
<ol start="3">
<li>数据加密（现存多种算法进行数据加密，密钥可以通过加盐哈希保护）</li>
<li>深度防御</li>
</ol>
<ul>
<li>防火墙</li>
<li>日志</li>
<li>入侵监测</li>
<li>网络隔离</li>
<li>操作系统安全</li>
<li>OWASP标准(Open Web Application Security Project开放式Web应用程序安全项目,<a href="https://www.owasp.org/">https://www.owasp.org</a>)</li>
</ul>
<h1 id="系统设计与组织架构"><a href="#系统设计与组织架构" class="headerlink" title="系统设计与组织架构"></a>系统设计与组织架构</h1><p>公司团队的组织架构会影响系统设计。</p>
<ul>
<li><p>单地域的团队拥有更加好的灵活性和效率，因此对于异地团队最好的办法是想办法合理拆分，让不同的团队负责不同的松耦合模块。</p>
</li>
<li><p>每个团队需要负责对服务的需求，更改，构建，部署到运维，自治的团队能够很好的激励团队的效率。</p>
</li>
<li><p>小团队规模，少于10个人的团队能够对其所负责的系统整个生命周期负责，技术选择和实现上具有灵活性。当然这个对服务的高效构建部署效率很高，比如利用云服务的Infra来轻松构建CI&#x2F;CD流程。</p>
</li>
</ul>
<h1 id="规模化微服务"><a href="#规模化微服务" class="headerlink" title="规模化微服务"></a>规模化微服务</h1><ul>
<li><p>允许故障无处不在，故障永远会在意想不到的时候发生，所以微服务本身需要能够允许故障出现，硬件上也不用为避免故障作特殊设计。</p>
</li>
<li><p>服务平行扩容阈值控制，需要参考一些系统参数，响应时间&#x2F;延迟，可用性，数据持久性（丢包率）。</p>
</li>
<li><p>当故障出现时，适当的服务功能降级，允许应用能够在其他方面能够正确运行而不是直接返回错误界面。</p>
</li>
<li><p>微服务延迟的影响控制，通常会导致worker线程池的阻塞队列超长，最终线程池没有可用的线程而宕机。合理设置线程池的舱壁bulkhead，在舱位线程用尽后断路该服务，避免因为单个服务的延迟影响导致所有的线程都阻塞于同一个服务。</p>
</li>
<li><p>数据库扩展，当数据库需要服务于高吞吐量服务时，可以通过数据库副本，RDBMS系统，扩展写操作，独立CQRS读写分离系统，等多种方式扩展。</p>
</li>
<li><p>缓存可以优化重复请求，氛围哭护短、代理和服务器端缓存。</p>
</li>
<li><p>自动伸缩，当云管理能够强大到自动调整微服务实例个数，就可以基于当前流量进行自动调整。</p>
</li>
<li><p>CAP定理(一致性consistency、可用性availability和分区容忍性partition tolerance)是分布式系统中需要控制好的三个平衡。</p>
</li>
<li><p>服务发现，可以通过DNS服务器进行关联，负载均衡服务器将查询分发到不同的IP服务器上。</p>
</li>
<li><p>动态服务注册，新加入的微服务实例的IP应用信息需要能共享给其他服务，Zookeeper，consul和Eureka等服务可以管理配置管理和服务发现。</p>
</li>
<li><p>文档服务，为API构建合适的文档，Swagger可以很好的自动生成API文档，HAL和HAL浏览器也可以客户端逐步探索API。</p>
</li>
<li><p>自描述系统（UDDI Universal Description Discovery and Integration通用描述发现与集成服务），这个标准能帮助了解哪些服务正在运行。</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Office Addin</tag>
        <tag>Microservice</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain Driven Design Pattern Core Concept</title>
    <url>/2023/05/21/%E6%9E%B6%E6%9E%84/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/Domain-Driven-Design-Pattern-Core/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="55d689e90a9930ac1f6e58cfb3c28005474adbc079b9061a9c5adce1d13e5919"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
        <category>领域模型</category>
      </categories>
      <tags>
        <tag>技术日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft Graph API</title>
    <url>/2021/04/16/%E6%9E%B6%E6%9E%84/Web/Microsoft-Graph-API/</url>
    <content><![CDATA[<h1 id="What-is-Graph-API"><a href="#What-is-Graph-API" class="headerlink" title="What is Graph API"></a>What is Graph API</h1><p><a href="https://docs.microsoft.com/en-us/graph/use-the-api">Graph API documents</a></p>
<h1 id="Graph-API-authentication"><a href="#Graph-API-authentication" class="headerlink" title="Graph API authentication"></a>Graph API authentication</h1><p><a href="https://docs.microsoft.com/en-us/graph/auth/">How to get Auth tokens</a></p>
<h1 id="OAuth-Authentication-flows"><a href="#OAuth-Authentication-flows" class="headerlink" title="OAuth Authentication flows"></a>OAuth Authentication flows</h1><p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols">Microsoft Introduction</a></p>
<p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/authentication-flows-app-scenarios">Apps and authentication senarios</a></p>
<h1 id="Call-Graph-API-from-Office-Web-Addin"><a href="#Call-Graph-API-from-Office-Web-Addin" class="headerlink" title="Call Graph API from Office Web Addin"></a>Call Graph API from Office Web Addin</h1><h2 id="Call-via-https-outlook-office-com-api"><a href="#Call-via-https-outlook-office-com-api" class="headerlink" title="Call via https://outlook.office.com/api"></a>Call via <a href="https://outlook.office.com/api">https://outlook.office.com/api</a></h2><p><a href="https://docs.microsoft.com/en-us/office/dev/add-ins/outlook/use-rest-api">Call visa Office.js for Outlook REST API</a></p>
<p><a href="https://docs.microsoft.com/en-us/previous-versions/office/office-365-api/api/version-2.0/use-outlook-rest-api">Outlook REST API via outlook.office.com</a></p>
<h2 id="Call-via-https-grsph-microsoft-com"><a href="#Call-via-https-grsph-microsoft-com" class="headerlink" title="Call via https://grsph.microsoft.com/"></a>Call via <a href="https://grsph.microsoft.com/">https://grsph.microsoft.com/</a></h2><h3 id="with-Authentication-with-SSO-token"><a href="#with-Authentication-with-SSO-token" class="headerlink" title="with Authentication with SSO token"></a>with Authentication with SSO token</h3><p><a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/sso-in-office-add-ins">Microsfot Setup Guide</a></p>
<p><a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/register-sso-add-in-aad-v2">AAD client app registration</a></p>
<p><a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/troubleshoot-sso-in-office-add-ins">Troubleshooting GetAccessToken</a></p>
<h1 id="Other-Option-use-EWS-call-from-Office-js"><a href="#Other-Option-use-EWS-call-from-Office-js" class="headerlink" title="Other Option: use EWS call from Office.js"></a>Other Option: use EWS call from Office.js</h1><p><a href="https://docs.microsoft.com/en-us/office/dev/add-ins/outlook/web-services">call EWS from Office.js</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain Driven Design Pattern Risk Calc</title>
    <url>/2024/11/19/%E6%9E%B6%E6%9E%84/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/Domain-Driven-Design-Pattern-Risk-Calc/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6f1545fac1eddf5f1b9cd76db5d781c4650483abd4f23df8b07a395fcdfa00a1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
        <category>领域模型</category>
      </categories>
      <tags>
        <tag>技术日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Window Message</title>
    <url>/2024/01/31/%E6%9E%B6%E6%9E%84/Windows/Window-Message/</url>
    <content><![CDATA[<h1 id="窗口消息"><a href="#窗口消息" class="headerlink" title="窗口消息"></a>窗口消息</h1><p>GUI应用程序必须响应来自用户和操作系统的事件。</p>
<p>来自用户的事件包括用户与程序交互的所有方式：鼠标点击、按键、触摸屏手势等等。<br>来自操作系统的事件包括程序之外的任何可能影响程序行为的东西。例如，用户可能插入一个新的硬件设备，或者Windows可能进入低功耗状态(睡眠或休眠)。<br>这些事件可以在程序运行时的任何时间发生，几乎可以按任何顺序发生。如何构造一个不能预先预测执行流（flow）的程序?</p>
<p>为了解决这个问题，Windows使用了消息传递模型。操作系统通过传递消息与应用程序窗口进行通信。消息只是指定特定事件的数字代码。例如，如果用户按下鼠标左键，窗口将接收到具有以下消息代码的消息。</p>
<p>C++</p>
<p>#define WM_LBUTTONDOWN    0x0201</p>
<p>一些消息具有与它们相关联的数据。例如，WM_LBUTTONDOWN消息包含鼠标光标的x坐标和y坐标。</p>
<p>要将消息传递给窗口，操作系统将调用为该窗口注册的窗口过程。(现在你知道窗口程序的作用了。)</p>
<p><a href="https://learn.microsoft.com/zh-cn/windows/win32/learnwin32/your-first-windows-program">https://learn.microsoft.com/zh-cn/windows/win32/learnwin32/your-first-windows-program</a></p>
<h1 id="窗口句柄"><a href="#窗口句柄" class="headerlink" title="窗口句柄"></a>窗口句柄</h1><p>窗口句柄是消息传递的源和目的，在每一个进程空间窗口句柄都是局部的，需要通过窗口名字去发现，对于某个窗口消息队列的监测，可以通过visual studio自带的spy++去定位监听并且调试。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>JVM Class Loader Subsystem</title>
    <url>/2019/02/10/Java/JVM-Class-Loader-Subsystem/</url>
    <content><![CDATA[<h1 id="Class文件结构"><a href="#Class文件结构" class="headerlink" title="Class文件结构"></a>Class文件结构</h1><p>Class文件时一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据。</p>
<p>Class文件本身是由下图的这些数据类型组成，这些数据项之间并没有分隔符，而是通过约定好的规范和表结构填入对应的信息，从而将Java语言代码翻译成字节码。Class文件数据项包含如下这些类型。</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/ClassFileDataType.jpg" alt="ClassFileDataType"></p>
<h2 id="1-魔数"><a href="#1-魔数" class="headerlink" title="1. 魔数"></a>1. 魔数</h2><p>第1~4字节：0xCAFEBABE</p>
<h2 id="2-Class文件的版本"><a href="#2-Class文件的版本" class="headerlink" title="2. Class文件的版本"></a>2. Class文件的版本</h2><p>第5、6字节：次版本号（4x.0~4x.65535）</p>
<p>第7、8字节：主版本号 （45~）</p>
<h2 id="3-常量池"><a href="#3-常量池" class="headerlink" title="3. 常量池"></a>3. 常量池</h2><p>常量池入口放置一项u2类型的数据，代表常量池容量计数值，从1开始。0作为没有常量池的表述。</p>
<ul>
<li><p>字面量：接近Java语言层面常量概念，如文本字符串、声明为final的常量值等。</p>
</li>
<li><p>符号引用：<strong>编译原理</strong>概念，包括三类常量：</p>
<ol>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ol>
</li>
</ul>
<p>常量池中每一项常量都是一个表。JDK中定义了14种结构的表结构数据，如下图所示：</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/ConstantFlag.jpg" alt="ConstantFlag"></p>
<p>表开始的第一位都是一个u1类型的标志位（binary 0000 0000 0000 0000 中某几位为1），代表本表属于哪种常量类型，而后则遵从常量表自己的格式填入数据，结构总表如下所示。</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/ConstantPool.jpg" alt="ConstantPool"></p>
<h2 id="4-访问标志"><a href="#4-访问标志" class="headerlink" title="4. 访问标志"></a>4. 访问标志</h2><p>常量池后面两个字节：以16个标志位识别类或接口层次的访问信息，包括：</p>
<pre><code>1. Class是类还是接口；
2. 是否为public类型；
3. 是否为abstract类型；
4. 如果是类的话，是否被声明为final。
</code></pre>
<p>访问标志本身总共由16个标志位可以使用，具体代表如下图所示：</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/ClassAccessFlag.jpg" alt="AccessFlag"></p>
<h2 id="5-类索引、父类索引和接口索引集合"><a href="#5-类索引、父类索引和接口索引集合" class="headerlink" title="5. 类索引、父类索引和接口索引集合"></a>5. 类索引、父类索引和接口索引集合</h2><p>类索引和父类索引都是一个u2类型的数据，而接口索引集合是一组u2类型的数据的集合，Class文件中由这三项数据确定这个类的全限定名。</p>
<p>类索引和父类索引都指向了一个CONSTANT_Class_info类，而接口所以则第一位是接口的个数，后面跟了相应个数的索引分别指向CONSTANT_Class_info类。</p>
<h2 id="6-字段表集合"><a href="#6-字段表集合" class="headerlink" title="6. 字段表集合"></a>6. 字段表集合</h2><p>字段表用于描述接口或者类中声明的变量。字段包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。</p>
<p>字段结构如下所示：</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/Field.jpg" alt="Field"></p>
<p>字段的访问标志位有如下这些表格，标志位值和Class访问标志定义一样，但是支持的标志个数不一样：</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/FieldAccessFlag.jpg" alt="FieldAccessFlag"></p>
<ol>
<li><p>name_index保存的是对常量池CONSTANT_Utf8的引用，保存了方法简单名称。</p>
<p> 全限定名和简单名称很好理解，“org&#x2F;fenixsoft&#x2F;clazz&#x2F;TestClass”是这个类的全限定名，仅仅是把类全名中的“.”替换成了“&#x2F;”而已，为了使连续的多个全限定名之间不产生混淆，在使用时最后一般会加入一个“;”表示全限定名结束。简单名称是指没有类型和参数修饰的方法或者字段名称，这个类中的inc()方法和m字段的简单名称分别是“inc”和“m”。</p>
</li>
<li><p>描述符引用指向了一个字段&#x2F;方法描述符CONSTANT_Utf8。</p>
<ul>
<li><p>字段描述符，比如int实例变量的描述符是“I”;java.lang.Object 的实例描述符是 “Ljava&#x2F;lang&#x2F;Object;”，“double[][][]”的描述符为“[[[D”;</p>
</li>
<li><p>方法描述符，比如Object mymethod(int i, double d, Thread t)的描述符为 (IDLjava&#x2F;lang&#x2F;Thread;)Ljava&#x2F;lang&#x2F;Object;。</p>
</li>
</ul>
<p> 描述符支持如下类型：</p>
<p> <img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/Descriptor.jpg" alt="Descriptor"></p>
</li>
</ol>
<h2 id="7-方法表集合"><a href="#7-方法表集合" class="headerlink" title="7. 方法表集合"></a>7. 方法表集合</h2><p>方法表用于描述接口或者类中声明的方法，包括类级方法以及实例方法。表结构跟字段表相似，在此不再赘述。</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/Field.jpg" alt="Field"></p>
<p>方法的访问标志与字段不同，如下图:</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/MethodAccessFlag.jpg" alt="MethodAccessFlag"></p>
<h2 id="8-属性表集合"><a href="#8-属性表集合" class="headerlink" title="8. 属性表集合"></a>8. 属性表集合</h2><p>属性表并不是单独存在的表，而是在Class文件、字段表、方法表都可以携带自己的属性表集合，用于描述某些场景专有的信息。属性表结构对后续属性进行了总表，结构如下:</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/AttributeInfo.jpg" alt="AttrubuteInfo"></p>
<p>目前虚拟机规范定义了下列属性：</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/AttributeCollection.jpg" alt="Attrubute_info"></p>
<h1 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h1><p>Java编译器将代码的操作本身处理生成了字节码指令，放在了Code属性中，JVM读取指令进行执行。JVM支持的字节码指令和操作数如表格所示:</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/OptCode.jpg" alt="OptCode"></p>
<h1 id="Class加载时机"><a href="#Class加载时机" class="headerlink" title="Class加载时机"></a>Class加载时机</h1><p>5大主动引用场景：</p>
<ol>
<li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候、读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</li>
<li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</li>
<li>当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li>
</ol>
<p>不会出发加载的三个被动引用例子：</p>
<ol>
<li>通过子类引用父类的静态字段，不会导致子类初始化。</li>
<li>通过数组定义来引用类，不会出发此类的初始化。</li>
<li>常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义敞亮的类，因此不会触发定义常量的类的初始化。</li>
</ol>
<h1 id="Class加载过程"><a href="#Class加载过程" class="headerlink" title="Class加载过程"></a>Class加载过程</h1><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）7个阶段。其中验证、准备、解析3个部分统称为连接（Linking），这7个阶段的发生顺序如下图所示。</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/ClassLoader.jpg" alt="ClassLoader"></p>
<h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><ol>
<li><p>通过一个类的全限定名来获取定义此类的二进制字节流</p>
</li>
<li><p>将字节流所代表的静态存储结构转化为方法区的运行时数据结构：</p>
<ul>
<li>如果是数组，JVM会直接创建数组类<ol>
<li>引用类型的数组： 递归采用类加载过程去加载这个类型</li>
<li>如果是非引用类型的数组：JVM将会把数组标记为引导类加载器关联。</li>
</ol>
</li>
</ul>
</li>
<li><p>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据访问入口。</p>
</li>
</ol>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ol>
<li>文件格式验证</li>
</ol>
<p>验证字节流是否符合Class文件格式的规范。</p>
<ol start="2">
<li>元数据验证</li>
</ol>
<p>对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范要求。</p>
<ol start="3">
<li>字节码验证</li>
</ol>
<p>通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</p>
<ol start="4">
<li>符号引用验证</li>
</ol>
<p>发生在符号引用转化为直接引用的时候，是对类自身意外（常量池里的各种符号引用）信息进行匹配性校验。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>正式为变量分配内存并设置类变量为初始值阶段。引用类型的内存分配具体步骤参考<a href="/2018/11/07/JVM-memory-management-and-GC/#JVM%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA">JVM新对象创建</a>。</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<ul>
<li><p>符号引用：符号引用以一组符号来描述引用的目标，符号可与是任何形式的字面量，只要能无歧义的定义到目标即可。</p>
</li>
<li><p>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</p>
</li>
</ul>
<p>解析动作主要针对如下：</p>
<ol>
<li>类或接口 CONSTANT_Class_info</li>
<li>字段 CONSTANT_Fieldref_info</li>
<li>类方法 CONSTANT_Methodref_info</li>
<li>接口方法 CONSTANT_InterfaceMethodref_info</li>
<li>方法类型 CONSTANT_MethodType_info</li>
<li>方法句柄 CONSTANT_MethodHandle_info</li>
<li>和调用点限定符 CONSTANT_InvokeDynamic_info</li>
</ol>
<p>这7类符号引用进行。</p>
<ul>
<li><p>类或接口的解析</p>
<ol>
<li>如果C不是一个数组类型，那虚拟机将会把代表N的全限定名传递给D的类加载器去加载这个类C。在加载过程中，由于元数据验证、字节码验证的需要，又可能触发其他相关类的加载动作，例如加载这个类的父类或实现的接口。一旦这个加载过程出现了任何异常，解析过程就宣告失败。</li>
<li>如果C是一个数组类型，并且数组的元素类型为对象，也就是N的描述符会是类似“[Ljava&#x2F;lang&#x2F;Integer”的形式，那将会按照第1点的规则加载数组元素类型。如果N的描述符如前面所假设的形式，需要加载的元素类型就是“java.lang.Integer”，接着由虚拟机生成一个代表此数组维度和元素的数组对象。</li>
<li>如果上面的步骤没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的类或接口了，但在解析完成之前还要进行符号引用验证，确认D是否具备对C的访问权限。如果发现不具备访问权限，将抛出java.lang.IllegalAccessError异常。</li>
</ol>
</li>
<li><p>字段解析</p>
<ol start="0">
<li>首先将会对字段表内class_index￼项中索引的CONSTANT_Class_info符号引用进行解析，也就是字段所属的类或接口的符号引用。如果在解析这个类或接口符号引用的过程中出现了任何异常，都会导致字段符号引用解析的失败。</li>
<li>如果C本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。</li>
<li>否则，如果在C中实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。</li>
<li>否则，如果C不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父类，如果在父类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。</li>
<li>否则，查找失败，抛出java.lang.NoSuchFieldError异常。</li>
</ol>
</li>
<li><p>类方法解析</p>
<ol start="0">
<li>首先将会对字段表内class_index￼项中索引的CONSTANT_Class_info符号引用进行解析</li>
<li>类方法和接口方法符号引用的常量类型定义是分开的，如果在类方法表中发现class_index中索引的C是个接口，那就直接抛出java.lang.IncompatibleClassChangeError异常。</li>
<li>如果通过了第1步，在类C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>
<li>否则，在类C的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>
<li>否则，在类C实现的接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明类C是一个抽象类，这时查找结束，抛出java.lang.AbstractMethodError异常。</li>
<li>否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError。</li>
</ol>
</li>
<li><p>接口方法解析</p>
<ol start="0">
<li>首先将会对字段表内class_index￼项中索引的CONSTANT_Class_info符号引用进行解析</li>
<li>与类方法解析不同，如果在接口方法表中发现class_index中的索引C是个类而不是接口，那就直接抛出java.lang.IncompatibleClassChangeError异常。</li>
<li>否则，在接口C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>
<li>否则，在接口C的父接口中递归查找，直到java.lang.Object类（查找范围会包括Object类）为止，看是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li>
<li>否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError异常。</li>
</ol>
</li>
</ul>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。</p>
<ul>
<li><p><code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问。</p>
</li>
<li><p><code>&lt;clinit&gt;()</code>方法与类的构造函数（或者说实例构造器<code>&lt;init&gt;()</code>方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<code>&lt;clinit&gt;()</code>方法执行之前，父类的<code>&lt;clinit&gt;()</code>方法已经执行完毕。因此在虚拟机中第一个被执行的<code>&lt;clinit&gt;()</code>方法的类肯定是java.lang.Object。</p>
</li>
<li><p>由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作，如下在代码清单中，字段B的值将会是2而不是1。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">A</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        A = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">B</span> <span class="operator">=</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(Sub.B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>&lt;clinit&gt;()</code>方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。</p>
</li>
<li><p>￼接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。但接口与类不同的是，执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</p>
</li>
<li><p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。如果在一个类的<code>&lt;clinit&gt;()</code>方法中有耗时很长的操作，就可能造成多个进程阻塞￼，在实际应用中这种阻塞往往是很隐蔽的。</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><h1 id="Class加载器"><a href="#Class加载器" class="headerlink" title="Class加载器"></a>Class加载器</h1><p>虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。这种实现便是类加载器。</p>
<blockquote>
<p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。</p>
</blockquote>
<p>类的相等语义，只有在这两个类是由同一个类加载器加载的前提下才有意义，只要类加载器不同，即使是加载自同一个Class文件，两个类也是不等的。（相等指的是，Class对象的equals(), isAssignableFrom(), isInstance()， instantof 的返回结果。例如下面代码运行结果则是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class org.fenixsoft.classloading.ClassLoaderTest</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throw</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Class ClassLoader define and override</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">myLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throw</span> ClassNotFoundException&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> name.substring(name.lastIndextOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> getClass().getResourceAsStream(fileName);</span><br><span class="line">                    <span class="keyword">if</span>(is == <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.loadClasse(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">bye</span>[is.available()];</span><br><span class="line">                    is.read(b);</span><br><span class="line">                    <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> myLoader.loadClass(<span class="string">&quot;org.fenixsoft.classloading.ClassLoaderTest&quot;</span>).newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> org.fenixsoft.classloading.ClassLoaderTest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类加载器类型"><a href="#类加载器类型" class="headerlink" title="类加载器类型"></a>类加载器类型</h2><p>目前只存在两种不同的类加载器：一种是启动类加载器(Bootstrap ClassLoader)，C++语言实现，虚拟机自身的一部分；另一种就是所有其他类加载器，继承自抽象类java.lang.ClassLoader。</p>
<ul>
<li>启动类加载器（Bootstrap ClassLoader）：前面已经介绍过，这个类将器负责将存放在<JAVA_HOME>\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可，如下列代码清单所示为java.lang.ClassLoader.getClassLoader()方法的代码片段。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ClassLoader <span class="title function_">getClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> getClassLoader0();</span><br><span class="line">    <span class="keyword">if</span>(cl == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManger();</span><br><span class="line">    <span class="keyword">if</span>(sm != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> ClassLoader.getCallerClassLoader();</span><br><span class="line">        <span class="keyword">if</span>(ccl != <span class="literal">null</span> &amp;&amp; ccl != cl &amp;&amp; !cl.isAncestor(ccl))&#123;</span><br><span class="line">            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扩展类加载器（Extension ClassLoader）：这个加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载<JAVA_HOME>\lib\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</p>
</li>
<li><p>应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher$App-ClassLoader实现。由于这个类加载器是ClassLoader中的getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
</li>
</ul>
<h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>图中展示的类加载器之间的这种层次关系，称为类加载器的双亲委派模型（Parents Delegation Model）。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。这里类加载器之间的父子关系一般不会以继承（Inheritance）的关系来实现，而是都使用组合（Composition）关系来复用父加载器的代码。</p>
<p><img src="/2019/02/10/Java/JVM-Class-Loader-Subsystem/ParentsDelegationModel.jpg" alt="ParentDelegationModel"></p>
<p>双亲委派模型的工作过程是：</p>
<ol>
<li>所有的加载请求都委派给父类加载器去完成。</li>
<li>当父类加载器反馈自己无法完成加载请求，子加载器才会尝试自己加载。</li>
</ol>
<p>双亲委派模型保证了Java程序优先从启动类加载器进行搜索加载，使得java.lang.Object类型在程序的各种类加载环境中都是同一个类，能够稳定运行程序。</p>
<p>双亲委派模型实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="comment">//首先，检查请求的类是否已经加载过了</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span>( c == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 委派父类加载器先去尝试加载</span></span><br><span class="line">                c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// 如果父类加载器抛出异常，说明父类加载器不能加载，因此调用子类进行加载</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(resolve) &#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="破坏双亲委派模型情况"><a href="#破坏双亲委派模型情况" class="headerlink" title="破坏双亲委派模型情况"></a>破坏双亲委派模型情况</h2><ol>
<li><p>loadClass没有按照双亲委派模型进行实现： 目前已经不推荐重写loadClass方法，而是重写findClass方法，从而保证模型安全。</p>
</li>
<li><p>第三方JNDI接口提供者&#x2F;SPI的代码不能被启动类加载器加载：线程上下文类加载器(Tread Context ClassLoader)。可以通过java.lang.Thread类的setContextClassLoader()进行设置。如果父类及应用全局都没有设置过，则默认就是应用程序类加载器。这样就让父类加载器请求子类加载器去加载SPI的代码。</p>
</li>
<li><p>为程序动态性的追求导致：代码热替换(HotSwap),模块热部署(Hot Deployment)等。每一个程序模块都有自己的类加载器，当需要更换一块程序模块是，就把这块代码以及类加载器一起换掉以实现代码的热替换。OSGi收到类加载请求时：</p>
<ol>
<li>将以java.*开头的类委派给父类加载器加载。</li>
<li>否则，将委派列表名单内的类委派给父类加载器加载。</li>
<li>否则，将Import列表中的类委派给Export这个类的Bundle的类加载器加载。</li>
<li>否则，查找当前Bundle的ClassPath，使用自己的类加载器加载。</li>
<li>否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器加载。</li>
<li>否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。</li>
<li>否则，类查找失败。</li>
</ol>
<p> 此实现只有前两个点符合双亲委派模型，后面的都是平级的类加载器中进行。</p>
</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrency In Depth</title>
    <url>/2019/12/24/Java/Java-Concurrency-In-Depth/</url>
    <content><![CDATA[<p>本文将从计算机底层实现的角度描述Java目前的并发工具的实现细节。</p>
<h1 id="Synchronized实现细节"><a href="#Synchronized实现细节" class="headerlink" title="Synchronized实现细节"></a>Synchronized实现细节</h1><p>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步。即使用monitorenter和monitorexit指令实现的。</p>
<ul>
<li>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处。</li>
<li>线程执行到monitorenter指令时会尝试获取对象所对应的monitor的所有权&#x2F;对象锁。</li>
</ul>
<p>Synchronized用的锁是存在与Java对象头里。Java对象头的结构于<a href="/2018/11/07/JVM-memory-management-and-GC/#%E5%AF%B9%E8%B1%A1%E5%A4%B4">这里</a>。</p>
<p>锁一共有4种状态，级别从低到高分别是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态。</p>
<p>偏向锁：</p>
<pre><code>1. 设置:当一个线程获取锁，对象锁从无锁状态变成偏向锁，允许该线程反复拿锁。（已经有identity hashcode的对象不会使用偏向锁）

2. 撤销：当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，撤销后变成无锁状态，膨胀成轻量级锁。（偏向对象如果需要identity hashcode则会膨胀成重量级锁）
</code></pre>
<p>** identity hash code： 未被覆写的 java.lang.Object.hashCode() 或者 java.lang.System.identityHashCode(Object) 所返回的值。</p>
<p>轻量级锁：</p>
<pre><code>1. 设置：JVM在当前线程栈帧中创建用于存储锁纪录的空间，并将对象头的MarkWord复制到锁纪录中。然后尝试用CAS操作将指向锁纪录指针放入MarkWord空间。如果成功，则获得锁，如果失败，则自旋来获取锁。

2. 解锁: CAS操作将Displaced MarkWord
放回到对象头，如果成功，表示没有竞争。如果失败说明存在竞争,即两个线程中解锁线程无法将MarkWord取回，因为另一个自旋线程已经尝试将MarkWord放到自己线程的锁记录中，CAS会发现MW的owner不是自己，膨胀成重量级锁。阻塞所有没拿到锁的线程。
</code></pre>
<p>重量级锁：</p>
<pre><code>1. 设置：重量级锁会阻塞拿不到锁的所有线程，减少了自旋带来的CPU开销。一旦升级成重量级锁，将不会降级锁。
</code></pre>
<h1 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h1><p>原子操作主要依赖的是计算机的如下几个CPU基本操作：</p>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/AtomicFundamentals.jpg" alt="AtomicFundamentals"></p>
<p>为了达到原子操作的目的，CPU会通过如下两种方式确保在某一时刻，只有一个CPU对共享内存中的数据进行写操作：</p>
<ol>
<li>通过总线锁保证原子性：CPU会提供一个LOCK #信号，将其他处理器的内存访问请求阻塞住，从而独占共享内存。</li>
<li>通过缓存所定保证原子性：需要处理器支持，开销较小，CPU修改缓存行进行缓存锁定，那么另一个CPU就不能同时缓存该内存数据，这是通过处理器的缓存以执行机制来保证的。</li>
</ol>
<p>JVM中是可以通过锁和循环CAS操作来保证该变量的赋值成功的。</p>
<p>其中循环CAS操作可能带来如下问题：</p>
<ol>
<li>ABA问题，值已经变化，但CAS的旧值比较返回true，解决方法是加入变量版本号。</li>
<li>循环时间开销大，可以通过JVM支持CPU的pause指令提升效率。</li>
<li>只能保证单一共享变量的原子性，可以通过AtomicReference方式合并变量成为一个新的对象处理。</li>
</ol>
<p>锁机制，除了偏向锁，锁本身就是通过循环CAS实现拿&#x2F;释放锁。</p>
<h1 id="Lock锁实现细节"><a href="#Lock锁实现细节" class="headerlink" title="Lock锁实现细节"></a>Lock锁实现细节</h1><p>对比与synchronized中采用的锁，  Lock有如下不同之处:</p>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/LockSynchronized.png" alt="LockSynchronized"></p>
<p>以下是Lock的API介绍，本文将展示API的实现细节：<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/LockAPI.png" alt="LockAPI"></p>
<p>ReentrantLock的实现依赖于Java同步器框架，下面将着重讲解同步器框架的实现。对于公平锁和非公平锁的实现，AQS基本实现都一样，除了在公平锁释放节点是会调用hasQueuedPredecessors()方法判定是否队列中用等待节点，从而保证不会有线程在释放阶段竞争到锁，让线程串行化拿锁。</p>
<h2 id="队列同步器AQS框架实现细节"><a href="#队列同步器AQS框架实现细节" class="headerlink" title="队列同步器AQS框架实现细节"></a>队列同步器AQS框架实现细节</h2><blockquote>
<p><a href="http://www.cnblogs.com/waterystone/p/4920797.html">http://www.cnblogs.com/waterystone/p/4920797.html</a></p>
</blockquote>
<p>类如其名，抽象的队列式的同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它，如常用的ReentrantLock&#x2F;Semaphore&#x2F;CountDownLatch。</p>
<p>实现细节在另一篇<a href="Java-Memory-Model/##%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82">文章</a>已讲述。</p>
<p>同步器本身是一个抽象类，实现了同步器的类可以完成线程同步，包括：同步队列，独占式同步状态获取与释放，共享式同步状态获取与释放及超时获取同步状态。队列同步器使用了一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获取线程的排队工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractQueueSynchronizer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记锁状态， 0是无锁状态，非0则是同步队列有被阻塞节点/线程。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line">    <span class="comment">//同步状态相关方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> in <span class="title function_">getState</span><span class="params">()</span>; <span class="comment">// 获取当前的同步状态</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> newState)</span>; <span class="comment">//设置当前的同步状态</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetState</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span>; <span class="comment">//使用CAS设置当前状态，能够保证状态设置的原子性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//支持重写的方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusive</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquireNanos</span><span class="params">(<span class="type">int</span> arg, <span class="type">long</span> nanos)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireShared</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquireSharedNanos</span><span class="params">(<span class="type">int</span> arg, <span class="type">long</span> nanos)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span>;</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Thread&gt; <span class="title function_">getQueuedThreads</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>支持重写方法的不同重写可以实现不同的锁，具体如下：<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/AQSoverride.png" alt="AQSoverride"></p>
<p>在实现重写方法可以调用模板方法，具体如下：<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/AQStemplate.png" alt="AQStemplate"></p>
<p>下文将分类别讲述模板方法的实现:</p>
<h3 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h3><p>同步器内部有一个同步队列（FIFO双向队列）进行同步状态管理。当前线程获取同步状态失败时，同步器会将当前线程及等待状态等信息构造成为一个节点并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，会把节点中的线程唤醒，使其再次尝试获取同步状态。</p>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/AQSQueue.png" alt="AQSQueue"></p>
<p>compareAndSetTail(…)方法基于CAS设置尾节点，保证队列更新的线程安全。<br>而头节点的更新是由获得锁的线程更新的，因此不需要作同步处理，是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> waitStatus;</span><br><span class="line">    <span class="keyword">private</span> Node prev;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line">    <span class="keyword">private</span> Node nextWaiter;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体描述如下图所示：</p>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/Node.png" alt="Node"></p>
<ol>
<li>当首节点的线程成功地获取了同步状态&#x2F;锁，该线程会将首节点设置为后继节点，并且将本节点的next引用断开即可。然后线程执行任务，任务完成后唤醒后继节点。具体的节点处理实现由锁的类型(独占&#x2F;共享)的模板方法Release&#x2F;ReleaseShared实现。</li>
</ol>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/Deque.jpg" alt="Dequeue"></p>
<ol start="2">
<li>当一个线程无法获取到同步状态，会被构造成节点加入到同步队列尾部，CAS设置能保证节点加入过程的线程安全。过程图如图所示。</li>
</ol>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/Enque.jpg" alt="Enqueue"></p>
<p>节点操作由具体的模板方法AcquireQueued&#x2F;AcquireShared等实现，而节点封装和入队细节如下列代码所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> Node tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">        <span class="comment">//快速尝试在尾部添加</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">        <span class="keyword">if</span>( pred != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node))&#123;</span><br><span class="line">                pred.next = node;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        enq(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span>&#123;</span><br><span class="line">        <span class="comment">// 死循环保证了节点的添加在有并发冲突的情况也能成功</span></span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">            <span class="keyword">if</span>(t == <span class="literal">null</span>)&#123;<span class="comment">//Must initialize</span></span><br><span class="line">                <span class="keyword">if</span>(compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                    tail = head;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node.prev = t;</span><br><span class="line">                <span class="keyword">if</span>(compareAndSetTail(t, node))&#123;</span><br><span class="line">                    t.next = node;</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h3 id="独占式同步状态获取与释放"><a href="#独占式同步状态获取与释放" class="headerlink" title="独占式同步状态获取与释放"></a>独占式同步状态获取与释放</h3><p>独占式同步状态，是指在同一时刻只能有一个线程成功获取同步状态，锁的获取是排他的，不是共享的。</p>
<ol>
<li>独占式同步状态获取流程如图所示:<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/Acquire.jpg" alt="Acquire"></li>
</ol>
<p>相关的实现代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//在同步队列入队完成后，每个节点都在自旋等待，但是只有前驱是头节点的节点(头节点的next节点)才能有终端自旋的可能</span></span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="keyword">if</span>(p == head $$ <span class="title function_">tryAcquire</span><span class="params">(arg)</span>)&#123;</span><br><span class="line">                <span class="comment">//更新头节点</span></span><br><span class="line">                setHead(node);</span><br><span class="line">                <span class="comment">//断开头节点对后续节点的引用</span></span><br><span class="line">                p.next = <span class="literal">null</span>; <span class="comment">//help GC</span></span><br><span class="line">                failed = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(shouldParkAfterFailedAcquiredAcquire(p, node) &amp;&amp; parkAndCheckInterrupe())</span><br><span class="line">                interrupted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>独占式同步状态释放<br>在当前线程获取了同步状态并执行后，需要释放同步状态，从而使得后续的同步节点可以获取同步状态。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tryRelease(arg))&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span>(h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);<span class="comment">//使用lockSupport去唤醒等待状态的线程。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="共享式同步状态获取与释放"><a href="#共享式同步状态获取与释放" class="headerlink" title="共享式同步状态获取与释放"></a>共享式同步状态获取与释放</h3><p>共享式获取与独占式获取最主要的区别在与同一时刻能否有多个线程同时获取到同步状态。以文件的读写为例，读操作可以是共享式访问，写操作则是独占式访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireShared</span><span class="params">(<span class="type">int</span> arg)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tryAcquireShared(arg) &lt; <span class="number">0</span>&gt;)</span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAcquireShared</span><span class="params">(<span class="type">int</span> arg)</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node.SHARED);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 自旋获取共享锁</span></span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> tryAcquireShared(arg);</span><br><span class="line">                <span class="comment">//获取到了同步状态</span></span><br><span class="line">                <span class="keyword">if</span>( r &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span>(interrupted)</span><br><span class="line">                        selfInterrupt();</span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">//tryReleaseShared通过自旋和CAS保证释放状态成功</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        <span class="comment">//释放同步状态后，会唤醒处于等待状态的节点。</span></span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="独占式超时获取同步状态"><a href="#独占式超时获取同步状态" class="headerlink" title="独占式超时获取同步状态"></a>独占式超时获取同步状态</h3><p>超时获取同步状态，即在指定的时间段内获取同步状态，如果获取到同步状态则返回true，否则，返回false。具体流程如下: </p>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/Workflow.jpg" alt="Workflow"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">doAcquireNanos</span><span class="params">(<span class="type">int</span> arg, <span class="type">long</span> nanosTimeout)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">lastTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node,EXCLUSIVE);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="comment">//确定时间内获取成功</span></span><br><span class="line">            <span class="keyword">if</span>(p == head &amp;&amp; tryAcquire(arg))&#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="literal">null</span>;</span><br><span class="line">                failed = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//确定时间内获取失败</span></span><br><span class="line">            <span class="keyword">if</span>(nanosTimeout &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(shouldParkAfterFailedAcquire(p, node) &amp;&amp; nanosTimeout &gt; spinForTimeoutThreshold)</span><br><span class="line">                LockSupport.parkNanos(<span class="built_in">this</span> nanosTimeout);</span><br><span class="line">            <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="comment">// 计算lastTime到现在的睡眠时间，并且更新还应该睡眠的时间</span></span><br><span class="line">            nanosTimeout -= now - lastTime;</span><br><span class="line">            lastTime = now;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Condition实现细节"><a href="#Condition实现细节" class="headerlink" title="Condition实现细节"></a>Condition实现细节</h1><p>每个Condition对象都包含一个等待队列，Object包含一个AQS队列，两个队列节点是AQS中的Node，并用这个两个队列共同实现了wait&#x2F;notify功能。</p>
<h2 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h2><p>Condition.await()让线程释放锁，构造新节点加入等待队列进入等待状态。返回的前提是重新获取了condition相关联的锁。底层是通过LockSupport的park()方法释放。</p>
<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>Condition.signal()将等待队列中等待时间最长的节点加入同步队列，并用LockSupport.unpark()唤醒该节点。加入同步队列的节点通过tryAcquire()竞争获取锁，获取锁后从await()中返回继续执行。</p>
<h1 id="并发集合实现细节"><a href="#并发集合实现细节" class="headerlink" title="并发集合实现细节"></a>并发集合实现细节</h1><h2 id="ConcurrentHashMap实现细节"><a href="#ConcurrentHashMap实现细节" class="headerlink" title="ConcurrentHashMap实现细节"></a>ConcurrentHashMap实现细节</h2><blockquote>
<p>ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成。Segment是一种可重入锁ReentrantLock，在ConcurrentHashMap里扮演锁的角色，HashEntry则用于存储键值对数据。一个ConcurrentHashMap里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构， 一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素， 每个Segment守护者一个HashEntry数组里的元素,当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁。</p>
</blockquote>
<p><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/concurrentHashmap.png" alt="ConcurrentHashMap"></p>
<p>读取HashEntry信息是不需要拿锁，从而保证了并发读的高效性。HashMap中读取Map.Entry&lt;K,V&gt;是需要拿锁的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HashEntry</span>&lt;K,V&gt; &#123;  </span><br><span class="line">    <span class="keyword">final</span> K key; <span class="comment">// immutable field保证链表稳定性，新节点头插入,或者替换已有的值（不能重复value）。  </span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;  </span><br><span class="line">    <span class="keyword">volatile</span> V value;  <span class="comment">//volatile保证可见性，删除需要O(n)倒序复制被删节点前的list。</span></span><br><span class="line">    <span class="keyword">final</span> HashEntry&lt;K,V&gt; next;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在Hash中，会进行分段哈希从而保证segment中数组的均匀性，会对hash值的高字段和低字段进行分段处理，前半段获取segment位置，后端确定segment中数组中未知。</p>
<ul>
<li>get()操作不需要枷锁，除非读到的值为空才会加锁重读。</li>
<li>put()操作需要对加锁操作。扩容时，只会对某segment中的数组进行扩种。</li>
<li>size()操作会两次不加锁计算，当操作数没有变化，则直接返回，如果变化则加锁获取size。</li>
</ul>
<h2 id="阻塞队列实现原理"><a href="#阻塞队列实现原理" class="headerlink" title="阻塞队列实现原理"></a>阻塞队列实现原理</h2><h1 id="线程池并行执行机制Executor"><a href="#线程池并行执行机制Executor" class="headerlink" title="线程池并行执行机制Executor"></a>线程池并行执行机制Executor</h1><p>Java线程即是工作单元，也是执行机制。工作单元包括Runnable和Callable，而执行机制由Executor框架提供。应用程序通过Executor框架控制上层的调度，下层的调度由操作系统内核控制，下层调度不受应用程序的控制。<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/ExecutorMechanism.jpg" alt="Executor"></p>
<p>Executor接收<code>Runnable/Callable&lt;T&gt;</code>接口的实例的任务，返回<code>Future&lt;T&gt;</code>接口的<code>FutureTask&lt;T&gt;</code>实例，当任务完成时，可以获取任务执行结果。</p>
<h2 id="ThreadPoolExecutor-线程池-框架和实现原理"><a href="#ThreadPoolExecutor-线程池-框架和实现原理" class="headerlink" title="ThreadPoolExecutor (线程池)框架和实现原理"></a>ThreadPoolExecutor (线程池)框架和实现原理</h2><p>ThreadPoolExecutor可以有三种: FixedThreadPool, SingleThreadExecutor, CachedThreadPool。这三种是不同配置的ThreadPoolExecutor，并非不同子类型。</p>
<ul>
<li><p>FixedThreadPool:<br>FixedThreadPool是使用固定线程数的线程池，适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场景，适用于负载较重的服务器。<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/FixedThreadPool.jpg" alt="FixedThreadPool"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<span class="comment">//无界队列</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads, ThreadFactory threadFactory)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SingleThreadExecutor:<br>SingleThreadExecutor是单个线程的线程“池”，适用于需要保证顺序执行的各个任务，并且保证没有多个线程活动的应用场景。<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/SingleThreadExecutor.jpg" alt="SingleThreadExecutor"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">SingleThreadExecutor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// FinalizableDelegatedExecutorService 增加对gc时停掉线程池的功能</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span>(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">SingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>CachedThreadPool:<br>CachedThreadPool是大小无界的线程池，适用于执行多的短期异步任务的小程序，适合负载较轻的服务器。<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/CachedThreadPool.jpg" alt="CachedThreadPool"></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">CachedThreadPool</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, TimeUnit.SECONDS,<span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());<span class="comment">//使用没有容量的工作队列，因为线程数没有限制。</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">CachedThreadPool</span><span class="params">(ThreadFactory threadFactory)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="ThreadPoolExecutor实现原理"><a href="#ThreadPoolExecutor实现原理" class="headerlink" title="ThreadPoolExecutor实现原理"></a>ThreadPoolExecutor实现原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class ThreadPoolExecutor&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> corePool; <span class="comment">// 核心线程池大小，当前运行线程数少于此则创建新线程至预热完成。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maximumPool; <span class="comment">//最大线程池的大小，当前线程数不会超过此，多的任务会挂起在工作阻塞队列中。</span></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; workQueue; <span class="comment">//保存任务的工作队列，只要队列不为空，空闲的线程会获取任务并执行，直到任务队列为空。</span></span><br><span class="line">    <span class="keyword">private</span> RejectedExecutionHandler handler; <span class="comment">// 工作队列饱和时调用的handler</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> keepAliveTime; <span class="comment">//空闲线程存活时间</span></span><br><span class="line">    <span class="keyword">private</span> TimeUnit unit; <span class="comment">//空闲时间单位</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ScheduledThreadPoolExecutor-调度线程池）框架实现原理"><a href="#ScheduledThreadPoolExecutor-调度线程池）框架实现原理" class="headerlink" title="ScheduledThreadPoolExecutor (调度线程池）框架实现原理"></a>ScheduledThreadPoolExecutor (调度线程池）框架实现原理</h2><p>调度线程池是线程池实现的扩展，主要在给定的延迟后运行任务，或者定期执行任务。<br>ScheduledThreadPoolExecutor有两种: ScheduledThreadPoolExecutor和SingleThreadScheduledExecutor。</p>
<ul>
<li><p>ScheduledThreadPoolExecutor:<br>ScheduledThreadPoolExecutor是固定个数线程的调度线程池，适用于需要多个后台线程执行周期任务，同时为了满足资源管理的需求而需要限制后台线程的数量的应用场景。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(<span class="type">int</span> corePoolSize)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(<span class="type">int</span> corePoolSize, ThreadFactory threadFactory)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SingleThreadScheduledExecutor:<br>SingleThreadScheduledExecutor是单个后台线程执行周期任务，同事需要保证顺序地执行各个任务的应用场景。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">SingleThreadScheduledExecutor</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">SingleThreadScheduledExecutor</span><span class="params">(ThreadFactory threadFactory)</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ScheduledThreadPoolExecutor实现原理"><a href="#ScheduledThreadPoolExecutor实现原理" class="headerlink" title="ScheduledThreadPoolExecutor实现原理"></a>ScheduledThreadPoolExecutor实现原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> time; <span class="comment">// 任务要被执行的具体时间，当前时间大于等于time值时被执行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> sequenceNumber; <span class="comment">// 任务被添加到Executor时的序号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> period; <span class="comment">// 任务执行的间隔周期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>提交任务<br>ScheduledThreadPoolExecutor接受实现了RunnableScheduledFuture接口的ScheduledFutureTask实例。通过scheduleAtFixedRate()方法或者scheduleWithFixedDelay()方法提交，放在<code>DelayQueue&lt;RunnableScheduledFuture&gt;</code>中。<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/ScheduledTaskSubmission.jpg" alt="ScheduledTask"></p>
</li>
<li><p>执行任务<br>DelayQueue封装了一个PriorityQueue, 对队列中的ScheduledFutureTask进行排序，time小的排在前面。如果time值相同，则sequenceNumber小的在前面。</p>
</li>
<li><p>放回任务<br>对于执行过的周期任务，time值被重置为下一次的执行时间，并且将task放回DelayQueue中。</p>
</li>
</ol>
<h3 id="DelayQueue部分实现原理"><a href="#DelayQueue部分实现原理" class="headerlink" title="DelayQueue部分实现原理"></a>DelayQueue部分实现原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayQueue</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Delayed</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLoc lock;</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;E&gt; q;</span><br><span class="line">    <span class="keyword">private</span> Thread leader;</span><br><span class="line">    <span class="keyword">private</span> Condition available;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly(); <span class="comment">// 处理队列需要获得锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">first</span> <span class="operator">=</span> q.peek();<span class="comment">// 线程锁住等待直到有task出现</span></span><br><span class="line">                <span class="keyword">if</span>( first == <span class="literal">null</span>) &#123;</span><br><span class="line">                    available.await();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">deplay</span> <span class="operator">=</span> first.getDelay(TimeUnit.NANOSECONDS);</span><br><span class="line">                    <span class="keyword">if</span>(delay &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="type">long</span> <span class="variable">tl</span> <span class="operator">=</span> available.awaitNanos(delay); <span class="comment">// wait nanoseonds for task to be ready to execute.</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">E</span> <span class="variable">x</span> <span class="operator">=</span> q.poll(); <span class="comment">// when task is ready, take the task and do</span></span><br><span class="line">                        <span class="keyword">assert</span> x != <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">if</span>( q.size() != <span class="number">0</span>)</span><br><span class="line">                            available.signalAll(); <span class="comment">//release condition</span></span><br><span class="line">                        <span class="keyword">return</span> x;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">E</span> <span class="variable">first</span> <span class="operator">=</span> q.peek(); </span><br><span class="line">            q.offer(e); <span class="comment">// 拿到锁后放入这个queue</span></span><br><span class="line">            <span class="keyword">if</span>(first == <span class="literal">null</span>) || e.compareTo(first) &lt; <span class="number">0</span>)</span><br><span class="line">                available.singalAll(); <span class="comment">// 检查task是否到期可以执行，如果ready触发take的线程。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ForkJoinPool-框架实现原理"><a href="#ForkJoinPool-框架实现原理" class="headerlink" title="ForkJoinPool 框架实现原理"></a>ForkJoinPool 框架实现原理</h2><p>ForkJoinPool由ForkJoinTask数组和ForkJoinWorkerThread数组组成，前者用于存放程序提交的任务，ForkJoinWorkerThread数组负责执行任务。</p>
<p>算法执行分两段，fork阶段将任务分割到足够小，创建&#x2F;唤醒一个工作线程执行；join阶段将任务的结果收集合并结果得到最后的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinTask</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ForkJoinTask&lt;V&gt; <span class="title function_">fork</span><span class="params">()</span> &#123;</span><br><span class="line">        ((ForkJoinWorkerThread) Thread.currentThread()).pushTask(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">join</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(doJoin() != NORMAL)</span><br><span class="line">            <span class="keyword">return</span> reportResult();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> getRawResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> V <span class="title function_">reportResult</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> s; Throwable ex;</span><br><span class="line">        <span class="keyword">if</span>((s = status) == CANCELLED)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CancellationException</span>();</span><br><span class="line">        <span class="keyword">if</span>(s == EXCEPTIONAL &amp;&amp; (ex = getThrowableException()) != <span class="literal">null</span>)</span><br><span class="line">            UNSAFE.throwException(ex);</span><br><span class="line">        <span class="keyword">return</span> getRawResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">doJoin</span><span class="params">()</span>&#123;</span><br><span class="line">        Thread t; ForkJoinWorkerTHread w; <span class="type">int</span> s; <span class="type">boolean</span> completed;</span><br><span class="line">        <span class="keyword">if</span>((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkThread) &#123;</span><br><span class="line">            <span class="keyword">if</span> (( s = STATUS)  &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">            <span class="keyword">if</span>( ((w = (ForkJoineWorkerThread)t).unpushTask(<span class="built_in">this</span>))) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    completed = exec();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable rex) &#123;</span><br><span class="line">                    <span class="keyword">return</span>  setExceptionalCompletion( rex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(completed)</span><br><span class="line">                    <span class="keyword">return</span> setCompletion(NORMAL);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> w.joinTask(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> exeternalAwaitDone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinWorkerThread</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">pushTask</span><span class="params">(ForkJoinTask&lt;?&gt; t)</span> &#123;</span><br><span class="line">        ForkJoinTask&lt;?&gt;[] q; <span class="type">int</span> s, m;</span><br><span class="line">        <span class="keyword">if</span>((q = quque) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">u</span> <span class="operator">=</span> (((s = queueTop) &amp; (m = q.length - <span class="number">1</span>)) &lt;&lt; ASHIFT) + ABASE;</span><br><span class="line">            UNSAFE.putOrderObject(q, u, t);</span><br><span class="line">            queueTop = s + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((s -= queueBase) &lt;= <span class="number">2</span>)</span><br><span class="line">                pool.singalWork();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s == m)</span><br><span class="line">                growQuque();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="异步执行机制"><a href="#异步执行机制" class="headerlink" title="异步执行机制"></a>异步执行机制</h1><h2 id="FutureTask实现原理"><a href="#FutureTask实现原理" class="headerlink" title="FutureTask实现原理"></a>FutureTask实现原理</h2><p>FutureTask实现了Future, Runnable接口。是Executor的执行任务单元，也可以由调用线程直接执行FutureTask.run()。FutureTask的get方法能阻塞当前线程，等待任务执行结果再执行下文。</p>
<p>FutureTask通过内部聚合的AQS的子类实现完成FUtureTask的获取和释放操作。队列中的每个FutureTask实例的get方法并不以一定需要在run方法之前执行，get方法会阻塞调用线程直到run方法被执行完成。每个任务只会执行一次，并且会有定义好的执行顺序，从get方法调用线程恢复执行上下文，从而达到异步调用的效果。类似.NET中的beginInvoke和endInvoke方法。<br><img src="/2019/12/24/Java/Java-Concurrency-In-Depth/FutureTask.jpg" alt="Future"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTask</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">Future</span>&lt;V&gt;, Runnable&#123;</span><br><span class="line">    <span class="keyword">private</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        Callable.call();</span><br><span class="line">        ...</span><br><span class="line">        AQS.compareAndSetState(<span class="type">int</span> expect, <span class="type">int</span> update);</span><br><span class="line">        ...</span><br><span class="line">        AQS.releaseShared(<span class="type">int</span> arg);</span><br><span class="line">        ...</span><br><span class="line">        FutureTask.done();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        AQS.acquireSharedInterruptily(<span class="type">int</span> arg);</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">innerGet</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerRun</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">innerCancel</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CompletableFuture实现原理"><a href="#CompletableFuture实现原理" class="headerlink" title="CompletableFuture实现原理"></a>CompletableFuture实现原理</h2><p>CompletableFuture实现了Future，CompletionStage接口，后者接口增加了更多对任务流程的控制接口，可以直接通过接口实现回调函数的定义。</p>
<h2 id="从有限状态机机制理解Scheduler的实现原理"><a href="#从有限状态机机制理解Scheduler的实现原理" class="headerlink" title="从有限状态机机制理解Scheduler的实现原理"></a>从有限状态机机制理解Scheduler的实现原理</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrency</title>
    <url>/2018/12/12/Java/Java-Concurrency/</url>
    <content><![CDATA[<h1 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h1><p>线程是一种轻量级的进程内的执行单元，线程共用进程中的内存地址空间，但是拥有自己的调用栈，寄存器，程序计数器和局部变量。线程状态如下：</p>
<p><img src="/2018/12/12/Java/Java-Concurrency/ThreadStatus.jpg" alt="ThreadStatus"></p>
<ol>
<li>新建状态(New) : 线程对象被创建后，就进入了新建状态。例如，Thread thread &#x3D; new Thread()。</li>
<li>就绪状态(Runnable): 也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如，thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。</li>
<li>运行状态(Running) : 线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。</li>
<li>阻塞状态(Blocked)  : 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ol>
<li>等待阻塞 – 通过调用线程的wait()方法，让线程等待某工作的完成。</li>
<li>同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。</li>
<li>其他阻塞 – 通过调用线程的sleep()或join()或发出了I&#x2F;O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I&#x2F;O处理完毕时，线程重新转入就绪状态。</li>
</ol>
</li>
<li>死亡状态(Dead&#x2F;Terminated)    : 线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>
</ol>
<h1 id="多线程概念"><a href="#多线程概念" class="headerlink" title="多线程概念"></a>多线程概念</h1><p>多线程是利用线程并行和并发处理的优势提升程序性能的一种编程方法。</p>
<p>优点：</p>
<ol>
<li>可以使每个线程做自己的任务，代码上语义更明确</li>
<li>利用多核CPU的优势</li>
<li>可以把占据时间长如阻塞UI的任务放到后台处理从而保证界面&#x2F;线程响应</li>
<li>可以提升CPU利用率，通过回调方式而不是阻塞方式处理IO操作</li>
</ol>
<p>缺点：</p>
<ol>
<li>线程安全问题（脏数据，死锁）</li>
<li>性能问题（活锁，饥饿，上下文切换开销）</li>
<li>线程本身需要更多的内存</li>
</ol>
<h1 id="线程管理的基本工具（及Executor框架）"><a href="#线程管理的基本工具（及Executor框架）" class="headerlink" title="线程管理的基本工具（及Executor框架）"></a>线程管理的基本工具（及Executor框架）</h1><h2 id="创建一个新线程"><a href="#创建一个新线程" class="headerlink" title="创建一个新线程"></a>创建一个新线程</h2><ol>
<li><p>Thread类是一个实体类，继承Thread类，重写RUN方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 也可以 public class MyThread extends Thread &#123;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>;i++)&#123;</span><br><span class="line">            sychronized(o)&#123;</span><br><span class="line">                number++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现RUNABLE 接口，实例对象作为THREAD的构造函数的传参。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li>
<li><p>实现CALLABLE接口，通过FUTURETASK来创建</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//return the thread name executing this callable task</span></span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    Callable&lt;String&gt; oneCallable = <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">    FutureTask&lt;String&gt; oneTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;String&gt;(oneCallable);</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(oneTask);</span><br><span class="line">    System.out.println(Thead.currentThread().getName());</span><br><span class="line"></span><br><span class="line">    t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>通过线程池本身ThreadPoolExecutor进行task管理。线程池是一个功能强大的多线程工具，在每一个新的Runnable提交的时候，会有如下流程处理：<img src="/2018/12/12/Java/Java-Concurrency/workflow.jpg" alt="Workflow"><br>在线程池处理task过程中，会需要如下参数控制流程：<img src="/2018/12/12/Java/Java-Concurrency/Threadpool.jpg" alt="ThreadPool.jpg"></p>
</li>
<li><p>通过线程池工厂Executors生成<a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html">ExecutorService</a>接口下的实例,创建并执行任务。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">const <span class="type">int</span> <span class="variable">POOL_NUM</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 通过 Executors 静态方法创建一个线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(POOL_NUM);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; POOL_NUM); i++) &#123;</span><br><span class="line">    es.execute(oneTask);</span><br><span class="line">    <span class="comment">//Future&lt;String&gt; anotherTask = es.submit(oneCallabe);也可以执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类似Task in c#</span></span><br><span class="line"><span class="keyword">while</span>(oneTask.isDone())&#123;</span><br><span class="line">    System.out.println(oneTask.get());</span><br><span class="line">&#125;</span><br><span class="line">es.shutdown();</span><br></pre></td></tr></table></figure>

<h2 id="通过Object方法控制线程并发"><a href="#通过Object方法控制线程并发" class="headerlink" title="通过Object方法控制线程并发"></a>通过Object方法控制线程并发</h2><p>wait&#x2F;notify(wait(), await(), notify() notifyAll())是Object的方法，运用了实例本身的锁功能控制多线程的并发访问和修改问题。<br>    * wait的语义是释放当前拿到的锁，让本线程进入睡眠状态。<br>    * notify的语义是通知其他线程唤醒，让原本是waiting状态的线程变成了blocked（同步块中释放锁，重新等待拿锁恢复同步块内代码wait()后继续执行）。</p>
<p>一般的应用场景是，wait释放锁，notify别的线程来拿锁，并唤醒继续执行。这些方法必须在已经获得锁的同步块中书写，否则会抛出illeagalmonitorStateException。这属于线程的基本工具，一般推荐使用已有的并发框架，而非此类方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the standard idiom for using the wait method</span></span><br><span class="line">synchonized(o)&#123;</span><br><span class="line">    <span class="comment">// 防止线程被无意唤醒，需要while loop保证代码安全</span></span><br><span class="line">    <span class="keyword">while</span>(!condition)&#123;</span><br><span class="line">        o.wait();</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="comment">// notifyAll能保证需要被唤醒的线程的活性。如果都在等待同一个条件，可以用notify()</span></span><br><span class="line">        o.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// do something when condition is fulfilled.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程调度器Scheduler"><a href="#线程调度器Scheduler" class="headerlink" title="线程调度器Scheduler"></a>线程调度器Scheduler</h2><ol>
<li>static Thread.yeild()：可以让步出当前线程的优先级，让其他同优先级的线程先跑。</li>
<li>Thread.join(): 当前线程等待一个线程t（join的实例）完成后再继续执行。类似于 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">    <span class="comment">// if t is alive, keep waiting</span></span><br><span class="line">    <span class="keyword">while</span>(isAlive())&#123;</span><br><span class="line">        wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// continue current thread</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>static Thread.sleep(): 保持拿锁，线程睡眠一定时间。与wait()不同之处在于前者锁并没有释放。</li>
<li>Thread.interrupt(): 调用中断的线程去中断别的线程，被中断的线程如果处于等待&#x2F;睡眠状态，会抛出InterrupException，如果处于阻塞于IO状态，会抛出ClosedByInterruptException，并且连接中断，如果阻塞与selector，则会出发selector’s wakeup方法，并且状态Thread.interrupted()变成true。其他情况，直接Thread.isInterrupted()&#x2F;static Thread.interrupted()变成true。在异常处理完毕后，线程的中断标志位会复位，从而允许再一次中断。</li>
<li>Deprecated方法有suspend(),resume()，stop()能让线程暂停,恢复运行和完全停止。需要留意的是线程被suspend和stop并不会释放线程已经拿到的锁，所以不是一个很好的终止线程的方法，而中断则可以在异常捕捉处理好锁释放，资源释放的逻辑。</li>
</ol>
<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><ol>
<li><p>volatile, synchronized（略）</p>
</li>
<li><p>wait&#x2F;notify(略)</p>
</li>
<li><p>pipewriter&#x2F;pipereader：将管道的输出连接到其他线程的输入从而达到通信目的。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Piped</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">PipedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedWriter</span>();</span><br><span class="line">        <span class="type">PipedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedReader</span>();</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        out.connect(in);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">printThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Print</span>(in), <span class="string">&quot;PrintThread&quot;</span>);</span><br><span class="line">        printThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">receive</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>((receive = System.in.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                out.write(receive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Print</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> PipedReader in;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Print</span><span class="params">(PipedReader in)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.in = in;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">receive</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>((receive = in.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.print((<span class="type">char</span>) receive);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>join（略）</p>
</li>
<li><p>ThreadLocal: ThreadLocal集合类型可以为线程提供局部变量，在多线程场景下，保证线程自由变量的安全。常用于AOP代码，例如计时器。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Profiler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; TIME_THREADLOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Long&gt;()&#123;</span><br><span class="line">        <span class="keyword">protected</span> Long <span class="title function_">initialValue</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        TIME_THREADLOCAL.set(Stystem.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() - TIME_THREADLOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Profiler.begin();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Cost: &quot;</span> + Profiler.end() + <span class="string">&quot; mills&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Exchanger类: Exchanger是一个用于线程间协作的工具类。Exchanger创建了一个同步点，当两个线程都到达同步点时，数据进行交换。应用场景如下：</p>
</li>
</ol>
<ul>
<li><p>遗传算法（1&#x2F;2基因数据交换)</p>
</li>
<li><p>校对工作（AB岗两人进行录入对稿）</p>
<p>  Exchanger使用示例：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangerTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Exchanger&lt;String&gt; exgr = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;String&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">A</span> <span class="operator">=</span> <span class="string">&quot;流水数据A&quot;</span>;</span><br><span class="line">                    <span class="comment">//A录入银行流水数据</span></span><br><span class="line">                    exgr.exchange(A);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">B</span> <span class="operator">=</span> <span class="string">&quot;流水数据B&quot;</span>;</span><br><span class="line">                    <span class="comment">//B录入银行流水</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">A</span> <span class="operator">=</span> exgr.exchange(B);</span><br><span class="line">                    System.out.println(<span class="string">&quot;A和B数据是否一致：&quot;</span> + A.equals(B));</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="线程上下文管理工具"><a href="#线程上下文管理工具" class="headerlink" title="线程上下文管理工具"></a>线程上下文管理工具</h2><ol>
<li><p>Executor框架</p>
<p> Executor框架定义了各个Task在线程池&#x2F;单线程执行的上下文。Developer可以自己实现Executor框架来自定义Task执行上下文。Executor支持的线程池框架有ThreadPoolExecutor和ScheduleThreadPoolExecutor，主要负责处理相对独立的任务。</p>
<p> 在新线程执行</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPerTask</span> <span class="keyword">implements</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">( Runnable task)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 在同一个线程执行</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InThreadTask</span> <span class="keyword">implements</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">( Runnable task)</span>&#123;</span><br><span class="line">        task.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> ExecutorService接口扩展了Executor接口，支持更加多的接口去控制executor的周期。当ExecutorService被shutdown()后，不再接受submit(),当其执行完所有task后，就终止。</p>
<ul>
<li><p>Running &#x3D;&#x3D;&#x3D;&gt;</p>
</li>
<li><p>Shutting down &#x3D;&#x3D;&#x3D;&gt;</p>
</li>
<li><p>Terminated</p>
</li>
<li><p>CoompletionService</p>
</li>
</ul>
<p> Executor和BlockingQueue的组合。</p>
</li>
<li><p>Fork&#x2F;Join框架</p>
<p> Fork&#x2F;Join框架适合大量task并发执行,由于task可以在不同的线程进行根据空闲程度自由调度，所以具有特定的执行设计场景（一般是只读场景）:</p>
<ol>
<li>归并排序</li>
<li>map&#x2F;reduce</li>
<li>递归多线程计算</li>
</ol>
<p> ForkJoinPool线程池是Fork&#x2F;Join执行框架的线程池，也是Executor框架的一种。也是CompletableFuture的底层线程池实现。</p>
<p> Fork&#x2F;Join使用示例<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">//阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CountTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果任务足够小就计算任务</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">canCompute</span> <span class="operator">=</span> (end - start) &lt;= THRESHOLD;</span><br><span class="line">        <span class="keyword">if</span> ( canCompute) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果任务大于阈值，就分裂成两个子任务计算</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">CountTask</span> <span class="variable">leftTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(start, middle);</span><br><span class="line">            <span class="type">CountTask</span> <span class="variable">rightTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(middle + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行子任务</span></span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line">            <span class="comment">//等待子任务执行完，并取到结果</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">leftResult</span> <span class="operator">=</span> leftTask.join();</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightResult</span> <span class="operator">=</span> rightTask.join();</span><br><span class="line">            <span class="comment">//合并结果</span></span><br><span class="line">            sum = leftResult + rightResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        <span class="comment">//生成一个计算任务，负责计算1+2+3+4</span></span><br><span class="line">        <span class="type">CountTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//执行任务</span></span><br><span class="line">        Future&lt;Integer&gt; result = forkJoinPool.submit(task);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//检查task执行结果</span></span><br><span class="line">            <span class="keyword">if</span>(task.isCompletedAbnormally()) &#123;</span><br><span class="line">                System.out.println(task.getException());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>BlockingQueue阻塞队列</p>
</li>
</ol>
<p>提供两个可以阻塞当前线程的方法扩展Queue的操作，常用于生产者和消费者场景。</p>
<ul>
<li>take() 移除元素，当队列为空时，获取元素的线程会等待队列变为非空。</li>
<li>put() 增加元素，当队列满的时候，队列会阻塞插入元素的线程，直到队列不满。</li>
</ul>
<p><img src="/2018/12/12/Java/Java-Concurrency/BlockingQueue.png" alt="BlockingQueues"></p>
<p>阻塞队列支持四种处理方式，如上图所示，包含7个阻塞队列：</p>
<ol>
<li>ArrayBlockingQueue, 由数组结构组成的有界阻塞队列。</li>
<li>LinkedBlockingQueue, 由链表结构组成的有界阻塞队列。</li>
<li>PriorityBlockingQueue, 支持优先级排序的无界阻塞队列。</li>
<li>SynchronousQueue，一个不存储元素的阻塞队列。</li>
<li>DelayQueue, 使用优先级队列实现的无界阻塞队列。</li>
<li>LinkedTransferQueue, 链表结构组成的无界阻塞队列。</li>
<li>LinkedBlockingDeque, 链表结构组成的双向阻塞队列。</li>
</ol>
<h2 id="线程同步器Synchronizer"><a href="#线程同步器Synchronizer" class="headerlink" title="线程同步器Synchronizer"></a>线程同步器Synchronizer</h2><p>同步器是使线程能够等待另一个线程，允许他们协调动作的工具类。</p>
<ol>
<li>信号量Semaphore</li>
</ol>
<p>信号量是用来控制同时访问特定资源的线程数量的锁，某个时候只能由n个线程同时访问该同步资源，n&#x3D;1时候信号量和简单互斥锁一样。</p>
<ol start="2">
<li>CountDownLatch</li>
</ol>
<p>CountDownLatch允许一个或多个线程等待其他线程完成操作。当这n个线程都完成时，当前等待线程再执行, CountDownLatch内部的计数器不能重置。</p>
<ol start="3">
<li>CyclicBarrier</li>
</ol>
<p>CyclicBarrier，让一组线程到达一个同步点后再一起继续运行，在其中任意一个线程未达到同步点，其他到达的线程均会被阻塞。</p>
<ol start="4">
<li>Phaser</li>
</ol>
<p>Phaser可以理解为CyclicBarrier的更复杂应用，通过控制每个阶段的锁来控制线程行为。Phaser在n个线程完成一个阶段后才进入下一个多线程阶段。</p>
<ol start="5">
<li>Condition 类</li>
</ol>
<p>Condition类提供了wait(), notify(), notifyAll()接口方法，可以灵活制定锁的行为，同时避免了锁和object的一对一对应关系。condition.wait()释放锁等待，condition.signal()唤醒等待的线程（需要尽快释放锁保证notify成功)。Condition类是BlockingQueue实现的关键类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BoundedBuffer</span> &#123;</span><br><span class="line">   <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">   <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span>  <span class="operator">=</span> lock.newCondition(); </span><br><span class="line">   <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition(); </span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> Object[] items = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span> putptr, takeptr, count;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Object x)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     lock.lock();</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (count == items.length)</span><br><span class="line">         notFull.await();</span><br><span class="line">       items[putptr] = x;</span><br><span class="line">       <span class="keyword">if</span> (++putptr == items.length) putptr = <span class="number">0</span>;</span><br><span class="line">       ++count;</span><br><span class="line">       notEmpty.signal();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     lock.lock();</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">         notEmpty.await();</span><br><span class="line">       <span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> items[takeptr];</span><br><span class="line">       <span class="keyword">if</span> (++takeptr == items.length) takeptr = <span class="number">0</span>;</span><br><span class="line">       --count;</span><br><span class="line">       notFull.signal();</span><br><span class="line">       <span class="keyword">return</span> x;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>LockSupport 类<br>LockSupport定义了一组公共静态方法，是一个基础工具，提供了线程阻塞和唤醒功能。</li>
</ol>
<table>
<thead>
<tr>
<th align="left">方法名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">park()</td>
<td align="center">阻塞当前线程，如果调用unpark()，park()才会返回</td>
</tr>
<tr>
<td align="left">parkNanos(long nanos</td>
<td align="center">阻塞当前线程不超过nanos秒</td>
</tr>
<tr>
<td align="left">parkUntil(long deadline)</td>
<td align="center">阻塞当前线程，直到deadline时间</td>
</tr>
<tr>
<td align="left">unpark(Thread t)</td>
<td align="center">唤醒处于阻塞状态的线程t</td>
</tr>
</tbody></table>
<h1 id="多线程问题"><a href="#多线程问题" class="headerlink" title="多线程问题"></a><strong>多线程问题</strong></h1><ol>
<li>数据访问问题（读写）</li>
<li>资源生产与消费问题（生产者-消费者模式）&lt;&#x3D; 常用来解决数据的强耦合问题</li>
</ol>
<p>下文会展开描述这两类问题。</p>
<h2 id="多线程数据读写访问问题（同步-x2F-并发问题）"><a href="#多线程数据读写访问问题（同步-x2F-并发问题）" class="headerlink" title="多线程数据读写访问问题（同步&#x2F;并发问题）"></a>多线程数据读写访问问题（同步&#x2F;并发问题）</h2><p>由于多线程情况下JVM的内存模型，实际上是存在主内存和工作内存之间的同步问题。读写操作实际上是read-load, store-write操作，在多线程并发时，操作的并发会导致主内存和工作内存某变量值的不同步问题。</p>
<h3 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h3><p>synchronized可以在三个地方使用，一种是在方法体内部，可以进行instance level或者class level(通过synchronized(AccountSync.Class))进行锁定。最后一种是在一个代码块进行锁定，可以指定拿锁的object。</p>
<ul>
<li><p>当synchronized锁定在（静态）方法级别，所有（静态）method只能有一个method被线程调用，其他线程需要等待。同一个线程可重入synchronized区块&#x2F;方法。</p>
</li>
<li><p>当synchronized锁定在instance级别时，取决于instance的状态，所有需要拿该instance的线程需要等待。也就是说，即使是同一个instance的不同的synchronized method，在某时刻，只能有一个线程访问其中某个synchronized method。</p>
</li>
<li><p>当synchronized锁定在block级别是，需要制定block的owner，即一个object，只有拿到了该object的锁，才能执行相应的block。只是比较推荐的方法，因为可以最小化同步块，同时也能避免基类方法和父类方法的访问造成的“互相绊住脚”的行为。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountSync</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [])</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(o)&#123;</span><br><span class="line">            <span class="comment">//synchronized block </span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// lock class level access</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html">Lock</a>是java的一个interface，所有实现了该接口的类型都具有锁的特质。</p>
<ol>
<li><p>不可重入锁（简单锁）<br>Java底层为每个object提供了mutex，没有拿到锁的线程需要忙等待，没有优先级控制。<br>简单锁本身在java内部没有直接的实现，可以通过Semaphore计数值为1来实现。</p>
</li>
<li><p>可重入锁<a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html">ReentrantLock</a><br>同一个线程可以重复进入该锁（不会因为同步代码自己调用自己而被死锁）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">l.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// must in finally 解锁。</span></span><br><span class="line">    l.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>读写锁<br>读写锁是两个锁，分别对应<br><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html">ReentrantReadWriteLock.ReadLock</a>,<a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html">ReentrantReadWriteLock.WriteLock</a>。</li>
</ol>
<p>读锁，没有线程hold写锁的时候，写锁可以给出，或者读锁可以给多线程访问。<br>写锁，没有线程hold读锁和写锁的时候，读锁可以给出，一旦写锁先被hold，读锁是不允许再被hold。</p>
<p>读写锁的特性如下：</p>
<p><img src="/2018/12/12/Java/Java-Concurrency/RWLock.png" alt="RWLock.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteMap</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Data&gt; m = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String, Data&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">rw1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">r</span> <span class="operator">=</span> rw1.readLock();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">w</span> <span class="operator">=</span> rw1.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Data <span class="title function_">get</span> <span class="params">(String key)</span>&#123;</span><br><span class="line">        r.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m.get(key)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; r.unlock();&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Data <span class="title function_">put</span> <span class="params">(String key, Data value)</span>&#123;</span><br><span class="line">        w.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> m.put(key, value);</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            w.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="并发集合Concurrent-collection"><a href="#并发集合Concurrent-collection" class="headerlink" title="并发集合Concurrent collection"></a>并发集合Concurrent collection</h3><ol>
<li>ConcurrentHashMap</li>
</ol>
<blockquote>
<p><a href="https://www.cnblogs.com/ITtangtang/p/3948786.html">https://www.cnblogs.com/ITtangtang/p/3948786.html</a></p>
</blockquote>
<p>HashMap并发问题：</p>
<blockquote>
<p> HashTable容器使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用get方法来获取元素，所以竞争越激烈效率越低。</p>
</blockquote>
<p>ConcurrentHashMap解决并发问题:</p>
<blockquote>
<p>ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。有些方法需要跨段，比如size()和containsValue()，它们可能需要锁定整个表而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁。这里“按顺序”是很重要的，否则极有可能出现死锁，在ConcurrentHashMap内部，段数组是final的，并且其成员变量实际上也是final的，但是，仅仅是将数组声明为final的并不保证数组成员也是final的，这需要实现上的保证。这可以确保不会出现死锁，因为获得锁的顺序是固定的。</p>
</blockquote>
<p>ConcurrentHashMap的使用和HashMap相同，API如下:</p>
<pre><code>|API名|操作含义|
|:---|:---:|
|get()|拿key对应的value|
|put()|放元素V|
|size()|获取大小|
|remove()|删除元素|
|putIfAbsent()|存放元素如果没有|
</code></pre>
<ol start="2">
<li>ConcurrentLinkedQueue<br>线程安全队列有两种实现方式，一种是阻塞算法加锁，另一种是使用循环CAS的方式。ConcurrentLinkedQueue采用的是后者，基于链接节点的无界限线程安全队列。</li>
</ol>
<p>offer()是入队，将节点添加到队尾。<br>poll()是出队，将首节点拿出。</p>
<p><strong>减少死锁优化</strong></p>
<ul>
<li>减少锁的持有时间（同步方法改同步块）</li>
<li>减少锁的粒度（CONCURRENT HASHMAP）</li>
<li>锁分离（读写锁，读锁写锁）（LinkedBlockingQueue，PUT一把锁，锁尾巴，TAKE一把锁锁头）</li>
</ul>
<h3 id="无锁并发工具"><a href="#无锁并发工具" class="headerlink" title="无锁并发工具"></a>无锁并发工具</h3><p>在多核操作系统中，Java提供了很多无锁并发工具。没有需要加锁的需要，避免了developer自己处理线程的阻塞行为，减少这部分开销。原来某些需要锁的场景，通过限制计算机指令执行和强制线程内部缓存失效，可以达到并发读写的需求，而不需要用锁来控制线程访问。</p>
<ol>
<li>volatile 关键字</li>
</ol>
<p>volatile的读写，可以看作是一个锁，对该变量的读写操作进行了同步。概括的说，保证内存可见性，防止指令重排序。</p>
<ol start="2">
<li>final 关键字</li>
</ol>
<p>凡是对成员变量或者本地变量(在方法中的或者代码块中的变量称为本地变量)声明为final的都叫作final变量。final变量经常和static关键字一起使用，作为常量。final变量能保证其初始化的同步操作。</p>
<ol start="3">
<li>原子操作</li>
</ol>
<p>原子操作是指不受多线程影响的最基本单元操作，可以保证同步。<br>Java在JVM层面也支持了同步，lock-free操作，利用CAS无所算法和乐观锁假设(仅在修改数据时候检查锁状态，适合并发修改比较少的情况)。底层是基于读写锁实现。</p>
<blockquote>
<p>CAS是利用CPU的CAS指令，同时借助JNI来完成Java的非阻塞算法,实现原子操作。是直接调用CPU 的cmpxchg（是汇编指令）指令。</p>
</blockquote>
<blockquote>
<p>CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>
</blockquote>
<p>下列操作为原子操作：</p>
<ol>
<li>all assignment of primitive types except for long and double. （并不是说primitive types的所有操作都是原子操作）</li>
<li>all assignment of references</li>
<li>all operations of Java.Concurrent.Atomic.* classes</li>
<li>all assignments to volatile longs and doubles</li>
</ol>
<p><strong>原子类型by Java</strong></p>
<p>java.util.concurrent.atomic包提供了primitive类型的atomic类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。但是使用方法和primitive类型完全不同，atomic类型里提供了各种操作方法保证方法&#x2F;方法流执行的原子性。</p>
<ul>
<li>AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference</li>
</ul>
<p>通过原子的方式更新数组里的某个元素，Atomic包提供了以3类</p>
<ul>
<li>AtomicIntegerArray，AtomicLongArray,AtomicReferenceArray</li>
</ul>
<p>如果需原子地更新某个类里的某个字段时，就需要使用原子更新字段类，Atomic包提供了以下3个类进行原子字段更新。</p>
<ul>
<li>AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicIntegerFieldUpdaterTest</span> &#123; </span><br><span class="line">    <span class="comment">// 创建原子更新器,并设置需要更新的对象类和对象的属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicIntegerFieldUpdater&lt;User&gt; a = </span><br><span class="line">            AtomicIntegerFieldUpdater.newUpdater(User.class, <span class="string">&quot;old&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="comment">// 设置柯南的年龄是10岁</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">conan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;conan&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 柯南长了一岁，但是仍然会输出旧的年龄</span></span><br><span class="line">        System.out.println(a.getAndIncrement(conan));</span><br><span class="line">        <span class="comment">// 输出柯南现在的年龄</span></span><br><span class="line">        System.out.println(a.get(conan));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">int</span> old;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> old)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.old = old;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOld</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="多线程的资源生产与消费问题"><a href="#多线程的资源生产与消费问题" class="headerlink" title="多线程的资源生产与消费问题"></a>多线程的资源生产与消费问题</h2><p>Java的Vector容器实际上是线程安全的数据结构，也就是说Vector的各个操作都能保证其原子性，但是也会存在多线程问题。这是因为在Vector的删除和添加操作中，如果存在多线程并发，删除操作的对象是可能是一个空Vector容器，造成问题。Developer需要有很好的上下文控制来避免这种生产消费问题。</p>
<h3 id="多线程管理工具"><a href="#多线程管理工具" class="headerlink" title="多线程管理工具"></a>多线程管理工具</h3><h4 id="Object方法"><a href="#Object方法" class="headerlink" title="Object方法"></a><a href="#%E9%80%9A%E8%BF%87Object%E6%96%B9%E6%B3%95%E6%8E%A7%E5%88%B6%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91">Object方法</a></h4><h4 id="线程调度器"><a href="#线程调度器" class="headerlink" title="线程调度器"></a><a href="#%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8Scheduler">线程调度器</a></h4><h4 id="线程同步器"><a href="#线程同步器" class="headerlink" title="线程同步器"></a><a href="#%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%99%A8Synchronizer">线程同步器</a></h4><h4 id="线程上下文管理工具-1"><a href="#线程上下文管理工具-1" class="headerlink" title="线程上下文管理工具"></a><a href="#%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">线程上下文管理工具</a></h4><h1 id="题外话：C-多线程工具"><a href="#题外话：C-多线程工具" class="headerlink" title="题外话：C#多线程工具"></a>题外话：C#多线程工具</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Memory Model</title>
    <url>/2018/12/24/Java/Java-Memory-Model/</url>
    <content><![CDATA[<p>本文将从JMM的理论模型和系统设计角度切入讲述并发工具的内存语义与实现细节。</p>
<h1 id="JMM存在的目的"><a href="#JMM存在的目的" class="headerlink" title="JMM存在的目的"></a>JMM存在的目的</h1><p>Java虚拟机规范中试图定义一种Java内存模型来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各个平台下都能达到一致的内存访问效果。</p>
<p><img src="/2018/12/24/Java/Java-Memory-Model/JMM.jpg" alt="JMM"></p>
<h1 id="JVM内存模型操作"><a href="#JVM内存模型操作" class="headerlink" title="JVM内存模型操作"></a>JVM内存模型操作</h1><p><strong>主内存操作</strong></p>
<ul>
<li>lock：将一个变量表示为一条线程独占的状态。</li>
<li>unlock: 将一个处于锁定状态的变量释放，释放后的变量才可以被其他线程锁定。</li>
<li>read: 将一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li>
<li>write: 将store操作从工作内存中得到的变量值放入主内存的变量中。</li>
</ul>
<p><strong>工作内存操作</strong></p>
<ul>
<li>load: 把read操作从主内存得到的变量值放入到工作内存的变量副本中。</li>
<li>use: 把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到需要使用变量复制的字节码指令时执行这个操作。</li>
<li>assign: 把一个执行引擎的接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。 </li>
<li>store: 把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。</li>
</ul>
<h2 id="内存操作执行基本规则"><a href="#内存操作执行基本规则" class="headerlink" title="内存操作执行基本规则"></a>内存操作执行基本规则</h2><ul>
<li><p>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</p>
</li>
<li><p>不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</p>
</li>
<li><p>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</p>
</li>
<li><p>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。</p>
</li>
<li><p>一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</p>
</li>
<li><p>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</p>
</li>
<li><p>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。</p>
</li>
<li><p>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。</p>
</li>
</ul>
<h1 id="JVM内存模型特性"><a href="#JVM内存模型特性" class="headerlink" title="JVM内存模型特性"></a>JVM内存模型特性</h1><ul>
<li>原子性 JVM对基本数据类型的访问读写（上述操作）是具备原子性的。</li>
<li>可见性 当一个线程修改了共享变量的值，其他线程能够立刻知道这个修改。而volatile变量较普通变量能够保证多线程场景下线程在每次读写前都能刷新。</li>
<li>有序性 本线程内，操作都是有序；多线程场景下，线程间操作是无序的。</li>
</ul>
<h2 id="Happen-Before先行发生法则"><a href="#Happen-Before先行发生法则" class="headerlink" title="Happen-Before先行发生法则"></a>Happen-Before先行发生法则</h2><p>先行发生是JMM中定义的两项操作之前的偏序关系，如果说操作A先行发生于操作B，其实就是说发生操作B之前，操作A产生的影响能够被B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。</p>
<p>具体体现：</p>
<ul>
<li><p><strong>程序次序规则（Program Order Rule）</strong>：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</p>
</li>
<li><p><strong>管程锁定规则（Monitor Lock Rule）</strong>：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是同一个锁，而“后面”是指时间上的先后顺序。</p>
</li>
<li><p><strong>volatile变量规则（Volatile Variable Rule）</strong>：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后顺序。</p>
</li>
<li><p><strong>线程终止规则（Thread Termination Rule）</strong>：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行。</p>
</li>
<li><p><strong>线程中断规则（Thread Interruption Rule）</strong>：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测到是否有中断发生。</p>
</li>
<li><p><strong>对象终结规则（Finalizer Rule）</strong>：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。</p>
</li>
<li><p><strong>传递性（Transitivity）</strong>：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</p>
</li>
</ul>
<h1 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h1><p>编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。</p>
<h2 id="单线程重排序："><a href="#单线程重排序：" class="headerlink" title="单线程重排序："></a>单线程重排序：</h2><ul>
<li><strong>数据依赖性</strong>：程序的任意两个操作的执行是可能具有一定的依赖性，不能改变。</li>
<li><strong>as-if-serial语义</strong>：单线程程序的执行结果不能改变。</li>
<li><strong>程序顺序规则</strong>: happens-before的顺序规则不能修改。</li>
</ul>
<h2 id="多线程重排序："><a href="#多线程重排序：" class="headerlink" title="多线程重排序："></a>多线程重排序：</h2><ul>
<li><strong>顺序一致性模型</strong>：概念上模型只有一个单一的全局内存，所有操作线程在每一步操作后看到的内存内容都是一致的。实际上并不能完全保证，只能保证同步程序在进出临界区内代码各个线程的内存视图能够一致。</li>
</ul>
<h1 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h1><p>硬件层的内存屏障分为两种：Load Barrier 和 Store Barrier即读屏障和写屏障。<br>内存屏障有两个作用：</p>
<ol>
<li>阻止屏障两侧的指令重排序；</li>
<li>强制把写缓冲区&#x2F;高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。</li>
</ol>
<p>对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据；</p>
<p>对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。</p>
<h2 id="java内存屏障"><a href="#java内存屏障" class="headerlink" title="java内存屏障"></a>java内存屏障</h2><p>java的内存屏障通常所谓的四种即LoadLoad,StoreStore,LoadStore,StoreLoad实际上也是上述两种的组合，完成一系列的屏障和数据同步功能。</p>
<ul>
<li>LoadLoad屏障：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</li>
<li>StoreStore屏障：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</li>
<li>LoadStore屏障：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</li>
<li>StoreLoad屏障：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能</li>
</ul>
<h1 id="Java同步工具的内存语义及实现"><a href="#Java同步工具的内存语义及实现" class="headerlink" title="Java同步工具的内存语义及实现"></a>Java同步工具的内存语义及实现</h1><h2 id="锁的内存语义及实现"><a href="#锁的内存语义及实现" class="headerlink" title="锁的内存语义及实现"></a>锁的内存语义及实现</h2><p>锁的语义决定了临界区代码的执行具有原子性。</p>
<h3 id="内存语义"><a href="#内存语义" class="headerlink" title="内存语义"></a>内存语义</h3><p>锁的释放可以让线程向获取同一个锁的线程发送消息。<br>锁的获取可以让线程对应的内存失效使得临界代码必须从主内存获取共享变量。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p>公平锁获取通过AbstractQueuedSynchronizer即AQS实现，通过一个整型的volatile变量state来维护同步状态。拿锁时，tryAcquire方法会查看state值是否为0，即无锁状态，并将state值设置为传入变量acquires，如果state不为0，且owner不是current线程，则返回false.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">  <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( isFirst(current)) &amp;&amp; compareAndSetState(<span class="number">0</span>, acquires) &#123;</span><br><span class="line">      setExclusiveOwnerThread(current);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(current == getExclusiveOwnerThread())&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">    <span class="keyword">if</span>(nextc &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Max lock count exceeded&quot;</span>);</span><br><span class="line">      setState(nextc);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>非公平锁的获取不需要tryAcquire方法中通过isFirst(current))方法进行竞争，而是直接调用compareAndSetState(int expect, int update)。</p>
<p>(非)公平锁释放通过tryRelease(int releases)实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span>&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - releases;</span><br><span class="line">  <span class="keyword">if</span>( Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IlleagalMonitorStateException</span>();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>( c == <span class="number">0</span>)&#123;</span><br><span class="line">      free = <span class="literal">true</span>;</span><br><span class="line">      setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CAS-内存语义及操作内容"><a href="#CAS-内存语义及操作内容" class="headerlink" title="CAS 内存语义及操作内容"></a>CAS 内存语义及操作内容</h2><h3 id="内存语义-1"><a href="#内存语义-1" class="headerlink" title="内存语义"></a>内存语义</h3><p>CAS更新操作，同时具有volatile读和volatile写的内存语义。</p>
<h3 id="操作内容"><a href="#操作内容" class="headerlink" title="操作内容"></a>操作内容</h3><p>CAS是处理器的一种操作，是native方法API。</p>
<ol>
<li>确保对内存读-改-写的原子性。</li>
<li>禁止CAS指令前后读写指令重排。</li>
<li>把缓存区的<strong>所有</strong>数据刷新到内存中。</li>
</ol>
<h2 id="volatile-内存语义及实现"><a href="#volatile-内存语义及实现" class="headerlink" title="volatile 内存语义及实现"></a>volatile 内存语义及实现</h2><h3 id="内存语义-2"><a href="#内存语义-2" class="headerlink" title="内存语义"></a>内存语义</h3><p>volatile写与锁的释放有相同的内存语义，volatile读与锁的获取有相同内存语义。</p>
<h3 id="实现细节-1"><a href="#实现细节-1" class="headerlink" title="实现细节"></a>实现细节</h3><ul>
<li><p>通过插入内存屏障，来组织编译器&#x2F;操作系统进行指令重排序。</p>
</li>
<li><p>通过关联读&#x2F;写操作和使用操作（用之前必须从主内存读，assign后必须写入主内存，以及写happens-before读规则）强制CPU的缓存失效来保证内存可见性。<br>volatile的内存屏障策略如下：</p>
</li>
<li><p>在每个volatile写操作前插入StoreStore屏障，在写操作后插入StoreLoad屏障；<br><img src="/2018/12/24/Java/Java-Memory-Model/VolatileWrite.png" alt="volatile-write"></p>
</li>
<li><p>在每个volatile读操作后分别插入LoadLoad屏障，和LoadStore屏障；<br><img src="/2018/12/24/Java/Java-Memory-Model/VolatileRead.png" alt="volatile-read"></p>
</li>
</ul>
<p>由于内存屏障的作用，避免了volatile变量和其它指令重排序、线程之间实现了通信，使得volatile表现出了锁的特性。</p>
<p>volatile强制缓存失效策略如下:</p>
<ul>
<li><p><strong>线程的Load、read和Use进行关联</strong>:只有当线程T对变量V执行的前一个动作是load的时候，线程T才能对变量V执行use动作；并且，只有当线程T对变量V执行的后一个动作是use的时候，线程T才能对变量V执行load动作。线程T对变量V的use动作可以认为是和线程T对变量V的load、read动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次使用V前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所做的修改后的值）。</p>
</li>
<li><p><strong>Assign和所有线程的store，write进行关联</strong>只有当线程T对变量V执行的前一个动作是assign的时候，线程T才能对变量V执行store动作；并且，只有当线程T对变量V执行的后一个动作是store的时候，线程T才能对变量V执行assign动作。线程T对变量V的assign动作可以认为是和线程T对变量V的store、write动作相关联，必须连续一起出现（这条规则要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改）。</p>
</li>
<li><p><strong>不同变量的上述的两段操作顺序一致</strong>假定动作A是线程T对变量V实施的use或assign动作，假定动作F是和动作A相关联的load或store动作，假定动作P是和动作F相应的对变量V的read或write动作；类似的，假定动作B是线程T对变量W实施的use或assign动作，假定动作G是和动作B相关联的load或store动作，假定动作Q是和动作G相应的对变量W的read或write动作。如果A先于B，那么P先于Q（这条规则要求volatile修饰的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同）。</p>
<blockquote>
<p>Happens before法则: 前一个操作的执行结果要对第二个操作可见。</p>
</blockquote>
</li>
</ul>
<h2 id="final-内存语义与实现细节"><a href="#final-内存语义与实现细节" class="headerlink" title="final 内存语义与实现细节"></a>final 内存语义与实现细节</h2><p>final关键字可以放在static域，实例成员域，和局部变量三种变量前。其中final修饰的局部变量的可以作为线程的局部变量传递给子线程。也能保证并发情况下的内存语义。</p>
<h3 id="内存语义-3"><a href="#内存语义-3" class="headerlink" title="内存语义"></a>内存语义</h3><p>对于final域，编译器和CPU会遵循两个重排序规则：</p>
<ul>
<li>新建对象过程中，构造体中对final域的初始化写入和这个对象赋值给其他引用变量，这两个操作不能重排序；（废话嘛）</li>
<li>初次读包含final域的对象引用和读取这个final域，这两个操作不能重排序；（晦涩，意思就是先赋值引用，再调用final值）</li>
</ul>
<p>总之上面规则的意思可以这样理解，必需保证一个对象的所有final域被写入完毕后才能引用和读取。这也是内存屏障的起的作用：</p>
<h3 id="实现细节-2"><a href="#实现细节-2" class="headerlink" title="实现细节"></a>实现细节</h3><ul>
<li><p>写final域：在编译器写final域完毕，构造体结束之前，会插入一个StoreStore屏障，保证前面的对final写入对其他线程&#x2F;CPU可见，并阻止this指针赋值与final域写被重排序(this &#x3D; new Object(){ finalField &#x3D; …})。（如果没有，普通域的写可以被重排到构造函数外）<br><img src="/2018/12/24/Java/Java-Memory-Model/FinalWrite.png" alt="final-write"></p>
</li>
<li><p>写final域的成员域:构造函数内对一个final引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。<br><img src="/2018/12/24/Java/Java-Memory-Model/FinalElementWrite.png" alt="final-element-write"></p>
</li>
<li><p>读final域：在上述规则2中，两步操作不能重排序的机理就是在读final域前插入了LoadLoad屏障，这个阻止了读取this引用和读取final域的重排序（isntance.finalField）。<br><img src="/2018/12/24/Java/Java-Memory-Model/FinalRead.png" alt="final-read"></p>
</li>
</ul>
<p>X86处理器中，由于CPU不会对写-写操作进行重排序，所以StoreStore屏障会被省略；而X86也不会对逻辑上有先后依赖关系的操作进行重排序，所以LoadLoad也会变省略。</p>
<blockquote>
<p>只要对象是正确构造的（被构造对象的引用在构造函数中没有“逸出”），那么不需要使用同步（指 lock 和 volatile 的使用），就可以保证任意线程都能看到这个 final 域在构造函数中被初始化之后的值。</p>
</blockquote>
<p>this逸出代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalReferenceEscapeExample</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">static</span> FinalReferenceEscapeExample obj;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FinalReferenceEscapeExample</span> <span class="params">()</span> &#123;</span><br><span class="line">    i = <span class="number">1</span>;                              <span class="comment">//1写final域</span></span><br><span class="line">    obj = <span class="built_in">this</span>;                          <span class="comment">//2 this引用在此“逸出”</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FinalReferenceEscapeExample</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reader &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;                     <span class="comment">//3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> obj.i;                 <span class="comment">//4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Concurrent包的内存语义及实现"><a href="#Concurrent包的内存语义及实现" class="headerlink" title="Concurrent包的内存语义及实现"></a>Concurrent包的内存语义及实现</h2><p>Concurrent包底层实现依赖如下图所示：</p>
<p><img src="/2018/12/24/Java/Java-Memory-Model/Concurrent.png" alt="Cocurrent"></p>
<h1 id="延迟初始化问题讨论"><a href="#延迟初始化问题讨论" class="headerlink" title="延迟初始化问题讨论"></a>延迟初始化问题讨论</h1><p>延迟初始化是在需要实例的时候再进行初始化，从而达到提升程序初始化性能的目的。然而延迟初始化需要考虑多线程并发访问，和指令重排序问题。</p>
<h2 id="静态域延迟初始化"><a href="#静态域延迟初始化" class="headerlink" title="静态域延迟初始化"></a>静态域延迟初始化</h2><p>静态域的延迟初始化能通过final关键词实现，因为final静态域能保证多线程安全初始化，同事也能保证computeFieldValue()方法不会溢出FieldHolder的构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FieldHolder</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FieldType</span> <span class="variable">field</span> <span class="operator">=</span> computeFieldValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> FieldType <span class="title function_">getField</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FieldHolder.field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="成员域延迟初始化"><a href="#成员域延迟初始化" class="headerlink" title="成员域延迟初始化"></a>成员域延迟初始化</h2><h3 id="单重检查模式"><a href="#单重检查模式" class="headerlink" title="单重检查模式"></a>单重检查模式</h3><p>单重检查模式能够确保大多数情况的fiel的同步，但是当computeFieldValue()执行和field赋值可以重排序，导致在第一次检查时其他线程可能看到不完整的field值，并返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> FieldType field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FieldType <span class="title function_">getField</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">FieldType</span> <span class="variable">result</span> <span class="operator">=</span> field;</span><br><span class="line">  <span class="keyword">if</span>(result == <span class="literal">null</span>)&#123;</span><br><span class="line">    field = result = computeFieldValue();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双重检查模式"><a href="#双重检查模式" class="headerlink" title="双重检查模式"></a>双重检查模式</h3><p>双重检查模式通过synchronized和volatile的内存语义，3, 4对其他线程可见，且其他线程在1处的读不会重排序到2语块的内部，能够确保在线程更新field值时，与其他线程查看field值之间的读写能够顺序执行。</p>
<p>局部变量result的使用能够保证尽量少次数的访问field和取锁，提升运行效率。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> FieldType field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FieldType <span class="title function_">getField</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">FieldType</span> <span class="variable">result</span> <span class="operator">=</span> field;</span><br><span class="line">  <span class="keyword">if</span>(result == <span class="literal">null</span>)&#123;</span><br><span class="line">    result = field;</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="literal">null</span>)&#123; <span class="comment">// 1</span></span><br><span class="line">      synchornized(<span class="built_in">this</span>)&#123; <span class="comment">// 2</span></span><br><span class="line">        field = result = computeFieldValue(); <span class="comment">//3, 4</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java NIO</title>
    <url>/2020/12/18/Java/Java-NIO/</url>
    <content><![CDATA[<h1 id="Java异步计算方法与异步网络通信框架"><a href="#Java异步计算方法与异步网络通信框架" class="headerlink" title="Java异步计算方法与异步网络通信框架"></a>Java异步计算方法与异步网络通信框架</h1><h2 id="Java异步方法"><a href="#Java异步方法" class="headerlink" title="Java异步方法"></a>Java异步方法</h2><p>异步方法(Java asynchronized programming)是提升程序性能的一个有效手段，采用已经封装好的方法，让JVM去控制线程的创建和回收管理，减少了线程的阻塞，让程序员更加关注方法的设计。</p>
<h3 id="Callable-Future-和FutureTask"><a href="#Callable-Future-和FutureTask" class="headerlink" title="Callable,Future, 和FutureTask"></a>Callable,Future, 和FutureTask</h3><ul>
<li>Callable</li>
</ul>
<p>Callable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法去在线程池中执行Callable内的任务。由于Callable任务是并行的，必须等待它返回的结果。java.util.concurrent.Future对象解决了这个问题。</p>
<p>在线程池提交Callable任务后返回了一个Future对象，使用它可以知道Callable任务的状态和得到Callable返回的执行结果。Future提供了get()方法，等待Callable结束并获取它的执行结果。</p>
<p>Callable与Runnable接口很相似，不同之处在于一个需要返回值，一个不需要。而且Callable可以抛出异常。</p>
<ul>
<li>Future和FutureTask</li>
</ul>
<p>FutureTask是Future接口的一个唯一实现类。</p>
<p>FutureTask类实现了RunnableFuture接口，RunnableFuture继承了Runnable接口和Future接口，所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</p>
<p><strong>Future接口的不足：</strong></p>
<p>Future接口可以构建异步应用，但依然有其局限性。它很难直接表述多个Future 结果之间的依赖性。实际开发中，我们经常需要达成以下目的：</p>
<pre><code>* 将两个异步计算合并为一个——这两个异步计算之间相互独立，同时第二个又依赖于第一个的结果。
* 等待 Future 集合中的所有任务都完成。
* 仅等待 Future 集合中最快结束的任务完成（有可能因为它们试图通过不同的方式计算同一个值），并返回它的结果。
* 通过编程方式完成一个 Future 任务的执行（即以手工设定异步操作结果的方式）。
* 应对 Future 的完成事件（即当 Future 的完成事件发生时会收到通知，并能使用 Future计算的结果进行下一步的操作，不只是简单地阻塞等待操作的结果）
</code></pre>
<p>在CompletableFuture中，满足了上述的目的。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/dolphin0520/p/3949310.html">https://www.cnblogs.com/dolphin0520/p/3949310.html</a></p>
</blockquote>
<h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">CompletableFuture</a></h3><p>通过静态方法产生CompletableFuture实例。CompletableFuture的底层实现原理：</p>
<table>
<thead>
<tr>
<th align="left">静态方法</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>runAsync(Runnable runnable)</code></td>
<td align="center">使用ForkJoinPool.commonPool()作为它的线程池执行异步代码。</td>
</tr>
<tr>
<td align="left"><code>runAsync(Runnable runnable, Executor executor)</code></td>
<td align="center">使用指定的thread pool执行异步代码。</td>
</tr>
<tr>
<td align="left"><code>supplyAsync(Supplier&lt;U&gt; supplier)</code></td>
<td align="center">使用ForkJoinPool.commonPool()作为它的线程池执行异步代码，异步操作有返回值</td>
</tr>
<tr>
<td align="left"><code>supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)</code></td>
<td align="center">使用指定的thread pool执行异步代码，异步操作有返回值</td>
</tr>
</tbody></table>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CompletableFuture 在调用runAsync后会立刻执行，定义的Runnable输入参入与.NET中定义的Task.Run(Action a)很相似。</span></span><br><span class="line"><span class="type">CompletableFuture</span> <span class="variable">cf</span> <span class="operator">=</span> CompletableFuture.runAsync(()=&gt; System.out.println(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">CompletableFuture&lt;String&gt; cf2 = CompletableFuture.supplierAsync(()=&gt;<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// get()方法会阻塞当前线程等待结果，类似于.NET的Task.Result属性。此接口继承于Future的get()方法，运行方式和CompletableFuture的join()一致，与之不相同的是get()会抛出InterruptedException 和ExecutionException异常需要开发者手动处理，而join()抛出的异常则交由exceptionally()中的callback进行处理。</span></span><br><span class="line">        cf.get();</span><br><span class="line">        <span class="comment">// join()方法也会阻塞当前线程，同步执行等待结果，和.NET的Task.wait()方法相似，如果有异常/在等待时被取消，会抛出相应未经过检查的exception，比如CompletionException异常 /CancellationException异常。</span></span><br><span class="line">        System.out.println(cf2.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>底层是通过一个线程池接收提交的任务，源码是用一个Executor实例执行lamda表达式，一般默认是运用ForJoinPool线程池中的线程执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">ASYNC_POOL</span> <span class="operator">=</span> USE_COMMON_POOL ?</span><br><span class="line">        ForkJoinPool.commonPool() : <span class="keyword">new</span> <span class="title class_">ThreadPerTaskExecutor</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Fallback if ForkJoinPool.commonPool() cannot support parallelism */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadPerTaskExecutor</span> <span class="keyword">implements</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable r)</span> &#123; <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">实例方法</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>thenRun(Runnable runnable)</code></td>
<td align="center">可以传入一个Lamda表达式作为后续处理方法</td>
</tr>
<tr>
<td align="left"><code>thenAccept(Comsummer&lt;? super T&gt; consummer)</code></td>
<td align="center">在异步task执行完成后传入一个Action方法来处理输出参数,如果void输出是不需要thenAccept(**),也有async版本</td>
</tr>
<tr>
<td align="left"><code>thenApply(Function&lt;? super T, ? super E&gt; function)</code></td>
<td align="center">在异步task执行完成后传入一个Func来处理输出参数，并且得出返回值，也有async版本</td>
</tr>
<tr>
<td align="left"><code>thenCombine(CompletionStage&lt;? extends U&gt; taskToBeCombined, Function&lt;? super T, ? super U&gt; function)</code></td>
<td align="center">Task并联，两个都执行完成了再继续fucntion)</td>
</tr>
<tr>
<td align="left"><code>thenCompose(Function&lt;? extends U&gt; function, CompletionStage&lt;U&gt; cf)</code></td>
<td align="center">Task串联，本task执行完成后再执行下一步</td>
</tr>
<tr>
<td align="left"><code>complete(T t)</code></td>
<td align="center">立刻返回Task的结果，并且返回值是t。当然如果Task已经异步执行完毕，则设置失效</td>
</tr>
<tr>
<td align="left"><code>completeExceptionally(Throwable x)</code></td>
<td align="center">立刻返回Task并且抛出对应的Exception。如果Task已经结束，则不变。</td>
</tr>
<tr>
<td align="left"><code>get()</code></td>
<td align="center">尝试获取结果，如果没有结束&#x2F;抛出exception&#x2F;cancel掉，都会抛出对应的exception.</td>
</tr>
<tr>
<td align="left"><code>join()</code></td>
<td align="center">join()方法会阻塞当前线程，同步执行等待结果，和.NET的Task.wait()方法相似，如果有异常&#x2F;被取消，会抛出相应的exception。</td>
</tr>
<tr>
<td align="left"><code>handle(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn)</code></td>
<td align="center">将event handler传入，待到task执行完毕后进行处理&#x2F;exception handling。也有async版本</td>
</tr>
<tr>
<td align="left"><code>exceptionally​(Function&lt;Throwable,? extends T&gt; fn)</code></td>
<td align="center">为异步方法注册exception的callback，当然也可以给该task注册下一步的方法在thenApply(..)中。</td>
</tr>
</tbody></table>
<ul>
<li>Lambda表达式</li>
</ul>
<p>在Java里，lamda表达式的实质是函数。Runnable是一种特殊的lamda表达式，也就是.NET 中的Action类型委托实例，()-&gt; { ….; return void;}</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/dff9063e1ab6">https://www.jianshu.com/p/dff9063e1ab6</a></p>
</blockquote>
<h1 id="题外话-C-异步编程方法"><a href="#题外话-C-异步编程方法" class="headerlink" title="题外话: C#异步编程方法"></a>题外话: C#异步编程方法</h1><p>C#异步编程框架依赖于CLR的实现，更加高效和简单明了，而Java的异步方法依赖线程池实现。</p>
<h1 id="Java-NIO网络编程框架"><a href="#Java-NIO网络编程框架" class="headerlink" title="Java NIO网络编程框架"></a>Java NIO网络编程框架</h1><p>在网络编程领域，节点间式依赖TCP&#x2F;UDP协议进行通信，Java提供的Socket实现在JDK 1.4以前是阻塞I&#x2F;O, 也就是说每一个Socket连接，JVM中会分配一个线程阻塞等待连接建立，数据通信，在高并发场景下会发生线程池线程用尽的情况，为了优化网络通信效率，出现了非阻塞&#x2F;异步I&#x2F;O的设计方案。</p>
<h2 id="Reactor模式设计思想"><a href="#Reactor模式设计思想" class="headerlink" title="Reactor模式设计思想"></a>Reactor模式设计思想</h2><p>Netty通信框架的设计思想是基于Reactor模式思想，这是一种基于事件驱动的设计思想。能够高效的解决很多程序设计中的线程不必要阻塞问题。Java NIO也是基于Reactor设计思想实现的，在JVM本地方法层面做到了多路复用I&#x2F;O。</p>
<p><img src="/2020/12/18/Java/Java-NIO/Reactor.png" alt="NettyNIO"></p>
<p>Reactor模式中的五个角色:</p>
<ol>
<li>Handle(句柄或描述符，在Windows下称为句柄，在Linux下称为描述符)：<br> 本质上表示一种资源(比如说文件描述符，或是针对网络编程中的socket描述符)，是由操作系统提供的；该资源用于表示一个个的事件，事件既可以来自于外部，也可以来自于内部；外部事件比如说客户端的连接请求，客户端发送过来的数据等；内部事件比如说操作系统产生的定时事件等。它本质上就是一个文件描述符，Handle是事件产生的发源地。</li>
<li>Synchronous Event Demultiplexer(同步事件分离器)：<br> 它本身是一个系统调用，用于等待事件的发生(事件可能是一个，也可能是多个)。调用方在调用它的时候会被阻塞，一直阻塞到同步事件分离器上有事件产生为止。对于Linux来说，同步事件分离器指的就是常用的I&#x2F;O多路复用机制，比如说select、poll、epoll等。在Java NIO领域中，同步事件分离器对应的组件就是Selector；对应的阻塞方法就是select方法。</li>
<li>Event Handler(事件处理器)：<br> 本身由多个回调方法构成，这些回调方法构成了与应用相关的对于某个事件的反馈机制。在Java NIO领域中并没有提供事件处理器机制让我们调用或去进行回调，是由我们自己编写代码完成的。Netty相比于Java NIO来说，在事件处理器这个角色上进行了一个升级，它为我们开发者提供了大量的回调方法，供我们在特定事件产生时实现相应的回调方法进行业务逻辑的处理，即，ChannelHandler。ChannelHandler中的方法对应的都是一个个事件的回调。</li>
<li>Concrete Event Handler(具体事件处理器)：<br> 是事件处理器的实现。它本身实现了事件处理器所提供的各种回调方法，从而实现了特定于业务的逻辑。它本质上就是我们所编写的一个个的处理器实现。</li>
<li>Initiation Dispatcher(初始分发器)：<br> 实际上就是Reactor角色。它本身定义了一些规范，这些规范用于控制事件的调度方式，同时又提供了应用进行事件处理器的注册、删除等设施。它本身是整个事件处理器的核心所在，Initiation Dispatcher会通过Synchronous Event Demultiplexer来等待事件的发生。一旦事件发生，Initiation Dispatcher首先会分离出每一个事件，然后调用事件处理器，最后调用相关的回调方法来处理这些事件。Netty中ChannelHandler里的一个个回调方法都是由bossGroup或workGroup中的某个EventLoop来调用的。</li>
</ol>
<h3 id="Reactor线程处理流程理解"><a href="#Reactor线程处理流程理解" class="headerlink" title="Reactor线程处理流程理解:"></a>Reactor线程处理流程理解:</h3><ol>
<li><p>初始化Initiation Dispatcher，然后将若干个Concrete Event Handler注册到Initiation Dispatcher中。当应用向Initiation Dispatcher注册Concrete Event Handler时，会在注册的同时指定感兴趣的事件，即，应用会标识出该事件处理器希望Initiation Dispatcher在某些事件发生时向其发出通知，事件通过Handle来标识，而Concrete Event Handler又持有该Handle。这样，事件 ————&gt; Handle ————&gt; Concrete Event Handler 就关联起来了。</p>
</li>
<li><p>Initiation Dispatcher 会要求每个事件处理器向其传递内部的Handle。该Handle向操作系统标识了事件处理器。</p>
</li>
<li><p>当所有的Concrete Event Handler都注册完毕后，应用会调用handle_events方法来启动Initiation Dispatcher的事件循环。这是，Initiation Dispatcher会将每个注册的Concrete Event Handler的Handle合并起来，并使用Synchronous Event Demultiplexer(同步事件分离器)同步阻塞的等待事件的发生。比如说，TCP协议层会使用select同步事件分离器操作来等待客户端发送的数据到达连接的socket handler上。</p>
</li>
</ol>
<p>比如，在Java中通过Selector的select()方法来实现这个同步阻塞等待事件发生的操作。在Linux操作系统下，select()的实现中:</p>
<ul>
<li><p>会将已经注册到Initiation Dispatcher的事件调用epollCtl(epfd, opcode, fd, events)注册到linux系统中，这里fd表示Handle，events表示我们所感兴趣的Handle的事件；</p>
</li>
<li><p>通过调用epollWait方法同步阻塞的等待已经注册的事件的发生。不同事件源上的事件可能同时发生，一旦有事件被触发了，epollWait方法就会返回；</p>
</li>
<li><p>最后通过发生的事件找到相关联的SelectorKeyImpl对象，并设置其发生的事件为就绪状态，然后将SelectorKeyImpl放入selectedSet中。这样一来我们就可以通过Selector.selectedKeys()方法得到事件就绪的SelectorKeyImpl集合了。</p>
</li>
</ul>
<ol start="4">
<li><p>当与某个事件源对应的Handle变为ready状态时(比如说，TCP socket变为等待读状态时)，Synchronous Event Demultiplexer就会通知Initiation Dispatcher。</p>
</li>
<li><p>Initiation Dispatcher会触发事件处理器的回调方法，从而响应这个处于ready状态的Handle。当事件发生时，Initiation Dispatcher会将被事件源激活的Handle作为『key』来寻找并分发恰当的事件处理器回调方法。</p>
</li>
<li><p>Initiation Dispatcher会回调事件处理器的handle_event(type)回调方法来执行特定于应用的功能(开发者自己所编写的功能)，从而相应这个事件。所发生的事件类型可以作为该方法参数并被该方法内部使用来执行额外的特定于服务的分离与分发。</p>
</li>
</ol>
<h2 id="Netty通信框架之NIO的源码分析"><a href="#Netty通信框架之NIO的源码分析" class="headerlink" title="Netty通信框架之NIO的源码分析"></a>Netty通信框架之NIO的源码分析</h2><h3 id="Netty服务器单线程Reactor处理模型源码分析"><a href="#Netty服务器单线程Reactor处理模型源码分析" class="headerlink" title="Netty服务器单线程Reactor处理模型源码分析"></a>Netty服务器单线程Reactor处理模型源码分析</h3><ol>
<li><p>服务器端的Reactor是一个线程对象（EventLoopGroup），该线程会启动事件循环，并使用Selector来实现IO的多路复用。注册Channel通道（包含Acceptor事件处理器Selector）到Reactor中，Acceptor事件处理器所关注的事件是<em>ACCEPT（IO）事件</em>，这样Reactor会循环监听客户端向服务器端发起的连接请求事件(ACCEPT事件)。</p>
</li>
<li><p>当客户端向服务器端发起一个连接请求，Reactor监听到了该ACCEPT事件的发生并将该ACCEPT事件派发给相应的Acceptor处理器来进行处理。Acceptor处理器通过accept()方法得到与这个客户端对应的连接(SocketChannel)，然后将该连接所关注的<em>READ（IO）事件</em>以及对应的READ事件处理器注册到Reactor中，这样一来Reactor就会监听该连接的READ事件了。或者当你需要向客户端发送数据时，就向Reactor注册该连接的WRITE事件和其处理器。</p>
</li>
<li><p>当Reactor监听到有读或者写事件发生时，将相关的事件派发给对应的处理器（另一个EventLoopGroup工作循环线程组）进行处理。比如，读处理器会通过SocketChannel的read()方法读取数据，此时read()操作可以直接读取到数据，而不会堵塞与等待可读的数据到来。</p>
</li>
<li><p>每当处理完所有就绪的感兴趣的I&#x2F;O事件后，Reactor线程会再次执行select()阻塞等待新的事件就绪并将其分派给对应处理器进行处理。</p>
</li>
</ol>
<p>注意，Reactor的单线程模式的单线程主要是针对于I&#x2F;O操作而言，也就是所以的I&#x2F;O的accept()、read()、write()以及connect()操作都在一个线程上完成的。</p>
<p>但在目前的单线程Reactor模式中，不仅I&#x2F;O操作在该Reactor线程上，连非I&#x2F;O的业务操作也在该线程上进行处理了，这可能会大大延迟I&#x2F;O请求的响应。所以我们应该将非I&#x2F;O的业务逻辑操作从Reactor线程上卸载，以此来加速Reactor线程对I&#x2F;O请求的响应。</p>
<h3 id="服务器多线程Reactor处理流程："><a href="#服务器多线程Reactor处理流程：" class="headerlink" title="服务器多线程Reactor处理流程："></a>服务器多线程Reactor处理流程：</h3><p>Reactor线程池中的每一Reactor线程都会有自己的多路复用器Selector、线程和分发的事件循环逻辑。<br>mainReactor可以只有一个，但subReactor一般会有多个。mainReactor线程主要负责接收客户端的连接请求，然后将接收到的SocketChannel传递给subReactor，由subReactor来完成和客户端的通信。</p>
<ol>
<li><p>注册一个Acceptor事件处理器到mainReactor中，Acceptor事件处理器所关注的事件是ACCEPT事件，这样mainReactor会监听客户端向服务器端发起的连接请求事件(ACCEPT事件)。启动mainReactor的事件循环。</p>
</li>
<li><p>客户端向服务器端发起一个连接请求，mainReactor监听到了该ACCEPT事件并将该ACCEPT事件派发给Acceptor处理器来进行处理。Acceptor处理器通过accept()方法得到与这个客户端对应的连接(SocketChannel)，然后将这个SocketChannel传递给subReactor线程池。</p>
</li>
<li><p>subReactor线程池分配一个subReactor线程给这个SocketChannel，即，将SocketChannel关注的READ事件以及对应的READ事件处理器注册到subReactor线程中。当然你也注册WRITE事件以及WRITE事件处理器到subReactor线程中以完成I&#x2F;O写操作。Reactor线程池中的每一Reactor线程都会有自己的Selector、线程和分发的循环逻辑。</p>
</li>
<li><p>当有I&#x2F;O事件就绪时，相关的subReactor就将事件派发给响应的处理器处理。注意，这里subReactor线程只负责完成I&#x2F;O的read()操作，在读取到数据后将非I&#x2F;O事件——业务逻辑的处理放入到EventExecutorGroup工作线程池的EventExecutor中完成，若完成业务逻辑后需要返回数据给客户端，则相关的I&#x2F;O的write操作还是会被提交回subReactor线程来完成。</p>
</li>
</ol>
<h2 id="扩展知识：Tomcat-同步-x2F-阻塞BIO的源码分析"><a href="#扩展知识：Tomcat-同步-x2F-阻塞BIO的源码分析" class="headerlink" title="扩展知识：Tomcat 同步&#x2F;阻塞BIO的源码分析"></a>扩展知识：Tomcat 同步&#x2F;阻塞BIO的源码分析</h2><h3 id="基于阻塞I-x2F-O服务器流程："><a href="#基于阻塞I-x2F-O服务器流程：" class="headerlink" title="基于阻塞I&#x2F;O服务器流程："></a>基于阻塞I&#x2F;O服务器流程：</h3><ol>
<li><p>服务器端的Server是一个线程，线程中执行一个死循环来阻塞的监听客户端的连接请求和通信。</p>
</li>
<li><p>当客户端向服务器端发送一个连接请求后，服务器端的Server会接受客户端的请求，ServerSocket.accept()从阻塞中返回，得到一个与客户端连接相对于的Socket。</p>
</li>
<li><p>构建一个handler，将Socket传入该handler。创建一个线程并启动该线程，在线程中执行handler，这样与客户端的所有的通信以及数据处理都在该线程中执行。当该客户端和服务器端完成通信关闭连接后，线程就会被销毁。</p>
</li>
<li><p>然后Server继续执行accept()操作等待新的连接请求。</p>
</li>
</ol>
<ul>
<li><p>优点：</p>
<ul>
<li>使用简单，容易编程</li>
<li>在多核系统下，能够充分利用了多核CPU的资源。即，当I&#x2F;O阻塞系统，但CPU空闲的时候，可以利用多线程使用CPU资源。</li>
</ul>
</li>
<li><p>缺点：该模式的本质问题在于严重依赖线程，但线程Java虚拟机非常宝贵的资源。随着客户端并发访问量的急剧增加，线程数量的不断膨胀将服务器端的性能将急剧下降。</p>
<ul>
<li>线程生命周期的开销非常高。线程的创建与销毁并不是没有代价的。在Linux这样的操作系统中，线程本质上就是一个进程，创建和销毁都是重量级的系统函数。</li>
<li>资源消耗。内存：大量空闲的线程会占用许多内存，给垃圾回收器带来压力。；CPU：如果你已经拥有足够多的线程使所有CPU保持忙碌状态，那么再创建更过的线程反而会降低性能。</li>
<li>稳定性。在可创建线程的数量上存在一个限制。这个限制值将随着平台的不同而不同，并且受多个因素制约：a)JVM的启动参数、b)Threa的构造函数中请求的栈大小、c)底层操作系统对线程的限制 等。如果破坏了这些限制，那么很可能抛出OutOfMemoryError异常。</li>
<li>线程的切换成本是很高的。操作系统发生线程切换的时候，需要保留线程的上下文，然后执行系统调用。如果线程数过高，不仅会带来许多无用的上下文切换，还可能导致执行线程切换的时间甚至会大于线程执行的时间，这时候带来的表现往往是系统负载偏高、CPU sy(系统CPU)使用率特别高，导致系统几乎陷入不可用的状态。</li>
<li>容易造成锯齿状的系统负载。一旦线程数量高但外部网络环境不是很稳定，就很容易造成大量请求的结果同时返回，激活大量阻塞线程从而使系统负载压力过大。</li>
<li>若是长连接的情况下并且客户端与服务器端交互并不频繁的，那么客户端和服务器端的连接会一直保留着，对应的线程也就一直存在在，但因为不频繁的通信，导致大量线程在大量时间内都处于空置状态。</li>
</ul>
</li>
<li><p>适用场景：如果你有少量的连接使用非常高的带宽，一次发送大量的数据，也许典型的IO服务器实现可能非常契合。</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Questions and Answers</title>
    <url>/2020/12/07/Java/Java-Questions-and-Answers/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a094c7b8b0494bb6c4a781e8ad2090cdc3c51972693df0f009ecc44d4e1f0823"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>20221226-工作十年总结</title>
    <url>/2023/05/21/%E7%94%9F%E6%B4%BB/20221226-%E5%B7%A5%E4%BD%9C%E5%8D%81%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3917ec6e604f303a1fb26df30b822594f191db89dab983248fb505a89cb38ab4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年度个人规划</title>
    <url>/2022/08/16/%E7%94%9F%E6%B4%BB/2022%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d4e5a908efdde1eab3d9e414f35b626c40f0a30c76866fdc3447ac67bd2f38f4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年度个人规划</title>
    <url>/2023/10/08/%E7%94%9F%E6%B4%BB/2023%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4bde6571e98d1e9bcfd0e023d0f37b10353fa55f517703872c9469dad27b1d41"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>2024年度个人规划</title>
    <url>/2024/01/31/%E7%94%9F%E6%B4%BB/2024%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9c01c082aecb3b56a3ae0790a7528a1524ce329cdcfa9277d36d9c3bc8f42704"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>2025年度个人规划</title>
    <url>/2025/03/24/%E7%94%9F%E6%B4%BB/2025%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="2025-个人小目标"><a href="#2025-个人小目标" class="headerlink" title="2025 个人小目标"></a>2025 个人小目标</h1><ul>
<li><input disabled="" type="checkbox"> 个人工作生活<ul>
<li><input disabled="" type="checkbox"> Q1每个月安排一天个人时间，学习Optimus核心知识</li>
<li><input disabled="" type="checkbox"> 思考下一个COD方向和领域：产品架构，产品经理，后端与运维</li>
<li><input checked="" disabled="" type="checkbox"> Q1健康作息，不熬夜到12点后，保证基础睡眠</li>
<li><input checked="" disabled="" type="checkbox"> Q2运动开始计划，通过合理安排作息，每周半小时起养成习惯，并逐步增加</li>
<li><input disabled="" type="checkbox"> Q1每周一次睡前花十分钟番茄钟，复盘当周工作、中长期目标调整，减少纠结与内耗，看书增值</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 家庭生活<ul>
<li><input disabled="" type="checkbox"> 大宝的小学一年级思考和执行<ul>
<li><input checked="" disabled="" type="checkbox"> 拼音熟练度练习，朗读训练每日15分钟 </li>
<li><input checked="" disabled="" type="checkbox"> 汉字识字培训</li>
<li><input disabled="" type="checkbox"> 控笔训练</li>
<li><input checked="" disabled="" type="checkbox"> 日常数学加减训练</li>
<li><input checked="" disabled="" type="checkbox"> 钢琴读谱，指法练习，肌肉重复训练，流畅背诵弹奏为目标</li>
<li><input checked="" disabled="" type="checkbox"> 复习、预习课程习惯</li>
<li><input checked="" disabled="" type="checkbox"> 演讲训练，植物节演讲、升旗手演讲、爸爸讲堂介绍</li>
<li><input disabled="" type="checkbox"> 握笔姿势，写字姿势训练</li>
<li><input disabled="" type="checkbox"> 数学拔高训练</li>
<li><input disabled="" type="checkbox"> 语文阅读训练</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 小宝幼儿园前期准备<ul>
<li><input checked="" disabled="" type="checkbox"> 4、5月择校，9月正常入学</li>
<li><input disabled="" type="checkbox"> 语言发展关注，发音纠正</li>
<li><input disabled="" type="checkbox"> 自主如厕练习</li>
<li><input checked="" disabled="" type="checkbox"> 自主吃饭习惯培养</li>
<li><input disabled="" type="checkbox"> 自主穿脱衣服袜子入睡练习</li>
<li><input disabled="" type="checkbox"> 认识数字大小数数</li>
<li><input disabled="" type="checkbox"> 认字</li>
<li><input disabled="" type="checkbox"> 安全意识训练</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 职场价值、时间效率提升<ul>
<li><input disabled="" type="checkbox"> 快速阅读《高效能人士&#x2F;家庭的七个习惯》，自我效能提升</li>
<li><input disabled="" type="checkbox"> 快速阅读《卡耐基人性的弱点》，学会提升别人的效能</li>
<li><input disabled="" type="checkbox"> 精读并且实践《How to Lead》，学会面对人工作</li>
<li><input checked="" disabled="" type="checkbox"> 精读《这就是人性》，学会人性的特点，管理必须基于人性</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 个人充电：阅读书籍10本<ul>
<li><input disabled="" type="checkbox"> 职场、人性相关书籍, 有助平衡心态和目标：<ul>
<li><input disabled="" type="checkbox"> 学习领域预判思考方式，快速决策得出可执行尽量正确的选择</li>
<li><input disabled="" type="checkbox"> 学习高效的项目管理方式，对于种类繁多的细碎项目如何高效的管理，并且针对不同的人建立不通的项目profile，合理安排资源<ul>
<li><input disabled="" type="checkbox"> 对于资深执行者的管理方式</li>
<li><input disabled="" type="checkbox"> 对于资浅有潜力执行者的管理和引导方式</li>
<li><input disabled="" type="checkbox"> 对于资浅Vendor的管理方式</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> 合理授权，对于不同的选择，可以借由别人去实践通过验证</li>
<li><input disabled="" type="checkbox"> 学习衍生品定价规则，交易系统，风险合规服务</li>
<li><input checked="" disabled="" type="checkbox"> 管理风格建立，最大化生产力同时建立稳定良好的领导风格，项目进度把控<ul>
<li><input checked="" disabled="" type="checkbox"> 项目远期规划</li>
<li><input checked="" disabled="" type="checkbox"> 项目落实原则把控</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 重组思维学习，在基本面了解情况下破局，精读《重组与突破》</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 领域相关背景书籍：<ul>
<li><input checked="" disabled="" type="checkbox"> 阅读CM bitemporal DB设计学习</li>
<li><input disabled="" type="checkbox"> 阅读CM Risk Calc Engine设计学习</li>
<li><input disabled="" type="checkbox"> 阅读CM Risk Storage &amp; Pivot设计学习</li>
<li><input checked="" disabled="" type="checkbox"> 阅读CM Entitlements Model设计学习</li>
<li><input disabled="" type="checkbox"> 阅读Kindle《债券投资策略》,了解债券市场基本知识</li>
<li><input disabled="" type="checkbox"> 阅读Kindle《债券组合投资》</li>
<li><input disabled="" type="checkbox"> 阅读Kindle《投资组合绩效测评实用方法》</li>
<li><input checked="" disabled="" type="checkbox"> 阅读《国富论》，了解经典生产理论以及劳动者与雇佣者的基本关系</li>
<li><input disabled="" type="checkbox"> 阅读《利率互换通关秘籍》，了解利率基本概念</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 育儿和教育书籍：<ul>
<li><input checked="" disabled="" type="checkbox"> 父母效能训练</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 技术相关书籍：<ul>
<li><input disabled="" type="checkbox"> Kubernetes权威指南: 学习K8S部署技术</li>
<li><input checked="" disabled="" type="checkbox"> 阅读《Helm学习指南》了解linux package管理发布基本知识</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 沟通技巧学习<ul>
<li><input checked="" disabled="" type="checkbox"> 非暴力沟通</li>
<li><input checked="" disabled="" type="checkbox"> 别说你懂交际学</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 情绪控制学习</li>
</ul>
</li>
</ul>
<h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><h2 id="lt-lt-How-to-lead-gt-gt"><a href="#lt-lt-How-to-lead-gt-gt" class="headerlink" title="&lt;&lt; How to lead &gt;&gt;"></a>&lt;&lt; How to lead &gt;&gt;</h2><h3 id="领导力的基础"><a href="#领导力的基础" class="headerlink" title="领导力的基础"></a>领导力的基础</h3><h4 id="专注在人"><a href="#专注在人" class="headerlink" title="专注在人"></a>专注在人</h4><p>当我们想要营销我的思想时，往往关注：</p>
<ul>
<li>提供的功能</li>
<li>带来的好处</li>
<li>希望和美好愿景</li>
</ul>
<p>但是影响他人的核心原则是，被影响人的需求（恐惧，贪婪，个性，空闲），帮助对方客服所有的困难，就容易影响别人。</p>
<h5 id="传统销售手段"><a href="#传统销售手段" class="headerlink" title="传统销售手段"></a>传统销售手段</h5><ul>
<li>在问题上达成一致</li>
<li>题出解决方案</li>
<li>结束</li>
</ul>
<p>激励人的原驱动力往往来自恐惧、贪婪和懒惰。</p>
<ul>
<li><p>利用恐惧：一种是利用人对惩罚的恐惧，用于规范行为；另一种是消除恐惧，使得事情<br>进展顺利。</p>
</li>
<li><p>利用贪婪：金钱和同事的认可度。</p>
</li>
<li><p>利用懒惰：对于对方本体是有益于她的本性，比如可以让他有利可图或生活变得容易吧。</p>
</li>
</ul>
<h5 id="向上管理"><a href="#向上管理" class="headerlink" title="向上管理"></a>向上管理</h5><ul>
<li><p>有潜力的领导者</p>
<ul>
<li>适应性</li>
<li>自信</li>
<li>主动性</li>
<li>可靠性</li>
<li>野心</li>
</ul>
</li>
<li><p>如何有效地向上管理</p>
<ul>
<li>找到合适的老板</li>
<li>交付正确的项目</li>
<li>合适的反馈行为</li>
</ul>
</li>
</ul>
<h4 id="保持正能量"><a href="#保持正能量" class="headerlink" title="保持正能量"></a>保持正能量</h4><h5 id="让自己每天的生活积极正向"><a href="#让自己每天的生活积极正向" class="headerlink" title="让自己每天的生活积极正向"></a>让自己每天的生活积极正向</h5><ul>
<li>关注自己善长的</li>
<li>管理好自己的情绪</li>
<li>具象化自己想要做的事情</li>
<li>做有意义的事情</li>
<li>行动起来</li>
</ul>
<h5 id="做一个正能量的领导"><a href="#做一个正能量的领导" class="headerlink" title="做一个正能量的领导"></a>做一个正能量的领导</h5><ul>
<li>开会中表达解决方案和机遇，而不是问题</li>
<li>寻找方案中的闪光点</li>
<li>主动寻找合适的项目</li>
<li>允许适当的冒险</li>
</ul>
<p>不要做：</p>
<ul>
<li>不抱怨工作</li>
<li>不嚼舌根</li>
<li>不推脱责任</li>
</ul>
<h5 id="做一个幸运的领导"><a href="#做一个幸运的领导" class="headerlink" title="做一个幸运的领导"></a>做一个幸运的领导</h5><p>领导需要持续为自己创造幸运，主要通过以下三个特性：</p>
<ul>
<li>实践Practice：领导力是需要通过实践总结出的，深耕在一个领域或者一种类型的职能，而不是将注意力放在获取名利上。</li>
<li>坚持不懈Persistence：勤奋努力是成功的必要条件，对待失败，好的领导不会放弃、感到失望，而是感谢自己又少了一次失败的原因，因为它不会发生两次。</li>
<li>洞察力Perspective：幸运的人是在对的时间和对的地点等待幸运的发生，这样的洞察力是机遇对自己机构的了解，同时对对手的了解。对于成功模式的发现并不会太难，难的是对于其的坚持和持久的影响力让更多的人把一个观点实践成巨大的成功。</li>
</ul>
<h5 id="聪明的还是积极的"><a href="#聪明的还是积极的" class="headerlink" title="聪明的还是积极的"></a>聪明的还是积极的</h5><p>聪明人非常擅长看到事物的缺陷和风险，但是好的领导面对挑战具有如下特质：</p>
<ul>
<li>冷漠的：冷漠的领导很难长时间维系一段很好的领导关系，好的领导需要避免冷漠对待挑战。</li>
<li>分析： 聪明人的分析能力可以快速找到问题存在的潜在风险，但是好的领导需要主要找到可能的解决方案让大家的思维活跃起来。</li>
<li>答案：聪明人总是想找到最优的答案，然而好的领导需要用经验和实验去解决实际的问题，而不是找到完美的答案。</li>
<li>行动力： 有行动才有机会赢，同事之间相处，请求原谅总是比请求帮忙容易，而人都是在错误中成长，所以不必因为害怕失败而踞足不前。</li>
</ul>
<h5 id="积极的解决问题"><a href="#积极的解决问题" class="headerlink" title="积极的解决问题"></a>积极的解决问题</h5><p>决策力是领导必须有的，只有决策后才能有行动力，让领导部署具体的实施方案。这往往比找到一个完美的解决方案更好。商业的世界总是在有限的时间和资源情况下，通过妥协解决尽量多的问题，而不是构造一个类似学院派的完美解决方案。</p>
<ul>
<li><p>解决问题的步骤常常是：</p>
<ul>
<li>找到问题</li>
<li>提出假设</li>
<li>提出数据结构</li>
<li>找到数据</li>
<li>分析数据</li>
<li>提出建议</li>
</ul>
</li>
<li><p>启发式解决问题则是：</p>
<ul>
<li>找到问题，以及问题的主人。确定问题是一个实质性的问题，找到问题产生的原因，而不是关注在为问题的表象和后果。</li>
<li>提出假设，找到可能的解决问题角度，咨询相关的人。</li>
<li>提出数据结构，迭代数据和定义，找到所有的可能性。</li>
<li>寻找数据，寻找尽量多的有效信息，快速缩小问题范围，避免扩大问题。</li>
<li>分析数据，讲问题，假设和解决方案完美的整合，不必是一个中立的表达。如果这不能解决需要的核心问题，必须重新提出假设。</li>
<li>在构造好的解决方案后，需要更多的资源参与，从而能够有效的扩大影响力。</li>
</ul>
</li>
</ul>
<p>对于解决问题的整体时间分配，20%的时间定义问题，50%的时间寻找数据证明自己的分析，和30%的时间推广和优化自己的解决方案。 </p>
<p>除了关注每一个带解决的问题，也需要运用2&#x2F;8原则搞清楚问题是属于2&#x2F;8中的哪一侧：</p>
<ul>
<li><p>对于公司的影响</p>
</li>
<li><p>对于问题主任的重要性</p>
</li>
<li><p>潜在解决方案的可行性</p>
</li>
<li><p>分析的难度</p>
</li>
<li><p>分析和解决方案的代价</p>
</li>
<li><p>复杂问题必须要进行拆解，并且运用2&#x2F;8原则判定核心的问题方向。</p>
</li>
<li><p>寻找有效信息</p>
<ul>
<li>市场的report是不是有偏向的，有没有幸存者偏见？</li>
<li>市场本质是博弈的，机械的分析只会有机械的决策，而不是纵观整个博弈后得到的最优解。</li>
</ul>
</li>
<li><p>推荐方案需要保证数据的可靠性，如果有欠考虑的数据会令整个方案黯然失色。</p>
</li>
</ul>
<h5 id="心理学家提出保持正能量方法"><a href="#心理学家提出保持正能量方法" class="headerlink" title="心理学家提出保持正能量方法"></a>心理学家提出保持正能量方法</h5><ul>
<li>关注在自己的优点上</li>
<li>管理好自己的情绪</li>
<li>可视化自己的成就</li>
<li>做一些自己喜欢的和工作无关的事情</li>
<li>善于行动，面向未来生活</li>
</ul>
<h4 id="保持专业性"><a href="#保持专业性" class="headerlink" title="保持专业性"></a>保持专业性</h4><ul>
<li>学习领导力：从周围的优秀领导中学习这种能力，自我领悟</li>
<li>学习企业内部规则：</li>
<li>学习通用的专业能力</li>
<li>学习商业生存法则</li>
</ul>
<h3 id="实践领导力"><a href="#实践领导力" class="headerlink" title="实践领导力"></a>实践领导力</h3><h3 id="掌握领导力"><a href="#掌握领导力" class="headerlink" title="掌握领导力"></a>掌握领导力</h3><h2 id="《这就是人性：认知觉醒的底层逻辑》"><a href="#《这就是人性：认知觉醒的底层逻辑》" class="headerlink" title="《这就是人性：认知觉醒的底层逻辑》"></a>《这就是人性：认知觉醒的底层逻辑》</h2><h3 id="人性逻辑：别相信人，要相信人性"><a href="#人性逻辑：别相信人，要相信人性" class="headerlink" title="人性逻辑：别相信人，要相信人性"></a>人性逻辑：别相信人，要相信人性</h3><h4 id="用利益去考验人性，你也许会输"><a href="#用利益去考验人性，你也许会输" class="headerlink" title="用利益去考验人性，你也许会输"></a>用利益去考验人性，你也许会输</h4><ul>
<li>趋利避害是人性，所以义才可贵<ul>
<li>利是人类社会发展的动力，也是生存下去的根本。义是需要的，是人类社会得以稳固的基础，也是一个人处世的根本。这对矛盾从人出生开始就有，而能人往往能在矛盾中平和的生活。</li>
</ul>
</li>
<li>不碰利益，人无坏人<ul>
<li>弱者很多时候过度信奉世俗道德文化而忽视了学习人性，而强者很多时候都是人性高手，懂得用规则来治理人性。良好的规则设计，能够充分考虑人性的特点，去平衡人性弱点带来的弊端。</li>
</ul>
</li>
<li>精明的利己主义者<ul>
<li>势利本身只是一个中性词，生存是人类所有心理的出发点，会天然地依附掌握更多生存资源的人，并努力在最短时间内获得更多的利益。</li>
<li>人缘分为两种：资源性人缘，他们有值得别人“图谋”的地方。劳动性人缘：他们能够给人提供即时性的正面反馈上。</li>
</ul>
</li>
</ul>
<h4 id="懂道德让你成为好人，懂人性让你成为富人"><a href="#懂道德让你成为好人，懂人性让你成为富人" class="headerlink" title="懂道德让你成为好人，懂人性让你成为富人"></a>懂道德让你成为好人，懂人性让你成为富人</h4><ul>
<li>总和你谈感情的人，就是想少点付出<ul>
<li>带不来价值的感情是廉价的。对方的考量主要还是从利益出发，理性的考虑帮助需要提供的价值是否符合他当下的立场。</li>
<li>真是话语权也不是靠分配而来的，而是自己挣来的——谁在价值协作中提供了更多不可替代的贡献，谁的真实话语权就更大。</li>
</ul>
</li>
<li>即使想做好人，也要树立底线</li>
<li>你被好人标签绑架了吗？ <ul>
<li>道德约束是一种弱势文化，往往会将人羁羁绊在困境中，而强者文化则是客观的面对人性，利用人性，争取属于自己的机会。</li>
</ul>
</li>
</ul>
<h4 id="金钱，可以检验人性"><a href="#金钱，可以检验人性" class="headerlink" title="金钱，可以检验人性"></a>金钱，可以检验人性</h4><ul>
<li>悟透赚钱的底层逻辑<ul>
<li>文化属性决定层次和命运<br>* 思想狭窄<br>* 被错误或者过时的思想误导</li>
<li>满足人性的自私，才有才有可能赚到钱<ul>
<li>人难免有自恋的情绪，会因为自己做了一些事情而陷入自我感动，但这没有用。</li>
<li>时不时审视自己的认知水平，有没有遵循底层规律办事。</li>
</ul>
</li>
</ul>
</li>
<li>你赚的每一份钱只会在认知空间内震荡<ul>
<li>金钱只是一种媒介，是人用来换取商品和服务的中间态，而不是人的目标本身。人的目标是通过进去换取商品和服务，从而得到自己想要的情绪体验。</li>
</ul>
</li>
<li>营造错觉，左右对方的价值判断<br>* 骗术本身往往不是为了以假乱真，而是通过真假虚实不断的试探，最终给受骗者一个错觉，改变了他原来的价值观。</li>
</ul>
<h3 id="认知觉醒：提升认知，看破生活假象"><a href="#认知觉醒：提升认知，看破生活假象" class="headerlink" title="认知觉醒：提升认知，看破生活假象"></a>认知觉醒：提升认知，看破生活假象</h3><h4 id="没有交换意识，哪有人脉关系"><a href="#没有交换意识，哪有人脉关系" class="headerlink" title="没有交换意识，哪有人脉关系"></a>没有交换意识，哪有人脉关系</h4><ul>
<li>怕小人，不算无能</li>
<li>为自己的人生负责，不要过度依赖他人<ul>
<li>如果你把自己的生命珠子交给别人，让别人替你保管，本质上来讲，是增加了对方的负担的。你的一切反应都无法阻止对方行使自己的权利。</li>
</ul>
</li>
<li>圈子不同，不必硬融</li>
</ul>
<h4 id="打破思维禁锢，从内耗中找对出路"><a href="#打破思维禁锢，从内耗中找对出路" class="headerlink" title="打破思维禁锢，从内耗中找对出路"></a>打破思维禁锢，从内耗中找对出路</h4><ul>
<li><p>普通人要逆袭，首先得扒三层皮</p>
<ul>
<li>扒掉俗事道德观<ul>
<li>人生中的机会是要靠自己去抓住的，它不会凭空落到我们的头上。</li>
</ul>
</li>
<li>扒掉规则的束缚<ul>
<li>规则是人定的，尊重规则，理解规则、遵守规则、决不允许规则阻止自己朝更高的目标前进。</li>
</ul>
</li>
<li>扒掉欲望的驱动 <ul>
<li>人最大的障碍其实是自己，只有真正成为自己的主人，看清事情背后的逻辑，才能从底层突围。</li>
<li>持志：发自内心地思考自己到底想做什么事，想成为怎样的人。</li>
<li>提升自己的认知：只有当你从更高更远的维度上才能看清事情背后的本质。</li>
</ul>
</li>
</ul>
</li>
<li><p>想要获得通透，就要学会深度思考</p>
<ul>
<li>无中心式的连续发散思维：发散思维是大多数人的思维方式，运用这类思维前需要先明确自己的目标，然后有方向的梳理思维成为有序状态。</li>
<li>反刍式思考：反思能够帮助增长事情对人的经验，但是过度的反刍式思考会阻碍事情的推进，让人抓不住机会。</li>
<li>浅层思考：浅层思考是感性直觉的思维， </li>
<li>动机挖掘：先搞清楚自己或别人的内在动机，看清本质的东西，避免不必要的弯路。</li>
<li>思考未来的终点：学会用未来的大脑，指挥活在当下的身体。</li>
<li>思考知识结构：三个层面理解知识：<ul>
<li>What：事情的表面，找到做的事情</li>
<li>How：找到做这件事情的渠道，如何做</li>
<li>Why：明白自己这样做的背后原理。</li>
</ul>
</li>
<li>进行自我批判：不要认为自己什么都是对的，其实“自我”才是成功最大的障碍。遇到不如你的人，坚定自己的想法；遇到和你差不多的人，要怀疑自己的想法；遇到比你混的好的人，要否定自己的想法。</li>
<li>思考客观规律</li>
</ul>
</li>
<li><p>要成事，从三个维度打破禁锢</p>
<ul>
<li>学会包装自己<ul>
<li>这个世界是靠实力说话的，很多时候，别人不能够直观地感受你地实力高低，所以你需要运用包装地手段向对方展示你地实力。</li>
</ul>
</li>
<li>学会高调<ul>
<li>面对利益要学会高调，敢于挣脱道德枷锁，敢于大胆追求自己地合法利益。</li>
</ul>
</li>
<li>学会反击<ul>
<li>人与人相处都有一个试探地过程，也就是对方要试探一下你的底线是什么。现实并不因为谁好说话，就为大家感激。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="野蛮生长：对己逆人性，对外顺人性"><a href="#野蛮生长：对己逆人性，对外顺人性" class="headerlink" title="野蛮生长：对己逆人性，对外顺人性"></a>野蛮生长：对己逆人性，对外顺人性</h3><ul>
<li>死不认错是人类共有的本性</li>
<li>境界高的人不会随便给人建议<ul>
<li>每个人应该为自己的人生负责</li>
<li>别人寻求建议，不过是为自己已经做出的选择增加底气而已</li>
<li>不要妄图通过建议去拯救他人</li>
</ul>
</li>
<li>过来人的话，其实是让人为难的经验<ul>
<li>问基础的问题</li>
<li>对基本假设进行质疑</li>
<li>注意你的心理过程</li>
<li>总是反过来想</li>
<li>对证据进行评估</li>
<li>经常进行自我反思</li>
</ul>
</li>
</ul>
<h4 id="成长的真相，都是逆人性的"><a href="#成长的真相，都是逆人性的" class="headerlink" title="成长的真相，都是逆人性的"></a>成长的真相，都是逆人性的</h4><ul>
<li>心理内耗：为什么你活得这么累</li>
<li>为什么很多年轻人不愿意结婚了</li>
<li>怎样不被带节奏，保持独立思考<ul>
<li>提升自己的知识储备和见识</li>
<li>有批判性思维，形成自己的思考</li>
<li>确立自我同一性</li>
</ul>
</li>
<li>如何成为一个有影响力的人<ul>
<li>通过各种方式不断重复要传达的信息</li>
<li>建立一整套思想体系</li>
<li>适可而止</li>
</ul>
</li>
</ul>
<h4 id="顺从人性，轻松经营出好关系"><a href="#顺从人性，轻松经营出好关系" class="headerlink" title="顺从人性，轻松经营出好关系"></a>顺从人性，轻松经营出好关系</h4><ul>
<li><p>面对过分地要求，不会拒绝怎么办</p>
<ul>
<li>不拒绝：尝试拒绝一次，观察是否如假设中地情形一样失去对方。</li>
<li>代价很大时才会拒绝：举手之劳能满足对方，很难拒绝。</li>
<li>找借口拒绝对方：分清是你我谁的课题，合理借口回绝。</li>
<li>不带理由地拒绝：每个人为自己地需求负责。</li>
<li>通过开条件或提要求地方式拒绝：找出“是”地条件，反问对方能否接受。专业就是要拿来收钱的，不能随便给人。对于专业，认真做对不起我的专业，不认真做对不起你。</li>
</ul>
</li>
<li><p>可以付出，但不要有付出感</p>
<ul>
<li>有针对性地付出，不盲目</li>
<li>不夸大付出</li>
<li>刻意弱化自身能力地付出以体现牺牲地伟大</li>
<li>暗示对方不值得付出</li>
</ul>
</li>
<li><p>如何提升自己地领导力思维？</p>
</li>
</ul>
<h4 id="人性亘古不变，学会野蛮生长"><a href="#人性亘古不变，学会野蛮生长" class="headerlink" title="人性亘古不变，学会野蛮生长"></a>人性亘古不变，学会野蛮生长</h4><ul>
<li>免费的东西人人喜欢，却无人珍惜</li>
<li>别人对你好是坏，取决于你</li>
<li>做人最怕心理想要利益，嘴上却讲道德</li>
</ul>
<h3 id="普通人逆袭的27条人性真相"><a href="#普通人逆袭的27条人性真相" class="headerlink" title="普通人逆袭的27条人性真相"></a>普通人逆袭的27条人性真相</h3><ul>
<li>直面人性的自私，学会从利益的角度审视一切</li>
<li>强者思维，人都会主动为强者找理由而不是弱者</li>
<li>利益绑定是最稳定的绑定，价值才是自己最宝贵的</li>
<li>职场里面的生存法则是有限资源残酷竞争</li>
<li>做事需要有慈悲心肠，也要有雷霆手段</li>
<li>我的价值决定于我是否被需要，这种价值是否具有稀缺性</li>
<li>扩展认值边界，利用信息差，搭建被动赚钱体系，利他才能从中获利</li>
<li>行走社会地生存法则是需要承认和接受自己地弱小，并且学会韬光养晦</li>
<li>强者对不可控地事情产生太多期望</li>
<li>规则是人制定地，看清背后地核心逻辑，才能合理突破规则，制定新的规则</li>
<li>解决问题也是解决本质的问题，而不是在复杂的题面上纠结原因</li>
<li>避免精神内耗的本质是课题分离，并且看清内耗的本质是什么，专注眼下的事情</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>Microservices via Spring Cloud</title>
    <url>/2020/12/07/%E6%9E%B6%E6%9E%84/Web/Microservices-via-Spring-Cloud/</url>
    <content><![CDATA[<p>目前各大科技公司都提供了各种云平台服务，对于普通地金融科技公司而言，从传统的内部维护基础架构的日子一去不复返。策略转向了开发面向多平台，多终端的服务开发，其中前端开发倾向于web，后端开发倾向于自包含而且能灵活大量部署的微服务架构。如何从传统的开发风格转变为适应云平台服务的应用开发成为了一个需要攻坚的课题。</p>
<p>采用微服务架构拥有诸多好处，在本文中将不做赘述，可参见微服务架构一文。目前，微服务架构已经从设计逐渐落地，开发者社区逐渐贡献出云生态的组件框架，能够让这一战略目标变为可执行方案。</p>
<h1 id="Spring-Cloud微服务框架"><a href="#Spring-Cloud微服务框架" class="headerlink" title="Spring Cloud微服务框架"></a>Spring Cloud微服务框架</h1><p>Spring家族拥有多个方向的项目，目前最为领先行业的就是Spring Framework, Spring Boot, Spring Cloud三大方向，分别致力于帮助开发者开发系统，简化应用初始搭建，以及实现微服务开发设计。</p>
<p>Spring Cloud提供了非常完整的一套微服务实施方案：</p>
<ul>
<li>服务发现</li>
<li>分布式配置</li>
<li>客户端负载均衡</li>
<li>服务容错保护</li>
<li>API网关</li>
<li>安全</li>
<li>事件驱动</li>
<li>分布式服务跟踪</li>
</ul>
<p>当然，代码构建微服务只是微服务落地的第一步，为了支持灵活大量部署，微服务需要借助容器技术来快速部署到各个云平台服务提供商的虚拟机上，Docker则是容器技术实现的一个典范，我将在另一篇文章中介绍容器技术。</p>
<h1 id="Spring-Cloud常用组件"><a href="#Spring-Cloud常用组件" class="headerlink" title="Spring Cloud常用组件"></a>Spring Cloud常用组件</h1><h2 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h2><p>Spring Cloud Gateway和Netflix Zuul为所有微服务提供了一个单一入口点。API网关是一个单独的中间件。</p>
<h2 id="Spring-Cloud-Gateway源码分析"><a href="#Spring-Cloud-Gateway源码分析" class="headerlink" title="Spring Cloud Gateway源码分析"></a>Spring Cloud Gateway源码分析</h2><p>处理流程：</p>
<ul>
<li>基于webflux容器&#x2F;Netty通信框架：NIO机制，事件循环监听端口请求</li>
<li>请求的Route Predicate函数式过滤匹配规则<ul>
<li>HTTP请求信息检查例如：Host，Query, Path, Header, Cookie</li>
</ul>
</li>
<li>请求过滤器Filter处理和转发接收<ul>
<li>Pre型在请求转发前执行，可以做鉴权，限流等操作</li>
<li>Post型过滤器可以对返回数据进行增强处理</li>
<li>下游服务可以为注册中心的地址&#x2F;预先配置好的节点IP信息</li>
</ul>
</li>
</ul>
<h3 id="安全——服务验证和授权"><a href="#安全——服务验证和授权" class="headerlink" title="安全——服务验证和授权"></a>安全——服务验证和授权</h3><p>Spring Cloud Securty为微服务提供了一种灵活的用户验证机制，和授权模型。其中验证机制可以基于OAuth2.0标准下的OpenID协议完成，而用户服务授权模型则通过OAuth 2.0的token提供。云服务中的所有服务都应该引入服务验证和授权机制来保护内容服务的安全性。</p>
<p>如果需要更多的security功能，可以考虑引入spring security中的功能。本文将着重介绍基于OAuth2.0的微服务安全架构。</p>
<p>微服务中一般在gateway进行验证授权，而在下游微服务中只需要确认请求是经过认证的即可。关于鉴权的详细文章请见<a href="/2020/11/16/Authentication/">这里</a>.</p>
<h1 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h1><h2 id="Netflix-Eureka服务注册"><a href="#Netflix-Eureka服务注册" class="headerlink" title="Netflix Eureka服务注册"></a>Netflix Eureka服务注册</h2><p>Eureka是单独的服务组件，保证了A高可用，和P分区容忍性的中间件，与Zookeeper保证的C一致性，P分区容忍性不同，更加适合微服务架构，通过集群保证了高可用的动态服务注册以及心跳感知。Eureka一般和Ribbon放在同一个服务器上，所以在gateway上需要指向lb:&#x2F;&#x2F;abc-service就能保证负载均衡到对应的已注册资源服务中。</p>
<h2 id="Netflix-Ribbon负载均衡"><a href="#Netflix-Ribbon负载均衡" class="headerlink" title="Netflix Ribbon负载均衡"></a>Netflix Ribbon负载均衡</h2><p>Netflix Ribbon 采用拦截器将请求的Url进行负载均衡分发，从而达到内容微服务的负载均衡效果。Ribbon框架并不是单独执行，往往在前端服务中会通过（服务注册中心获取&#x2F;API网关中写死）得到提供服务的IP地址，所以服务调用方引入Ribbon通过一定的均衡策略动态生成最终访问的IP地址。</p>
<ul>
<li><p>全局使用既定的某种负载均衡策略：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RandomRule <span class="title function_">randomRule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过配置方式灵活配置服务提供者的负载均衡策略</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 负载均衡策略</span></span><br><span class="line"><span class="comment"># service-provider-name 为调用的服务的名称</span></span><br><span class="line"><span class="attr">service-provider-name:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure>
<h3 id="Ribbon负载均衡策略比较"><a href="#Ribbon负载均衡策略比较" class="headerlink" title="Ribbon负载均衡策略比较"></a>Ribbon负载均衡策略比较</h3><table>
<thead>
<tr>
<th align="left">策略名</th>
<th align="left">策略声明</th>
<th align="left">策略描述</th>
<th align="left">实现说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BestAvailableRule</td>
<td align="left">public class BestAvailableRule extends ClientConfigEnabledRoundRobinRule</td>
<td align="left">选择一个最小的并发请求的server</td>
<td align="left">逐个考察Server：</br> 如果Server被tripped了，则忽略，</br>再选择其中ActiveRequestsCount最小的server</td>
</tr>
<tr>
<td align="left">AvailabilityFilteringRule</td>
<td align="left">public class AvailabilityFilteringRule extends PredicateBasedRule</td>
<td align="left">过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（active connections 超过配置的阈值）</td>
<td align="left">使用一个AvailabilityPredicate来包含过滤server的逻辑, 其实就就是检查status里记录的各个server的运行状态</td>
</tr>
<tr>
<td align="left">WeightedResponseTimeRule</td>
<td align="left">public class WeightedResponseTimeRule extends RoundRobinRule</td>
<td align="left">根据相应时间分配一个weight，相应时间越长，weight越小，被选中的可能性越低。</td>
<td align="left">一个后台线程定期的从status里面读取评价响应时间，为每个server计算一个weight;</br>Weight的计算也比较简单responsetime 减去每个server自己平均的responsetime是server的权重;</br>当刚开始运行，没有形成statas时，使用roudrobin策略选择server。</td>
</tr>
<tr>
<td align="left">RetryRule</td>
<td align="left">public class RetryRule extends AbstractLoadBalancerRule</td>
<td align="left">对选定的负载均衡策略机上重试机制。</td>
<td align="left">在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server</td>
</tr>
<tr>
<td align="left">RoundRobinRule</td>
<td align="left">public class RoundRobinRule extends AbstractLoadBalancerRule</td>
<td align="left">roundRobin方式轮询选择server</td>
<td align="left">轮询index，选择index对应位置的server</td>
</tr>
<tr>
<td align="left">RandomRule</td>
<td align="left">public class RandomRule extends AbstractLoadBalancerRule</td>
<td align="left">随机选择一个server</td>
<td align="left">在index上随机，选择index对应位置的server</td>
</tr>
<tr>
<td align="left">ZoneAvoidanceRule</td>
<td align="left">public class ZoneAvoidanceRule extends PredicateBasedRule</td>
<td align="left">复合判断server所在区域的性能和server的可用性选择server</td>
<td align="left">使用ZoneAvoidancePredicate和AvailabilityPredicate来判断是否选择某个server，前一个判断判定一个zone的运行性能是否可用，剔除不可用的zone（的所有server），AvailabilityPredicate用于过滤掉连接数过多的Server。</td>
</tr>
</tbody></table>
<h2 id="Netflix-Feign动态代理RPC调用"><a href="#Netflix-Feign动态代理RPC调用" class="headerlink" title="Netflix Feign动态代理RPC调用"></a>Netflix Feign动态代理RPC调用</h2><p>RPC远程调用的一种经典实现，为了让服务调用的代码跟普通方法调用一样方便，可以使用Netflix Feign动态代理被调用的服务接口，并且在底层实际使用HTTPClient进行调用。</p>
<h2 id="Netflix-Hystrix服务弹性保证"><a href="#Netflix-Hystrix服务弹性保证" class="headerlink" title="Netflix Hystrix服务弹性保证"></a>Netflix Hystrix服务弹性保证</h2><p>对于微服务的调用失败需要进行动态的感知，当大量请求失败后需要主动断路避免延迟。而且需要后备方式记录或者进行服务降级。在.NETcore 中对等的实现是steeltoe.</p>
<h3 id="Hystrix熔断机制源码分析"><a href="#Hystrix熔断机制源码分析" class="headerlink" title="Hystrix熔断机制源码分析"></a>Hystrix熔断机制源码分析</h3><p>基于注解@HystrixCommand和AOP实现，在方法执行前拦截的动态代理执行。对于有弹性机制需要的节点，需要引入Hystrix进行失败回退方法编写。</p>
<h4 id="Hystrix手写代码示例"><a href="#Hystrix手写代码示例" class="headerlink" title="Hystrix手写代码示例"></a>Hystrix手写代码示例</h4><ol>
<li>自定义注解 @WuzzHystrixCommand</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WuzzHystrixCommand &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回退方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">fallback</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写切面类，实现简易的逻辑处理</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WuzzHystrixCommandAspect</span> &#123;</span><br><span class="line">    <span class="comment">//线程池的处理，基于这个线程池的处理统计可以达到 THREAD 资源限流</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解切点</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;@annotation(com.wuzz.demo.custom.hystrix.WuzzHystrixCommand)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;pointCut()&amp;&amp;@annotation(hystrixCommand)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doPointCut</span><span class="params">(ProceedingJoinPoint joinPoint, WuzzHystrixCommand hystrixCommand)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> hystrixCommand.timeout();</span><br><span class="line">        <span class="comment">//前置的判断逻辑</span></span><br><span class="line">        <span class="type">Future</span> <span class="variable">future</span> <span class="operator">=</span> executorService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> joinPoint.proceed(); <span class="comment">//执行目标方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 使用 future 来实现超时</span></span><br><span class="line">            result = future.get(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            future.cancel(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// ？</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(hystrixCommand.fallback())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用fallback</span></span><br><span class="line">            result = invokeFallback(joinPoint, hystrixCommand.fallback());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">invokeFallback</span><span class="params">(ProceedingJoinPoint joinPoint, String fallback)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//获取被代理的方法的参数和Method</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        <span class="comment">//得到fallback方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">fallbackMethod</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getMethod(fallback, parameterTypes);</span><br><span class="line">            fallbackMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//完成反射调用</span></span><br><span class="line">            <span class="keyword">return</span> fallbackMethod.invoke(joinPoint.getTarget(), joinPoint.getArgs());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写测试，调用：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WuzzHystrixCommand(fallback = &quot;customFallback&quot;, timeout = 3000)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/custom/hystrix/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="number">666</span>);</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/hello?id=&#123;id&#125;&quot;</span>, String.class, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">customFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;custom 请求被降级&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常得调用是没有问题的，这个时候我们把服务提供方的服务接口里  sleep 3秒来模仿调用超时，在访问接口就会得到降级服务后的返回。</p>
<h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><h2 id="Nacos-配置中心，负载均衡，服务注册"><a href="#Nacos-配置中心，负载均衡，服务注册" class="headerlink" title="Nacos 配置中心，负载均衡，服务注册"></a>Nacos 配置中心，负载均衡，服务注册</h2><h3 id="Nacos服务注册源码分析"><a href="#Nacos服务注册源码分析" class="headerlink" title="Nacos服务注册源码分析"></a>Nacos服务注册源码分析</h3><ul>
<li>Nacos服务注册Naming Service源码分析<br>  * 接受Nacos客户端的API调用注册生成Instance实例<br>      * 将Instance放入serviceMap中ConcurrentHashMap集合中<br>      * consitencyService.listen实现数据定期检查<br>  * 通过Namespace对已注册服务的隔离<br>  * 定时检查HeartBeat对已注册Instance实例进行检查，更新实例状态<br>  * 对出现异常的服务进行基于UDP协议推送更新于PushService<ul>
<li>Nacos服务方客户端注册源码分析<ul>
<li>Spring Boot自动启动NacosAutoServiceRegistration进行注册调用</li>
<li>监听ApplicationStartedEvent事件调用NacosServiceRegistry.register方法</li>
<li>namingService.regiterInstance中创建BeanInfo，定时发送心跳包：executorService.schedule(task, period, unit)</li>
</ul>
</li>
<li>Nacos前端客户端服务消费者源码分析<ul>
<li>客户端发起订阅请求会定期发起UpdateTask来获得最新地址</li>
<li>客户端也会提供本地EventListener回调实例处理出现异常的服务</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Sentinel-弹性限流-x2F-熔断模式"><a href="#Sentinel-弹性限流-x2F-熔断模式" class="headerlink" title="Sentinel 弹性限流&#x2F;熔断模式"></a>Sentinel 弹性限流&#x2F;熔断模式</h2><h3 id="Sentinel和Hystrix对比"><a href="#Sentinel和Hystrix对比" class="headerlink" title="Sentinel和Hystrix对比"></a>Sentinel和Hystrix对比</h3><p><img src="/2020/12/07/%E6%9E%B6%E6%9E%84/Web/Microservices-via-Spring-Cloud/SentinelHystrix.png" alt="SH"></p>
<h2 id="Seata-分布式事务"><a href="#Seata-分布式事务" class="headerlink" title="Seata 分布式事务"></a>Seata 分布式事务</h2><p>分布式事务解决了分布式系统中存储数据（数据库&#x2F;缓存)一致性问题。</p>
<h3 id="分布式事务解决理论"><a href="#分布式事务解决理论" class="headerlink" title="分布式事务解决理论"></a>分布式事务解决理论</h3><h4 id="X-x2F-Open分布式事务模型"><a href="#X-x2F-Open分布式事务模型" class="headerlink" title="X&#x2F;Open分布式事务模型"></a>X&#x2F;Open分布式事务模型</h4><ul>
<li>AP: Application 应用程序</li>
<li>RM： Resource Manager 资源管理者，数据库</li>
<li>TM： Transaction Manager事务管理器&#x2F;协调者</li>
</ul>
<h4 id="两段提交协议"><a href="#两段提交协议" class="headerlink" title="两段提交协议"></a>两段提交协议</h4><ul>
<li>准备阶段： TM同之RM准备事务，并告知准备结果</li>
<li>提交&#x2F;回滚阶段：如果所有RM返回成功则执行提交完成指令，反之执行回滚指令。</li>
</ul>
<p>存在问题：</p>
<ol>
<li>同步阻塞数据库</li>
<li>容易失败，一个节点失败就回滚</li>
<li>TM单点故障问题，造成RM锁死。</li>
<li>脑裂问题，二阶段部分提交问题。</li>
</ol>
<h4 id="三段提交协议"><a href="#三段提交协议" class="headerlink" title="三段提交协议"></a>三段提交协议</h4><ul>
<li>CanCommit询问阶段: TM询问是否可以参与事务&#x2F;超时。</li>
<li>PreCommit准备阶段：如果所有RM确认可以，则发起事务，并返回结果&#x2F;超时。</li>
<li>DoCommit提交&#x2F;回滚阶段：如果均成功提交则发起提交&#x2F;回滚指令。</li>
</ul>
<p>改进部分:</p>
<ul>
<li>超时即失败机制，避免两阶段提交锁死等待问题。</li>
<li>提前确认节点状态</li>
</ul>
<h3 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h3><ul>
<li>基于MQ的消息中间件实现TCC (Try-Confirm-Cancel)模型补偿型方案(幂等性实现，最大努力通知机制)</li>
<li>基于Seata模式的分布式事务框架(AT, TCC, Sega 和XA事务模式)</li>
</ul>
<h3 id="Seata源码分析"><a href="#Seata源码分析" class="headerlink" title="Seata源码分析"></a>Seata源码分析</h3><h2 id="Spring-Cloud-Stream-发布-x2F-订阅流处理"><a href="#Spring-Cloud-Stream-发布-x2F-订阅流处理" class="headerlink" title="Spring Cloud Stream 发布&#x2F;订阅流处理"></a>Spring Cloud Stream 发布&#x2F;订阅流处理</h2><p>Spring Cloud Stream支持消息中间件通信，因而可以支持多种高并发消息发布&#x2F;消费场景：</p>
<p>Spring Cloud Stream包含如下四个核心部分：</p>
<ul>
<li>Spring Messaging<ul>
<li>Message, 消息对象，包含消息头和消息体</li>
<li>MessageChannel, 消息通道接口，用于接收消息，提供send方法将消息发送至消息通道</li>
<li>MessageHandler, 消息处理器接口，用于处理消息逻辑</li>
</ul>
</li>
<li>Spring Integration<ul>
<li>MessageDispatcher：消息分发接口，用于分发消息和添加删除消息处理器</li>
<li>MessageRouter: 消息路由接口，定义默认的输出消息通道</li>
<li>Filter：消息的过滤注解，用于配置消息过滤表达式</li>
<li>Aggregator: 消息的聚合注解，用于将多个消息聚合成一条</li>
<li>Splitter: 消息的分割，用于将一条消息拆分成多条</li>
</ul>
</li>
<li>Binders 目标绑定器，负责于外部消息中间件系统集成的组件<ul>
<li>doBindProducer: 为中间件绑定发送消息模块，让中间件能从MessageChannel接受到符合中间件格式的消息</li>
<li>doBindConsumer：为中间件绑定接受消息模块，让中间件能够发送符合Spring Message标准的消息到MessageChannel</li>
</ul>
</li>
<li>Bindings 绑定生成的桥梁，支持Kafka，RabbitMQ中间件</li>
</ul>
<h3 id="RocketMQ-分布式消息通信源码分析"><a href="#RocketMQ-分布式消息通信源码分析" class="headerlink" title="RocketMQ 分布式消息通信源码分析"></a>RocketMQ 分布式消息通信源码分析</h3><p>消息发送流程源码分析：</p>
<p><img src="/2020/12/07/%E6%9E%B6%E6%9E%84/Web/Microservices-via-Spring-Cloud/SpringCloudStream.jpg" alt="MQProducer"></p>
<p>除了负责和Spring Cloud服务器中的Messaging集成之外，RocketMQ Binder还负责和MQ中间件集群通信，源码分发布&#x2F;订阅两部分，分别如下:</p>
<ul>
<li>使用RocketMQTemplate真正发送MQ消息到中间件</li>
<li>同时创建ConsumerEndpoint和input MessageChannel监听MQ订阅消息，并且负责转发给下游</li>
<li>消息的消费分为顺序消费和并发消费，分别由DefaultMessageListenerOrderly,DefaultMessageListenerConcurrently实现，通过binders的配置设定。</li>
</ul>
<p>消息订阅流程源码分析：</p>
<p><img src="/2020/12/07/%E6%9E%B6%E6%9E%84/Web/Microservices-via-Spring-Cloud/SpringCloudStreamConsume.jpg" alt="MQProducer"></p>
<p>其中，服务器对消息的接收，是基于注解方式注入到响应的业务方法中的。这就是在业务代码中，不需要为接收信息创建MessageChannel，却能拿到信息体中的反序列化后信息。</p>
<h3 id="RocketMQ-消息使用场景与实现"><a href="#RocketMQ-消息使用场景与实现" class="headerlink" title="RocketMQ 消息使用场景与实现"></a>RocketMQ 消息使用场景与实现</h3><h4 id="RocketMQ-顺序消息实现"><a href="#RocketMQ-顺序消息实现" class="headerlink" title="RocketMQ 顺序消息实现"></a>RocketMQ 顺序消息实现</h4><p>顺序发送消费场景：订单创建、支付、退款流程处理，数据库BinLog信息消费等等。</p>
<ul>
<li>顺序发送需要将消息发送到同一队列即可，通过基于消息ID的哈希分队选择器即可完成。</li>
<li>顺序消费需要binders中配置好ConsumerMQ的集群消费模式，即每条消息只会被ConsumerGroup中的一个Consumer消费。通过Consumer拿Broker独占锁实现。消费成功后会提交并更新消费进程，避免重复消费。代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.processQueue.getLockConsume().lock();</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.processQueue.isDropped())&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  status = messageListener.consumeMessage(Collections.unmodifieableList(msgs), context);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">  hasException - <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.processQueue.getLockConsume().unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RocketMQ-普通消息发送实现"><a href="#RocketMQ-普通消息发送实现" class="headerlink" title="RocketMQ 普通消息发送实现"></a>RocketMQ 普通消息发送实现</h4><p>普通消息在队列选择可以由两种机制:</p>
<ul>
<li>轮询机制：轮流使用每个队列发送消息</li>
<li>故障规避机制：</li>
</ul>
<h4 id="RocketMQ-消息并发消费实现"><a href="#RocketMQ-消息并发消费实现" class="headerlink" title="RocketMQ 消息并发消费实现"></a>RocketMQ 消息并发消费实现</h4><p>并发消费场景下，消息队列允许Consumer的线程消费池可以向同一个队列消费信息，并且每个消费线程消费信息会有自己的进度信息。</p>
<h4 id="RocketMQ-分布式事务消息实现"><a href="#RocketMQ-分布式事务消息实现" class="headerlink" title="RocketMQ 分布式事务消息实现"></a>RocketMQ 分布式事务消息实现</h4><p>为分布式事务处理提供了通信基础。</p>
<p><img src="/2020/12/07/%E6%9E%B6%E6%9E%84/Web/Microservices-via-Spring-Cloud/RocketMQ.png" alt="RMQ"></p>
<p>Rocket发送事务消息：</p>
<p>Rocket发送事务消息是二次提交的，第一次发送prepare提交到服务器时消息主题会替换为RMQ_SYS_TRANS_HALF_TOPIC。等到本地事务执行完毕以后才进行二次提交，这时会发送给原本消息的topic。</p>
<ol>
<li><p>由producer发送prepare（半消息）给MQ的broker。MQ会把消息记录到本地，然后回复prepare消息状态给producer。</p>
</li>
<li><p>prepare消息发送以后获取发送状态，如果是成功则执行本地业务（本地事务），根据本地事务执行结果手动返回相应状态（RocketMQLocalTransactionState.COMMIT、RocketMQLocalTransactionState.ROLLBACK等）给MQ。</p>
</li>
<li><p>如果是COMMIT则说明本地事务执行成功，prepare为可提交状态，MQ收到COMMIT消息就会发送给consumer，然后consumer执行本地业务。如果是ROLLBACK则会删除prepare消息。</p>
</li>
<li><p>如果MQ一直没收到返回状态则会启动定时任务检查本地事务状态</p>
</li>
<li><p>消费者、生产者的事务各由开发者自己保证。MQ的事务是由MQ保证，这里会根据使用者配置的参数来决定如何执行。</p>
</li>
</ol>
<h4 id="RocketMQ消费模式"><a href="#RocketMQ消费模式" class="headerlink" title="RocketMQ消费模式"></a>RocketMQ消费模式</h4><ul>
<li>at-most-once最多一次</li>
<li>at-least-once最少一次，RocketMQ通过消费者ACK机制支持至少一次</li>
<li>exactly-only-once仅此一次</li>
</ul>
<h3 id="RocketMQ实现原理"><a href="#RocketMQ实现原理" class="headerlink" title="RocketMQ实现原理"></a>RocketMQ实现原理</h3><h4 id="高性能设计"><a href="#高性能设计" class="headerlink" title="高性能设计"></a>高性能设计</h4><h4 id="高可用设计"><a href="#高可用设计" class="headerlink" title="高可用设计"></a>高可用设计</h4><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>Microservice</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain Driven Design Pattern Products</title>
    <url>/2023/10/08/%E6%9E%B6%E6%9E%84/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/Domain-Driven-Design-Pattern-Products/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="56931ac3e0b3946bb82c9216bc61e252ceea6d694a3c6d7909719228795b2d62"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
        <category>领域模型</category>
      </categories>
      <tags>
        <tag>技术日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain Driven Design Pattern CM</title>
    <url>/2023/05/23/%E6%9E%B6%E6%9E%84/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/Domain-Driven-Design-Pattern-Valuation/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4eda1ac7fcad82dd8d827aeafe2cabec596aebf57ec1a95745b023e489048c7d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
        <category>领域模型</category>
      </categories>
      <tags>
        <tag>技术日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetty IO model</title>
    <url>/2021/12/30/%E6%9E%B6%E6%9E%84/Web/Jetty-IO-model/</url>
    <content><![CDATA[<h1 id="Jetty-I-x2F-O-Model"><a href="#Jetty-I-x2F-O-Model" class="headerlink" title="Jetty I&#x2F;O Model"></a>Jetty I&#x2F;O Model</h1><p>Jetty是一个开源的轻量级webserver框架，实现了大部分javax标准下的接口，并且也提供了很多有用的协议支持，例如http1.1， http2， 和websocket等。Jetty采用了最新的Java Nio接口，从底层解决了阻塞式处理I&#x2F;O的问题，利用SelectionKey实现了多路复用socketChannel，得到了高效的I&#x2F;O吞吐性能。本文将着重从源代码层面去讲解Jetty是如何做到。</p>
<h1 id="Jetty-Server"><a href="#Jetty-Server" class="headerlink" title="Jetty Server"></a><a href="https://github.com/eclipse/jetty.project/blob/jetty-10.0.x/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java">Jetty Server</a></h1><p>Jetty Server实例是整个服务的容器，包含了connectors负责管理客户端连接。</p>
<h2 id="Jetty-ServerConnector"><a href="#Jetty-ServerConnector" class="headerlink" title="Jetty ServerConnector"></a><a href="https://github.com/eclipse/jetty.project/blob/jetty-10.0.x/jetty-server/src/main/java/org/eclipse/jetty/server/ServerConnector.java">Jetty ServerConnector</a></h2><p>ServerConnector扩展了既有的AbstractConnector，实现了异步处理ServerSocketChannel的selectedKeys事件回调。主要是通过SelectorManager管理一系列ManagedSelector，根据不同的协议生成不同的连接实例。</p>
<h3 id="Jetty-AbstractConnector"><a href="#Jetty-AbstractConnector" class="headerlink" title="Jetty AbstractConnector"></a><a href="https://github.com/eclipse/jetty.project/blob/jetty-10.0.x/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java">Jetty AbstractConnector</a></h3><p>AbstractConnector是Connector的基本实现，主要包含了一组ConnectionFactory负责构造不同类型的connection，也包含了一组AbstractCoonector.Acceptor实例,负责监听所有的accept事件，accept事件是客户端连接的第一个事件。</p>
<h3 id="Jetty-SelectorManager与ManagedSelector"><a href="#Jetty-SelectorManager与ManagedSelector" class="headerlink" title="Jetty SelectorManager与ManagedSelector"></a><a href="https://github.com/eclipse/jetty.project/blob/jetty-10.0.x/jetty-io/src/main/java/org/eclipse/jetty/io/SelectorManager.java">Jetty SelectorManager</a>与<a href="https://github.com/eclipse/jetty.project/blob/jetty-10.0.x/jetty-io/src/main/java/org/eclipse/jetty/io/ManagedSelector.java">ManagedSelector</a></h3><p>SelectorManager是所有ManagedSelector的管理员，负责异步执行所有ManagedSelector提交的Task，是多路复用一个ServerSocketChannel的核心。底层是依赖Java Nio的ServerSocketChannel多路复用技术实现。</p>
<h4 id="Java-Nio的多路复用技术"><a href="#Java-Nio的多路复用技术" class="headerlink" title="Java Nio的多路复用技术"></a>Java Nio的多路复用技术</h4><p><a href="https://blog.csdn.net/ycgslh/article/details/79604074">Reference</a></p>
<ul>
<li><p>ServerSocketChannel</p>
<ul>
<li>创建：通过ServerSocketChannel类的静态方法open()获得。</li>
<li>绑定端口：每个ServerSocketChannel都有一个对应的ServerSocket,通过其socket()方法获得。获得ServerSocket是为了使用其bind()方法绑定监听端口号。若是使用其accept()方法监听请求就和普通Socket的处理模式无异。</li>
<li>设置是否使用阻塞模式：true&#x2F;false。configureBlocking(false)——不适用阻塞模式。阻塞模式不能使用Selector！</li>
<li>注册选择器以及选择器关心的操作类型：register(Selector,int)     第一个参数可以传入一个选择器对象，第二个可传入SelectionKey代表操作类型的四个静态整型常量中的一个，表示该选择器关心的操作类型。</li>
</ul>
</li>
<li><p>Selector</p>
<ul>
<li><p>创建：通过Selector的静态方法open()获得。</p>
</li>
<li><p>等待请求：select(long)——long代表最长等待时间，超过该时间程序继续向下执行。若设为0或者不传参数，表示一直阻塞，直到有请求。</p>
</li>
<li><p>获得选择结果集合：selectedKeys()，返回一个SelectionKey集合。SelectionKey对象保存处理当前请求的Channel、Selector、操作类型以及附加对象等等。<br>  SelectionKey对象有四个静态常量代表四种操作类型以及对应的判断是否是该种操作的方法：</p>
<ul>
<li><p>SelectionKey.OP_ACCEPT——代表接收请求操作                isAcceptable()</p>
</li>
<li><p>SelectionKey.OP_CONNECT——代表连接操作                   isConnectable()</p>
</li>
<li><p>SelectionKey.OP_READ——代表读操作                              isReadable()</p>
</li>
<li><p>SelectionKey.OP_WRITE——代表写操作                            isWritable()</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>NioSocket中服务端的处理过程分为5步：</p>
<ol>
<li>创建ServerScoketChannel对象并设置相关参数（绑定监听端口号，是否使用阻塞模式）</li>
<li>创建Selector并注册到服务端套接字信道（ServerScoketChannel）上</li>
<li>使用Selector的select方法等待请求</li>
<li>接收到请求后使用selectedKeys方法获得selectionKey集合</li>
<li>根据选择键获得Channel、Selector和操作类型进行具体处理。</li>
</ol>
</li>
<li><p>Code Sample</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">模拟服务端 -nio-Socket 实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">NIOServer</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span> <span class="params">( String []  args )</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>  &#123;</span><br><span class="line">            <span class="comment">// 创建 ServerSocketChannel 通道，绑定监听端口为 8080</span></span><br><span class="line">            <span class="type">ServerSocketChannel</span>  <span class="variable">serverSocketChannel</span> <span class="operator">=</span>  ServerSocketChannel . open () ;</span><br><span class="line">            serverSocketChannel. socket ().bind( <span class="keyword">new</span>  <span class="title class_">InetSocketAddress</span>( <span class="number">8080</span> )) ;</span><br><span class="line">            <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">            serverSocketChannel.configureBlocking( <span class="literal">false</span> ) ;</span><br><span class="line">            <span class="comment">// 注册选择器 , 设置选择器选择的操作类型</span></span><br><span class="line">            <span class="type">Selector</span>  <span class="variable">selector</span> <span class="operator">=</span>  Selector . open () ;</span><br><span class="line">            serverSocketChannel.register(selector ,  SelectionKey . OP_ACCEPT ) ;</span><br><span class="line">            <span class="comment">// 创建处理器</span></span><br><span class="line">            <span class="type">Handler</span>  <span class="variable">handler</span> <span class="operator">=</span>  <span class="keyword">new</span>  <span class="title class_">Handler</span>( <span class="number">1204</span> ) ;</span><br><span class="line">            <span class="keyword">while</span>  ( <span class="literal">true</span> ) &#123;</span><br><span class="line">                <span class="comment">// 等待请求，每次等待阻塞 3s ，超过时间则向下执行，若传入 0 或不传值，则在接收到请求前一直阻塞</span></span><br><span class="line">                <span class="keyword">if</span>  (selector. select ( <span class="number">3000</span> ) ==  <span class="number">0</span> ) &#123;</span><br><span class="line">                    System . out .println( <span class="string">&quot; 等待请求超时 ......&quot;</span> ) ;</span><br><span class="line">                    <span class="keyword">continue</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                System . out .println( <span class="string">&quot;----- 处理请求 -----&quot;</span> ) ;</span><br><span class="line">                <span class="comment">// 获取待处理的选择键集合</span></span><br><span class="line">                Iterator&lt; SelectionKey &gt; keyIterator = selector. selectedKeys (). iterator () ;</span><br><span class="line">                <span class="keyword">while</span>  (keyIterator. hasNext ()) &#123;</span><br><span class="line">                    <span class="type">SelectionKey</span>  <span class="variable">selectionKey</span> <span class="operator">=</span> keyIterator. next () ;</span><br><span class="line">                    <span class="keyword">try</span>  &#123;</span><br><span class="line">                        <span class="comment">// 如果是连接请求，调用处理器的连接处理方法</span></span><br><span class="line">                        <span class="keyword">if</span> (selectionKey.isAcceptable())&#123;</span><br><span class="line">                            handler.handleAccept(selectionKey) ;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 如果是读请求，调用对应的读方法</span></span><br><span class="line">                        <span class="keyword">if</span>  (selectionKey.isReadable()) &#123;</span><br><span class="line">                            handler.handleRead(selectionKey) ;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;  <span class="keyword">catch</span>  ( IOException  e ) &#123;</span><br><span class="line">                        keyIterator. remove () ;</span><br><span class="line">                        <span class="keyword">continue</span> ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 处理完毕从待处理集合移除该选择键</span></span><br><span class="line">                keyIterator. remove () ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  <span class="keyword">catch</span>  ( IOException  e ) &#123;</span><br><span class="line">            e .printStackTrace() ;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        处理器类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Handler</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span>  <span class="variable">bufferSize</span>  <span class="operator">=</span>  <span class="number">1024</span> ;  <span class="comment">// 缓冲器容量</span></span><br><span class="line">        <span class="keyword">private</span>  <span class="type">String</span>  <span class="variable">localCharset</span>  <span class="operator">=</span>  <span class="string">&quot;UTF-8&quot;</span> ;  <span class="comment">// 编码格式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  <span class="title function_">Handler</span> <span class="params">()</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">public</span>  <span class="title function_">Handler</span> <span class="params">( <span class="type">int</span>  bufferSize )</span>&#123;</span><br><span class="line">            <span class="built_in">this</span> ( bufferSize , <span class="literal">null</span> ) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>  <span class="title function_">Handler</span> <span class="params">( String  localCharset )</span>&#123;</span><br><span class="line">            <span class="built_in">this</span> (- <span class="number">1</span> , localCharset ) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>  <span class="title function_">Handler</span> <span class="params">( <span class="type">int</span>  bufferSize , String  localCharset )</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( bufferSize  &gt;  <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="built_in">this</span> . bufferSize  =  bufferSize ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( localCharset  !=  <span class="literal">null</span> )&#123;</span><br><span class="line">                <span class="built_in">this</span> . localCharset  =  localCharset ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        连接请求处理方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">handleAccept</span> <span class="params">( SelectionKey  selectionKey )</span>  <span class="keyword">throws</span>  IOException  &#123;</span><br><span class="line">            <span class="comment">// 通过选择器键获取服务器套接字通道，通过 accept() 方法获取套接字通道连接</span></span><br><span class="line">            <span class="type">SocketChannel</span>  <span class="variable">socketChannel</span> <span class="operator">=</span> (( ServerSocketChannel ) selectionKey . channel ()). accept () ;</span><br><span class="line">            <span class="comment">// 设置套接字通道为非阻塞模式</span></span><br><span class="line">            socketChannel.configureBlocking( <span class="literal">false</span> ) ;</span><br><span class="line">            <span class="comment">// 为套接字通道注册选择器，该选择器为服务器套接字通道的选择器，即选择到该 SocketChannel 的选择器</span></span><br><span class="line">            <span class="comment">// 设置选择器关心请求为读操作，设置数据读取的缓冲器容量为处理器初始化时候的缓冲器容量</span></span><br><span class="line">            socketChannel.register( selectionKey . selector () , SelectionKey . OP_READ ,  ByteBuffer . allocate ( bufferSize )) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">handleRead</span> <span class="params">( SelectionKey  selectionKey )</span>  <span class="keyword">throws</span>  IOException  &#123;</span><br><span class="line">            <span class="comment">// 获取套接字通道</span></span><br><span class="line">            <span class="type">SocketChannel</span>  <span class="variable">socketChannel</span> <span class="operator">=</span> ( SocketChannel )  selectionKey . channel () ;</span><br><span class="line">            <span class="comment">// 获取缓冲器并进行重置 ,selectionKey.attachment() 为获取选择器键的附加对象</span></span><br><span class="line">            <span class="type">ByteBuffer</span>  <span class="variable">byteBuffer</span> <span class="operator">=</span> ( ByteBuffer ) selectionKey .attachment() ;</span><br><span class="line">            byteBuffer.clear() ;</span><br><span class="line">            <span class="comment">// 没有内容则关闭通道</span></span><br><span class="line">            <span class="keyword">if</span>  (socketChannel. read (byteBuffer) == - <span class="number">1</span> ) &#123;</span><br><span class="line">                socketChannel.close() ;</span><br><span class="line">            &#125;  <span class="keyword">else</span>  &#123;</span><br><span class="line">                <span class="comment">// 将缓冲器转换为读状态</span></span><br><span class="line">                byteBuffer.flip() ;</span><br><span class="line">                <span class="comment">// 将缓冲器中接收到的值按 localCharset 格式编码保存</span></span><br><span class="line">                <span class="type">String</span>  <span class="variable">receivedRequestData</span> <span class="operator">=</span>  Charset . forName ( localCharset ). newDecoder ().decode(byteBuffer).toString() ;</span><br><span class="line">                System . out .println( <span class="string">&quot; 接收到客户端的请求数据： &quot;</span> +receivedRequestData) ;</span><br><span class="line">                <span class="comment">// 返回响应数据给客户端</span></span><br><span class="line">                <span class="type">String</span>  <span class="variable">responseData</span> <span class="operator">=</span>  <span class="string">&quot; 已接收到你的请求数据，响应数据为： ( 响应数据 )&quot;</span> ;</span><br><span class="line">                byteBuffer =  ByteBuffer . wrap (responseData.getBytes( localCharset )) ;</span><br><span class="line">                socketChannel. write (byteBuffer) ;</span><br><span class="line">                <span class="comment">// 关闭通道</span></span><br><span class="line">                socketChannel.close() ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Jetty对socket的多路复用技术实现"><a href="#Jetty对socket的多路复用技术实现" class="headerlink" title="Jetty对socket的多路复用技术实现"></a>Jetty对socket的多路复用技术实现</h4><p>Jetty主要是依赖底层Java Nio的多路复用技术，并且封装成为高吞吐量的服务器。封装主要分成两部分：</p>
<ul>
<li>Connector -&gt; Acceptor: 当新的请求到达Jetty时，Jetty ServerConnector会拿到一个非阻塞、新的_acceptChannel：ServerSocketChannel，其关联的selector用于接收所有后续Accept&#x2F;Update&#x2F;onSelected&#x2F;close&#x2F;ReplaceKey事件。Acceptor作为Selector的回调类，提供了所有socketchannel事件的回调方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Called by &#123;<span class="doctag">@link</span> #open()&#125; to obtain the accepting channel.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> ServerSocketChannel used to accept connections.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IOException if unable to obtain or configure the server channel</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">protected</span> ServerSocketChannel <span class="title function_">openAcceptChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">ServerSocketChannel</span> <span class="variable">serverChannel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (isInheritChannel())</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> System.inheritedChannel();</span><br><span class="line">         <span class="keyword">if</span> (channel <span class="keyword">instanceof</span> ServerSocketChannel)</span><br><span class="line">             serverChannel = (ServerSocketChannel)channel;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             LOG.warn(<span class="string">&quot;Unable to use System.inheritedChannel() [&#123;&#125;]. Trying a new ServerSocketChannel at &#123;&#125;:&#123;&#125;&quot;</span>, channel, getHost(), getPort());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (serverChannel == <span class="literal">null</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="type">InetSocketAddress</span> <span class="variable">bindAddress</span> <span class="operator">=</span> getHost() == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(getPort()) : <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(getHost(), getPort());</span><br><span class="line">         serverChannel = ServerSocketChannel.open();</span><br><span class="line">         setSocketOption(serverChannel, StandardSocketOptions.SO_REUSEADDR, getReuseAddress());</span><br><span class="line">         setSocketOption(serverChannel, StandardSocketOptions.SO_REUSEPORT, isReusePort());</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">             serverChannel.bind(bindAddress, getAcceptQueueSize());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable e)</span><br><span class="line">         &#123;</span><br><span class="line">             IO.close(serverChannel);</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Failed to bind to &quot;</span> + bindAddress, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> serverChannel;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>SelectorManager -&gt; ManagedSelector -&gt; Selector: SelectorManager负责维护一组可以复用的Selector实例，对于每个_acceptChannel：ServerSocketChannel非阻塞实例，可以注册一个Selector实例用于监听相应的SelectionKey事件。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建一个selector实例,并且用一个新的生产者线程不断监听channel中的事件。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>.doStart();</span><br><span class="line"></span><br><span class="line">        _selector = _selectorManager.newSelector();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The producer used by the strategies will never</span></span><br><span class="line">        <span class="comment">// be idle (either produces a task or blocks).</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The normal strategy obtains the produced task, schedules</span></span><br><span class="line">        <span class="comment">// a new thread to produce more, runs the task and then exits.</span></span><br><span class="line">        _selectorManager.execute(_strategy::produce);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set started only if we really are started</span></span><br><span class="line">        <span class="type">Start</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line">        submit(start);</span><br><span class="line">        start._started.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><p>Selector事件的生产者&#x2F;消费者模式：选择器本身是可以复用的，也就是大量请求创建的大量socketchannel是可以共享一个选择器实例，并且通过selectedKey.channel()获得相应的channel实例。这相较于传统的一个请求一个线程模式提高了线程利用率，避免了大量请求带来的线程池饥饿问题。同时，selector本身的事件也需要有很好的资源复用，否则，生产者产生的大量任务同时也会让消费者线程饥饿造成阻塞。Jetty为了解决这个问题采用了一种新的消费模式: EPC,即 eat what you kill消费者和生产者同线程优先处理模式。</p>
<p> <a href="https://github.com/eclipse/jetty.project/blob/jetty-10.0.x/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ExecuteProduceConsume.java">ExectuteProduceConsume</a></p>
<ol>
<li>SelectorProducer类提供了一个循环loop负责阻塞查询select()并且将查询到的事件&#x2F;任务提交到_updates队列中。</li>
</ol>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Runnable <span class="title function_">produce</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> processSelected();</span><br><span class="line">            <span class="keyword">if</span> (task != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> task;</span><br><span class="line"></span><br><span class="line">            processUpdates();</span><br><span class="line"></span><br><span class="line">            updateKeys();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!select())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>产生的任务主要分四种:</li>
</ol>
<ul>
<li>processSelected(): 处理selected事件产生真正的task,或者处理connect事件。</li>
</ul>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">processSelected</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (_cursor.hasNext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> _cursor.next();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">attachment</span> <span class="operator">=</span> key.attachment();</span><br><span class="line">        <span class="type">SelectableChannel</span> <span class="variable">channel</span> <span class="operator">=</span> key.channel();</span><br><span class="line">        <span class="keyword">if</span> (key.isValid())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                LOG.debug(<span class="string">&quot;selected &#123;&#125; &#123;&#125; &#123;&#125; &quot;</span>, safeReadyOps(key), key, attachment);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (attachment <span class="keyword">instanceof</span> Selectable)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Try to produce a task</span></span><br><span class="line">                    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> ((Selectable)attachment).onSelected();</span><br><span class="line">                    <span class="keyword">if</span> (task != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> task;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable())</span><br><span class="line">                &#123;</span><br><span class="line">                    processConnect(key, (Connect)attachment);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;key=&quot;</span> + key + <span class="string">&quot;, att=&quot;</span> + attachment + <span class="string">&quot;, iOps=&quot;</span> + safeInterestOps(key) + <span class="string">&quot;, rOps=&quot;</span> + safeReadyOps(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (CancelledKeyException x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                    LOG.debug(<span class="string">&quot;Ignoring cancelled key for channel &#123;&#125;&quot;</span>, channel);</span><br><span class="line">                IO.close(attachment <span class="keyword">instanceof</span> EndPoint ? (EndPoint)attachment : channel);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable x)</span><br><span class="line">            &#123;</span><br><span class="line">                LOG.warn(<span class="string">&quot;Could not process key for channel &#123;&#125;&quot;</span>, channel, x);</span><br><span class="line">                IO.close(attachment <span class="keyword">instanceof</span> EndPoint ? (EndPoint)attachment : channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                LOG.debug(<span class="string">&quot;Selector loop ignoring invalid key for channel &#123;&#125;&quot;</span>, channel);</span><br><span class="line">            IO.close(attachment <span class="keyword">instanceof</span> EndPoint ? (EndPoint)attachment : channel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>processUpdates(): 将updates中的所有SelectorUpdate实例处理完，应该是Selector内部的事件，例如Start，DumpKeys，Acceptor，Accept，Connect，CloseConnection，StopSelector等，有update方法实现具体update内容。</li>
</ul>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processUpdates</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">AutoLock</span> <span class="variable">l</span> <span class="operator">=</span> _lock.lock())</span><br><span class="line">    &#123;</span><br><span class="line">        Deque&lt;SelectorUpdate&gt; updates = _updates;</span><br><span class="line">        _updates = _updateable;</span><br><span class="line">        _updateable = updates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">        LOG.debug(<span class="string">&quot;updateable &#123;&#125;&quot;</span>, _updateable.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (SelectorUpdate update : _updateable)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_selector == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                LOG.debug(<span class="string">&quot;update &#123;&#125;&quot;</span>, update);</span><br><span class="line">            update.update(_selector);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable x)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG.warn(<span class="string">&quot;Cannot update selector &#123;&#125;&quot;</span>, ManagedSelector.<span class="built_in">this</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _updateable.clear();</span><br><span class="line"></span><br><span class="line">    Selector selector;</span><br><span class="line">    <span class="type">int</span> updates;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">AutoLock</span> <span class="variable">l</span> <span class="operator">=</span> _lock.lock())</span><br><span class="line">    &#123;</span><br><span class="line">        updates = _updates.size();</span><br><span class="line">        _selecting = updates == <span class="number">0</span>;</span><br><span class="line">        selector = _selecting ? <span class="literal">null</span> : _selector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">        LOG.debug(<span class="string">&quot;updates &#123;&#125;&quot;</span>, updates);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selector != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">            LOG.debug(<span class="string">&quot;wakeup on updates &#123;&#125;&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">        selector.wakeup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>updateKeys(): 处理Selectable实例的updateKey和_keys清理</li>
</ul>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateKeys</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do update keys for only previously selected keys.</span></span><br><span class="line">    <span class="comment">// This will update only those keys whose selection did not cause an</span></span><br><span class="line">    <span class="comment">// updateKeys update to be submitted.</span></span><br><span class="line">    <span class="keyword">for</span> (SelectionKey key : _keys)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">attachment</span> <span class="operator">=</span> key.attachment();</span><br><span class="line">        <span class="keyword">if</span> (attachment <span class="keyword">instanceof</span> Selectable)</span><br><span class="line">            ((Selectable)attachment).updateKey();</span><br><span class="line">    &#125;</span><br><span class="line">    _keys.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>processConnect(key, attachment): 处理connect请求</li>
</ul>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processConnect</span><span class="params">(SelectionKey key, Connect connect)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">SelectableChannel</span> <span class="variable">channel</span> <span class="operator">=</span> key.channel();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        key.attach(connect.attachment);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">connected</span> <span class="operator">=</span> _selectorManager.doFinishConnect(channel);</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">            LOG.debug(<span class="string">&quot;Connected &#123;&#125; &#123;&#125;&quot;</span>, connected, channel);</span><br><span class="line">        <span class="keyword">if</span> (connected)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (connect.timeout.cancel())</span><br><span class="line">            &#123;</span><br><span class="line">                key.interestOps(<span class="number">0</span>);</span><br><span class="line">                execute(<span class="keyword">new</span> <span class="title class_">CreateEndPoint</span>(connect, key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SocketTimeoutException</span>(<span class="string">&quot;Concurrent Connect Timeout&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConnectException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable x)</span><br><span class="line">    &#123;</span><br><span class="line">        connect.failed(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>select(): 阻塞调用Selector.select()方法获取selectionKeys事件。</li>
</ul>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">select</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">try</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> _selector;</span><br><span class="line">           <span class="keyword">if</span> (selector != <span class="literal">null</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                   LOG.debug(<span class="string">&quot;Selector &#123;&#125; waiting with &#123;&#125; keys&quot;</span>, selector, selector.keys().size());</span><br><span class="line">                   <span class="comment">//阻塞等待select()返回</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">selected</span> <span class="operator">=</span> ManagedSelector.<span class="built_in">this</span>.select(selector);</span><br><span class="line">               <span class="comment">// The selector may have been recreated.</span></span><br><span class="line">               selector = _selector;</span><br><span class="line">               <span class="keyword">if</span> (selector != <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                       LOG.debug(<span class="string">&quot;Selector &#123;&#125; woken up from select, &#123;&#125;/&#123;&#125;/&#123;&#125; selected&quot;</span>, selector, selected, selector.selectedKeys().size(), selector.keys().size());</span><br><span class="line"></span><br><span class="line">                   <span class="type">int</span> updates;</span><br><span class="line">                   <span class="keyword">try</span> (<span class="type">AutoLock</span> <span class="variable">l</span> <span class="operator">=</span> _lock.lock())</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="comment">// finished selecting</span></span><br><span class="line">                       _selecting = <span class="literal">false</span>;</span><br><span class="line">                       updates = _updates.size();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   _keys = selector.selectedKeys();</span><br><span class="line">                   <span class="type">int</span> <span class="variable">selectedKeys</span> <span class="operator">=</span> _keys.size();</span><br><span class="line">                   <span class="keyword">if</span> (selectedKeys &gt; <span class="number">0</span>)</span><br><span class="line">                       _keyStats.record(selectedKeys);</span><br><span class="line">                   _cursor = selectedKeys &gt; <span class="number">0</span> ? _keys.iterator() : Collections.emptyIterator();</span><br><span class="line">                   <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                       LOG.debug(<span class="string">&quot;Selector &#123;&#125; processing &#123;&#125; keys, &#123;&#125; updates&quot;</span>, selector, selectedKeys, updates);</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (Throwable x)</span><br><span class="line">       &#123;</span><br><span class="line">           IO.close(_selector);</span><br><span class="line">           _selector = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (isRunning())</span><br><span class="line">           &#123;</span><br><span class="line">               LOG.warn(<span class="string">&quot;Fatal select() failure&quot;</span>, x);</span><br><span class="line">               onSelectFailed(x);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                   LOG.warn(<span class="string">&quot;select() failure&quot;</span>, x);</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   LOG.warn(<span class="string">&quot;select() failure &#123;&#125;&quot;</span>, x.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Jetty多协议支持"><a href="#Jetty多协议支持" class="headerlink" title="Jetty多协议支持"></a>Jetty多协议支持</h1><p>Jetty的多协议支持包括HTTP0.9 1.1 2.0和ws等等，其实这些协议本质上都是基于TCP&#x2F;IP层socket协议上的应用层协议，也就是说，在I&#x2F;O层面都是通过socket协议的握手和通信规则，只是在内容传输上会有不同。例如早期的http协议是不面向连接的，也就是说即使建立了socket连接，也会在http回应发出后被断开，从而在每次http请求产生更多的IO开销。http也可以复用socket连接，只需要池化管理socket连接即可。而websocket协议则是通过http请求后的upgrade请求建立长连接，从而达到双向全双工通信的效果，所以能够高效的利用socket连接。</p>
<h2 id="JettyWebsocketServlet"><a href="#JettyWebsocketServlet" class="headerlink" title="JettyWebsocketServlet"></a>JettyWebsocketServlet</h2><p>在socket连接建立后，Jetty会将request真正的进行处理，主要是通过servlet和filter中的逻辑进行内容处理。主要是通过service方法为入口。当Jetty处理完socket连接IO事件processConnect后，会创建CreateEndPoint任务让selectormanager创建客户端点,并且调用newConnection方法-&gt;getDefaultConnectionFactory().newConnection方法创建Connection实例，最终调用connectionOpened -&gt; connection.onOpen方法处理不同协议Connection onOpen后续逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createEndPoint</span><span class="params">(SelectableChannel channel, SelectionKey selectionKey)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">EndPoint</span> <span class="variable">endPoint</span> <span class="operator">=</span> _selectorManager.newEndPoint(channel, <span class="built_in">this</span>, selectionKey);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">context</span> <span class="operator">=</span> selectionKey.attachment();</span><br><span class="line">       <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> _selectorManager.newConnection(channel, endPoint, context);</span><br><span class="line">       endPoint.setConnection(connection);</span><br><span class="line">       submit(selector -&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> selectionKey;</span><br><span class="line">           <span class="keyword">if</span> (key.selector() != selector)</span><br><span class="line">           &#123;</span><br><span class="line">               key = channel.keyFor(selector);</span><br><span class="line">               <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; endPoint <span class="keyword">instanceof</span> Selectable)</span><br><span class="line">                   ((Selectable)endPoint).replaceKey(key);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (key != <span class="literal">null</span>)</span><br><span class="line">               key.attach(endPoint);</span><br><span class="line">       &#125;, <span class="literal">true</span>);</span><br><span class="line">       endPoint.onOpen();</span><br><span class="line">       endPointOpened(endPoint);</span><br><span class="line">       _selectorManager.connectionOpened(connection, context);</span><br><span class="line">       <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">           LOG.debug(<span class="string">&quot;Created &#123;&#125;&quot;</span>, endPoint);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>http请求会采用HttpConnection实例，而websocket会采用NegotiatingClientConnection实例。HTTP协议的handle是基于状态机<a href="https://github.com/eclipse/jetty.project/blob/f69c479d1919552081462be578d4d1a0c0815f8f/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java#L45">HttpHandleState</a>实现，根据不同状态生成不同的action，如dispatch&#x2F;handling&#x2F;async_error&#x2F;blocking等。最终request应该会dispatch用到不同servlet的service方法，进行websocket升级处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Action <span class="title function_">handling</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">try</span> (<span class="type">AutoLock</span> <span class="variable">l</span> <span class="operator">=</span> lock())</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">               LOG.debug(<span class="string">&quot;handling &#123;&#125;&quot;</span>, toStringLocked());</span><br><span class="line"></span><br><span class="line">           <span class="keyword">switch</span> (_state)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">case</span> IDLE:</span><br><span class="line">                   <span class="keyword">if</span> (_requestState != RequestState.BLOCKING)</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(getStatusStringLocked());</span><br><span class="line">                   _initial = <span class="literal">true</span>;</span><br><span class="line">                   _state = State.HANDLING;</span><br><span class="line">                   <span class="keyword">return</span> Action.DISPATCH;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">case</span> WOKEN:</span><br><span class="line">                   <span class="keyword">if</span> (_event != <span class="literal">null</span> &amp;&amp; _event.getThrowable() != <span class="literal">null</span> &amp;&amp; !_sendError)</span><br><span class="line">                   &#123;</span><br><span class="line">                       _state = State.HANDLING;</span><br><span class="line">                       <span class="keyword">return</span> Action.ASYNC_ERROR;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="type">Action</span> <span class="variable">action</span> <span class="operator">=</span> nextAction(<span class="literal">true</span>);</span><br><span class="line">                   <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                       LOG.debug(<span class="string">&quot;nextAction(true) &#123;&#125; &#123;&#125;&quot;</span>, action, toStringLocked());</span><br><span class="line">                   <span class="keyword">return</span> action;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(getStatusStringLocked());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是HttpChannel实例中具体的handle方法,负责执行不同的action，其中最主要的就是dispatch方法，负责分发request到不同的servelet进行服务器用户逻辑处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handle</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">          LOG.debug(<span class="string">&quot;handle &#123;&#125; &#123;&#125; &quot;</span>, _request.getHttpURI(), <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">      HttpChannelState.<span class="type">Action</span> <span class="variable">action</span> <span class="operator">=</span> _state.handling();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Loop here to handle async request redispatches.</span></span><br><span class="line">      <span class="comment">// The loop is controlled by the call to async.unhandle in the</span></span><br><span class="line">      <span class="comment">// finally block below.  Unhandle will return false only if an async dispatch has</span></span><br><span class="line">      <span class="comment">// already happened when unhandle is called.</span></span><br><span class="line">      loop:</span><br><span class="line">      <span class="keyword">while</span> (!getServer().isStopped())</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">try</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                  LOG.debug(<span class="string">&quot;action &#123;&#125; &#123;&#125;&quot;</span>, action, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">switch</span> (action)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">case</span> TERMINATED:</span><br><span class="line">                      onCompleted();</span><br><span class="line">                      <span class="keyword">break</span> loop;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> WAIT:</span><br><span class="line">                      <span class="comment">// break loop without calling unhandle</span></span><br><span class="line">                      <span class="keyword">break</span> loop;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> DISPATCH:</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="keyword">if</span> (!_request.hasMetaData())</span><br><span class="line">                          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;state=&quot;</span> + _state);</span><br><span class="line"></span><br><span class="line">                      dispatch(DispatcherType.REQUEST, () -&gt;</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="keyword">for</span> (HttpConfiguration.Customizer customizer : _configuration.getCustomizers())</span><br><span class="line">                          &#123;</span><br><span class="line">                              customizer.customize(getConnector(), _configuration, _request);</span><br><span class="line">                              <span class="keyword">if</span> (_request.isHandled())</span><br><span class="line">                                  <span class="keyword">return</span>;</span><br><span class="line">                          &#125;</span><br><span class="line">                          getServer().handle(HttpChannel.<span class="built_in">this</span>);</span><br><span class="line">                      &#125;);</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> ASYNC_DISPATCH:</span><br><span class="line">                  &#123;</span><br><span class="line">                      dispatch(DispatcherType.ASYNC, () -&gt; getServer().handleAsync(<span class="built_in">this</span>));</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> ASYNC_TIMEOUT:</span><br><span class="line">                      _state.onTimeout();</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> SEND_ERROR:</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="keyword">try</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="comment">// Get ready to send an error response</span></span><br><span class="line">                          _response.resetContent();</span><br><span class="line"></span><br><span class="line">                          <span class="comment">// the following is needed as you cannot trust the response code and reason</span></span><br><span class="line">                          <span class="comment">// as those could have been modified after calling sendError</span></span><br><span class="line">                          <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);</span><br><span class="line">                          <span class="keyword">if</span> (code == <span class="literal">null</span>)</span><br><span class="line">                              code = HttpStatus.INTERNAL_SERVER_ERROR_500;</span><br><span class="line">                          _response.setStatus(code);</span><br><span class="line"></span><br><span class="line">                          <span class="comment">// The handling of the original dispatch failed and we are now going to either generate</span></span><br><span class="line">                          <span class="comment">// and error response ourselves or dispatch for an error page.  If there is content left over</span></span><br><span class="line">                          <span class="comment">// from the failed dispatch, then we try to consume it here and if we fail we add a</span></span><br><span class="line">                          <span class="comment">// Connection:close.  This can&#x27;t be deferred to COMPLETE as the response will be committed</span></span><br><span class="line">                          <span class="comment">// by then.</span></span><br><span class="line">                          ensureConsumeAllOrNotPersistent();</span><br><span class="line"></span><br><span class="line">                          ContextHandler.<span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> (ContextHandler.Context)_request.getAttribute(ErrorHandler.ERROR_CONTEXT);</span><br><span class="line">                          <span class="type">ErrorHandler</span> <span class="variable">errorHandler</span> <span class="operator">=</span> ErrorHandler.getErrorHandler(getServer(), context == <span class="literal">null</span> ? <span class="literal">null</span> : context.getContextHandler());</span><br><span class="line"></span><br><span class="line">                          <span class="comment">// If we can&#x27;t have a body, then create a minimal error response.</span></span><br><span class="line">                          <span class="keyword">if</span> (HttpStatus.hasNoBody(_response.getStatus()) || errorHandler == <span class="literal">null</span> || !errorHandler.errorPageForMethod(_request.getMethod()))</span><br><span class="line">                          &#123;</span><br><span class="line">                              sendResponseAndComplete();</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                          &#125;</span><br><span class="line"></span><br><span class="line">                          dispatch(DispatcherType.ERROR, () -&gt;</span><br><span class="line">                          &#123;</span><br><span class="line">                              errorHandler.handle(<span class="literal">null</span>, _request, _request, _response);</span><br><span class="line">                              _request.setHandled(<span class="literal">true</span>);</span><br><span class="line">                          &#125;);</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">catch</span> (Throwable x)</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">                              LOG.debug(<span class="string">&quot;Could not perform ERROR dispatch, aborting&quot;</span>, x);</span><br><span class="line">                          <span class="keyword">if</span> (_state.isResponseCommitted())</span><br><span class="line">                              abort(x);</span><br><span class="line">                          <span class="keyword">else</span></span><br><span class="line">                          &#123;</span><br><span class="line">                              <span class="keyword">try</span></span><br><span class="line">                              &#123;</span><br><span class="line">                                  _response.resetContent();</span><br><span class="line">                                  sendResponseAndComplete();</span><br><span class="line">                              &#125;</span><br><span class="line">                              <span class="keyword">catch</span> (Throwable t)</span><br><span class="line">                              &#123;</span><br><span class="line">                                  <span class="keyword">if</span> (x != t)</span><br><span class="line">                                      x.addSuppressed(t);</span><br><span class="line">                                  abort(x);</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">finally</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="comment">// clean up the context that was set in Response.sendError</span></span><br><span class="line">                          _request.removeAttribute(ErrorHandler.ERROR_CONTEXT);</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> ASYNC_ERROR:</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="keyword">throw</span> _state.getAsyncContextEvent().getThrowable();</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> READ_CALLBACK:</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="type">ContextHandler</span> <span class="variable">handler</span> <span class="operator">=</span> _state.getContextHandler();</span><br><span class="line">                      <span class="keyword">if</span> (handler != <span class="literal">null</span>)</span><br><span class="line">                          handler.handle(_request, _request.getHttpInput());</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                          _request.getHttpInput().run();</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> WRITE_CALLBACK:</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="type">ContextHandler</span> <span class="variable">handler</span> <span class="operator">=</span> _state.getContextHandler();</span><br><span class="line">                      <span class="keyword">if</span> (handler != <span class="literal">null</span>)</span><br><span class="line">                          handler.handle(_request, _response.getHttpOutput());</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                          _response.getHttpOutput().run();</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">case</span> COMPLETE:</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="keyword">if</span> (!_response.isCommitted())</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="keyword">if</span> (!_request.isHandled() &amp;&amp; !_response.getHttpOutput().isClosed())</span><br><span class="line">                          &#123;</span><br><span class="line">                              <span class="comment">// The request was not actually handled</span></span><br><span class="line">                              _response.sendError(HttpStatus.NOT_FOUND_404);</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                          &#125;</span><br><span class="line"></span><br><span class="line">                          <span class="comment">// Indicate Connection:close if we can&#x27;t consume all.</span></span><br><span class="line">                          <span class="keyword">if</span> (_response.getStatus() &gt;= <span class="number">200</span>)</span><br><span class="line">                              ensureConsumeAllOrNotPersistent();</span><br><span class="line">                      &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="comment">// RFC 7230, section 3.3.</span></span><br><span class="line">                      <span class="keyword">if</span> (!_request.isHead() &amp;&amp;</span><br><span class="line">                          _response.getStatus() != HttpStatus.NOT_MODIFIED_304 &amp;&amp;</span><br><span class="line">                          !_response.isContentComplete(_response.getHttpOutput().getWritten()))</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="keyword">if</span> (sendErrorOrAbort(<span class="string">&quot;Insufficient content written&quot;</span>))</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                      &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="comment">// If send error is called we need to break.</span></span><br><span class="line">                      <span class="keyword">if</span> (checkAndPrepareUpgrade())</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      </span><br><span class="line">                      <span class="comment">// Set a close callback on the HttpOutput to make it an async callback</span></span><br><span class="line">                      _response.completeOutput(Callback.from(NON_BLOCKING, () -&gt; _state.completed(<span class="literal">null</span>), _state::completed));</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="built_in">this</span>.toString());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (Throwable failure)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="string">&quot;org.eclipse.jetty.continuation.ContinuationThrowable&quot;</span>.equals(failure.getClass().getName()))</span><br><span class="line">                  LOG.trace(<span class="string">&quot;IGNORED&quot;</span>, failure);</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  handleException(failure);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          action = _state.unhandle();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (LOG.isDebugEnabled())</span><br><span class="line">          LOG.debug(<span class="string">&quot;!handle &#123;&#125; &#123;&#125;&quot;</span>, action, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">suspended</span> <span class="operator">=</span> action == Action.WAIT;</span><br><span class="line">      <span class="keyword">return</span> !suspended;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>架构</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>Enterprise App Platform Pattern</title>
    <url>/2021/09/16/%E6%9E%B6%E6%9E%84/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Optimus-Pattern/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5018f2252d259478a5b11600dde70a05e5bc077aa6b2f6927e910c7c7050979c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>技术日志</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>七天算法训练营笔记</title>
    <url>/2022/11/14/Algorithms/%E4%B8%83%E5%A4%A9%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="center">时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="left">查询 Lookup</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="left">插入 Insert</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="left">删除 Delete</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="left">前插 Prepend&#x2F;Pushfront</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="left">后插 Append&#x2F;Pushback</td>
<td align="center">O(1)</td>
</tr>
</tbody></table>
<h2 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h2><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">LC26题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != nums[cur]) nums[++cur] = nums[i];<span class="comment">//如果当前nums[i]的值与已经存储的最后元素nums[cur]不等，则存入下一个位置, 第一个数肯定要</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h2><p><a href="https://leetcode.cn/problems/move-zeroes/">LC283题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != <span class="number">0</span>) nums[cur++] =  nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补零</span></span><br><span class="line">        <span class="keyword">while</span> ( cur &lt; nums.length ) &#123;</span><br><span class="line">            nums[cur] = <span class="number">0</span>;</span><br><span class="line">            cur ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h2><p><a href="https://leetcode.cn/problems/merge-sorted-array/">LC88题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m -<span class="number">1</span>, j = n -<span class="number">1</span>, cur = m + n -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">0</span> || (i &gt;= <span class="number">0</span> &amp;&amp; nums1[i] &gt;= nums2[j]))&#123; <span class="comment">// 在nums2已经越界或者i没越界且为大的时候，存入nums1[i]</span></span><br><span class="line">                nums1[cur] = nums1[i];                </span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[cur] = nums2[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            cur--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="变长数组ArrayList设计题"><a href="#变长数组ArrayList设计题" class="headerlink" title="变长数组ArrayList设计题"></a>变长数组ArrayList设计题</h2><p>如何实现一个变长数组？</p>
<ul>
<li>支持索引与随机访问</li>
<li>分配多长的连续空间</li>
<li>空间不够用了怎么办</li>
<li>空间剩余很多如何回收</li>
</ul>
<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>单链表和双链表数据结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    MyLinkedListNode next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDoubleLinkedListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    MyDoubleLinkedListNode next;</span><br><span class="line">    MyDoubleLinkedListNode pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 具有保护节点的单链表 protect.next = head</span></span><br><span class="line">    <span class="type">LinkedList</span> <span class="variable">protect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>(<span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具有保护节点组的双链表      </span></span><br><span class="line">    <span class="type">LinkedList</span> <span class="variable">protectTail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>(<span class="number">0</span>, <span class="literal">null</span>);        </span><br><span class="line">    <span class="type">LinkedList</span> <span class="variable">protectHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>(<span class="number">0</span>, protectTail);</span><br><span class="line">    protectTail.pre = proctedHead;</span><br><span class="line">    protectedHead.pre = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="center">时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="left">查询 Lookup</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="left">插入 Insert</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="left">删除 Delete</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="left">前插 Prepend&#x2F;Pushfront</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="left">后插 Append&#x2F;Pushback</td>
<td align="center">O(1)</td>
</tr>
</tbody></table>
<h2 id="反转链表问题"><a href="#反转链表问题" class="headerlink" title="反转链表问题"></a>反转链表问题</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/">LC206题目链接</a></p>
<p><img src="/2022/11/14/Algorithms/%E4%B8%83%E5%A4%A9%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/LC206.jpg" alt="LC206"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextHead</span> <span class="operator">=</span> head.next; <span class="comment">// 缓存因为next会被修改</span></span><br><span class="line">            head.next = last; <span class="comment">// 跟新next指针</span></span><br><span class="line">            last = head; <span class="comment">//更新上一个节点为当前节点</span></span><br><span class="line">            head = nextHead; <span class="comment">// 更新当前节点 推进</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="K个一组翻转链表"><a href="#K个一组翻转链表" class="headerlink" title="K个一组翻转链表"></a>K个一组翻转链表</h2><p><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">LC25题目链接</a></p>
<p><img src="/2022/11/14/Algorithms/%E4%B8%83%E5%A4%A9%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/LC25.jpg" alt="LC25"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li>分组：每k个元素的头尾节点确定</li>
<li>子问题：针对每一组k个元素的反转问题</li>
<li>每组k个元素的前驱后继引用更新问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">protect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> protect;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 分组：每k个元素的头尾节点确定</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">groupEnd</span> <span class="operator">=</span> getEnd(head, k);</span><br><span class="line">        <span class="keyword">if</span>(groupEnd == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 分组遍历逻辑</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cacheNexthead</span> <span class="operator">=</span> groupEnd.next; <span class="comment">// 后继结点会被跟新需要先缓存</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 子问题：针对每一组k个元素的反转问题</span></span><br><span class="line">        reverseList(head, cacheNexthead);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 每组k个元素的指向前一组tail，后一组head引用更新问题        </span></span><br><span class="line">        last.next = groupEnd; <span class="comment">// 前一组最后应指向本组的最后即变化后的头节点</span></span><br><span class="line">        head.next = cacheNexthead; <span class="comment">// 本组的最后一个节点应该指向下一组的head</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 更新组头尾节点</span></span><br><span class="line">            last = head; <span class="comment">// last 应该指向调转后的head，groupEnd已经是新的链表头</span></span><br><span class="line">            head = cacheNexthead; <span class="comment">// head 应该指向下一组头节点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> protect.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            k--;            </span><br><span class="line">            <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">            head = head.next; <span class="comment">// 走k-1次，返回groupEnd</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回End, 但是复用LC206算法需要last.next</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">(ListNode head, ListNode nextHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 第一步跳过，因为第一个head的next会在第三步更新</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">while</span> (head != nextHead) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">cacheNextHead</span> <span class="operator">=</span> head.next; <span class="comment">// 缓存因为next会被修改</span></span><br><span class="line">            head.next = last; <span class="comment">// 跟新next指针</span></span><br><span class="line">            last = head; <span class="comment">//更新上一个节点为当前节点</span></span><br><span class="line">            head = cacheNextHead; <span class="comment">// 更新当前节点 推进</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="邻值查找-x2F-双链表问题"><a href="#邻值查找-x2F-双链表问题" class="headerlink" title="邻值查找&#x2F;双链表问题"></a>邻值查找&#x2F;双链表问题</h2><p><a href="https://www.acwing.com/problem/content/description/138/">ACWing题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ACWing need a class called Main for solution</span></span><br><span class="line"><span class="comment">// and all the input/output logic</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="comment">// input the array</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Node[] nums = <span class="keyword">new</span> <span class="title class_">Node</span>[size], sorted = <span class="keyword">new</span> <span class="title class_">Node</span>[size];</span><br><span class="line">        <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[size-<span class="number">1</span>], pre = <span class="keyword">new</span> <span class="title class_">int</span>[size-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i &lt; size)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(number, i);</span><br><span class="line">            nums[i] = node;</span><br><span class="line">            sorted[i] = node;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sort and add pre/post information to build a linked list;</span></span><br><span class="line">        Arrays.sort(sorted);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; sorted.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; <span class="number">0</span>) sorted[j].pre = sorted[j-<span class="number">1</span>]; <span class="keyword">else</span> sorted[j].pre = <span class="keyword">new</span> <span class="title class_">Node</span>(Integer.MIN_VALUE, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(j &lt; nums.length -<span class="number">1</span>) sorted[j].post = sorted[j+<span class="number">1</span>]; <span class="keyword">else</span> sorted[j].post = <span class="keyword">new</span> <span class="title class_">Node</span>(Integer.MAX_VALUE, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// start from last of array nums, calc it&#x27;s pre/post diff via Linked List, and remove that node in linked list;</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="type">int</span> <span class="variable">preDiff</span> <span class="operator">=</span> nums[i].pre.index &gt;= <span class="number">0</span> &amp;&amp; nums[i].pre.index &lt; size ? nums[i].value - nums[i].pre.value : Integer.MAX_VALUE;</span><br><span class="line">            <span class="type">int</span> <span class="variable">postDiff</span> <span class="operator">=</span> nums[i].post.index &gt;= <span class="number">0</span> &amp;&amp; nums[i].post.index &lt; size ? nums[i].post.value - nums[i].value: Integer.MAX_VALUE;</span><br><span class="line">            diff[i-<span class="number">1</span>] = Math.min(preDiff, postDiff);</span><br><span class="line">            <span class="keyword">if</span>(preDiff &lt;= postDiff) pre[i-<span class="number">1</span>] = nums[i].pre.index+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> pre[i-<span class="number">1</span>] =  nums[i].post.index+<span class="number">1</span>;</span><br><span class="line">            removeNode(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print(diff, pre);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] diff, <span class="type">int</span>[] pre)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; diff.length; i++)&#123;</span><br><span class="line">            System.out.println(diff[i] + <span class="string">&quot; &quot;</span> + pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">postCache</span> <span class="operator">=</span> node.post;</span><br><span class="line">        node.pre.post = postCache;</span><br><span class="line">        node.post.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> <span class="keyword">implements</span>  <span class="title class_">Comparable</span>&lt;Node&gt;&#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="keyword">public</span> Node pre;</span><br><span class="line">        <span class="keyword">public</span> Node post;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Node other)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.value - other.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="链表找环问题"><a href="#链表找环问题" class="headerlink" title="链表找环问题"></a>链表找环问题</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle/">LC141题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">            fast = fast.next.next; <span class="comment">// 快指针每次走两步</span></span><br><span class="line">            slow = slow.next; <span class="comment">// 慢指针每次走一步</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">LC142题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">            fast = fast.next.next; <span class="comment">// 快指针每次走两步</span></span><br><span class="line">            slow = slow.next; <span class="comment">// 慢指针每次走一步</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow2</span> <span class="operator">=</span> head; </span><br><span class="line">        <span class="keyword">while</span> (slow != slow2)&#123; <span class="comment">// 不能do while，因为有可能相遇的节点就正是环开始节点 [1, 2] 0</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">            slow2 = slow2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">LC21题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur1</span> <span class="operator">=</span> list1, cur2 = list2, nextHead2 = <span class="literal">null</span>, protect = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, list1),lastHead1 = protect;</span><br><span class="line">        <span class="keyword">while</span>(cur1 != <span class="literal">null</span> || cur2 != <span class="literal">null</span>) &#123;           </span><br><span class="line">            <span class="comment">// 更新节点</span></span><br><span class="line">            <span class="keyword">if</span>(cur1 == <span class="literal">null</span> || (cur2 != <span class="literal">null</span> &amp;&amp; cur1.val &gt; cur2.val))&#123; <span class="comment">// 取list2节点,cur2 推进</span></span><br><span class="line">                <span class="comment">// 先缓存即将推进的节点</span></span><br><span class="line">                nextHead2 = cur2.next;</span><br><span class="line">                <span class="comment">// cur2 插入在cur1之前,lastHead1之后       </span></span><br><span class="line">                cur2.next = cur1;               </span><br><span class="line">                lastHead1.next = cur2;</span><br><span class="line">                <span class="comment">// 更新lastHead1 和cur2 指针          </span></span><br><span class="line">                lastHead1 = cur2;</span><br><span class="line">                cur2 = nextHead2;                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//取list1节点，cur1直接推进</span></span><br><span class="line">                lastHead1 = cur1;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> protect.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h2><p><a href="https://leetcode.cn/problems/plus-one/">LC66题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] plusOne(<span class="type">int</span>[] digits) &#123;</span><br><span class="line">        <span class="comment">// 逆序+递归</span></span><br><span class="line">        <span class="keyword">return</span> plusOne(digits, digits.length -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] plusOne(<span class="type">int</span>[] digits, <span class="type">int</span> pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[digits.length+<span class="number">1</span>];</span><br><span class="line">            result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digits.length; i ++)&#123;</span><br><span class="line">                result[i+<span class="number">1</span>] = digits[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        digits[pos] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(digits[pos]/<span class="number">10</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            digits[pos] %= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> plusOne(digits, pos-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">LC150题目链接</a></p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>建立一个用于存数的栈，逐一扫描后缀表达式中的元素。</p>
<ul>
<li>如果遇到一个数，则把该数入栈。</li>
<li>如果遇到运算符，就取出栈顶的两个数进行计算，然后把结果入栈。<br>扫描完毕后，栈中恰好剩下的一个数，就是该表达式的值。</li>
</ul>
<p>时间复杂度为O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            Stack&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(cur &lt; tokens.length)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tokens[cur].equals(<span class="string">&quot;+&quot;</span>) || tokens[cur].equals(<span class="string">&quot;-&quot;</span>) || tokens[cur].equals(<span class="string">&quot;*&quot;</span>)  || tokens[cur].equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">operant1</span> <span class="operator">=</span> nums.pop();</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">operant2</span> <span class="operator">=</span> nums.pop();</span><br><span class="line">                nums.push(calculate(operant1, operant2, tokens[cur]));</span><br><span class="line">            &#125;<span class="keyword">else</span> nums.push(Integer.parseInt(tokens[cur]));</span><br><span class="line">                cur ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nums.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">calculate</span><span class="params">(Integer x, Integer y, String operator)</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(operator)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> x + y;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> y - x;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> x * y;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> y/x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="中缀表达式：基本计算器I-amp-II"><a href="#中缀表达式：基本计算器I-amp-II" class="headerlink" title="中缀表达式：基本计算器I &amp; II"></a>中缀表达式：基本计算器I &amp; II</h2><p><a href="https://leetcode.cn/problems/basic-calculator-ii/">LC227题目链接</a></p>
<h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>中缀转后缀，然后计算：</p>
<ul>
<li>需要看下一个符号的优先级是否高于本符号。</li>
<li>如果高于：需要一个操作符栈，低优先级符号先入栈，高优先级的符号后入栈，先出。</li>
<li>如果低于：把操作符栈出放入后缀表达式队列。</li>
<li>处理后缀表达式队列，参考上题。</li>
</ul>
<p>3+2*2</p>
<p>运算符栈： + *</p>
<p>后缀表达式： 3 2 2 * +</p>
<p>3+2-2</p>
<p>运算符栈：</p>
<p>后缀表达式： 3 2 + 2 -</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            s += <span class="string">&quot; &quot;</span>;</span><br><span class="line">            ArrayList&lt;String&gt; tokens = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            Stack&lt;Character&gt; operators = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">needsZero</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// -4 * 9 需要补零</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i ++)&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    number += ch;</span><br><span class="line">                    needsZero = <span class="literal">false</span>; <span class="comment">// 5-3 不需要补零</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!number.isEmpty())&#123;</span><br><span class="line">                    tokens.add(number);</span><br><span class="line">                    number = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    operators.push(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">                    needsZero = <span class="literal">true</span>; <span class="comment">// (-3) 需要补零</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!operators.empty() &amp;&amp; !operators.peek().equals(<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                        tokens.add(operators.pop().toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!operators.empty() &amp;&amp; operators.peek().equals(<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                        operators.pop();<span class="comment">// 不需要）</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    needsZero = <span class="literal">false</span>; <span class="comment">// )-3 不需要补零</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">currRank</span> <span class="operator">=</span> getRank(ch);</span><br><span class="line">                <span class="keyword">while</span> (!operators.empty() &amp;&amp; getRank(operators.peek()) &gt;= currRank)&#123;</span><br><span class="line">                    tokens.add(operators.pop().toString());</span><br><span class="line">                &#125;</span><br><span class="line">                operators.push(ch);</span><br><span class="line">                <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span> &amp;&amp; needsZero) tokens.add(Integer.toString(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!operators.isEmpty())&#123;</span><br><span class="line">                tokens.add(operators.pop().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> evalRPN(tokens);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRank</span><span class="params">(<span class="type">char</span> ch)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span> ) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(ArrayList tokens)</span>&#123;</span><br><span class="line">            Stack&lt;Integer&gt; operants = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tokens.size(); i ++ )&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) tokens.get(i);</span><br><span class="line">                <span class="keyword">if</span>(token.equals(<span class="string">&quot;+&quot;</span>) || token.equals(<span class="string">&quot;-&quot;</span>) || token.equals(<span class="string">&quot;*&quot;</span>) || token.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">operant1</span> <span class="operator">=</span> operants.pop();</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">operant2</span> <span class="operator">=</span> operants.pop();</span><br><span class="line">                    operants.push(calc(operant1, operant2, token));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    operants.push(Integer.parseInt(token));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> operants.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Integer <span class="title function_">calc</span><span class="params">(Integer x, Integer y, String token)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(token.equals(<span class="string">&quot;+&quot;</span>)) <span class="keyword">return</span> x +y;</span><br><span class="line">            <span class="keyword">if</span> (token.equals(<span class="string">&quot;-&quot;</span>)) <span class="keyword">return</span> y -x;</span><br><span class="line">            <span class="keyword">if</span>(token.equals(<span class="string">&quot;*&quot;</span>)) <span class="keyword">return</span> x *y;</span><br><span class="line">            <span class="keyword">if</span> (token.equals(<span class="string">&quot;/&quot;</span>)) <span class="keyword">return</span> y /x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>表达式拆分，加减运算为低优先级运算，将操作数和符号一起入栈。乘除为高优先级运算，遇到则立刻处理。最后将所有操作数出栈相加，得到结果。</p>
<p><a href="https://leetcode.cn/problems/basic-calculator/">LC224题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            s += <span class="string">&quot; &quot;</span>;</span><br><span class="line">            ArrayList&lt;String&gt; tokens = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            Stack&lt;Character&gt; operators = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">needsZero</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// -4 * 9 需要补零</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i ++)&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    number += ch;</span><br><span class="line">                    needsZero = <span class="literal">false</span>; <span class="comment">// 5-3 不需要补零</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!number.isEmpty())&#123;</span><br><span class="line">                    tokens.add(number);</span><br><span class="line">                    number = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    operators.push(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">                    needsZero = <span class="literal">true</span>; <span class="comment">// (-3) 需要补零</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!operators.empty() &amp;&amp; !operators.peek().equals(<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                        tokens.add(operators.pop().toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!operators.empty() &amp;&amp; operators.peek().equals(<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                        operators.pop();<span class="comment">// 不需要）</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    needsZero = <span class="literal">false</span>; <span class="comment">// )-3 不需要补零</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">currRank</span> <span class="operator">=</span> getRank(ch);</span><br><span class="line">                <span class="keyword">while</span> (!operators.empty() &amp;&amp; getRank(operators.peek()) &gt;= currRank)&#123;</span><br><span class="line">                    tokens.add(operators.pop().toString());</span><br><span class="line">                &#125;</span><br><span class="line">                operators.push(ch);</span><br><span class="line">                <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span> &amp;&amp; needsZero) tokens.add(Integer.toString(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!operators.isEmpty())&#123;</span><br><span class="line">                tokens.add(operators.pop().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> evalRPN(tokens);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRank</span><span class="params">(<span class="type">char</span> ch)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span> ) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(ArrayList tokens)</span>&#123;</span><br><span class="line">            Stack&lt;Integer&gt; operants = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tokens.size(); i ++ )&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) tokens.get(i);</span><br><span class="line">                <span class="keyword">if</span>(token.equals(<span class="string">&quot;+&quot;</span>) || token.equals(<span class="string">&quot;-&quot;</span>) || token.equals(<span class="string">&quot;*&quot;</span>) || token.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">operant1</span> <span class="operator">=</span> operants.pop();</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">operant2</span> <span class="operator">=</span> operants.pop();</span><br><span class="line">                    operants.push(calc(operant1, operant2, token));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    operants.push(Integer.parseInt(token));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> operants.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Integer <span class="title function_">calc</span><span class="params">(Integer x, Integer y, String token)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(token.equals(<span class="string">&quot;+&quot;</span>)) <span class="keyword">return</span> x +y;</span><br><span class="line">            <span class="keyword">if</span> (token.equals(<span class="string">&quot;-&quot;</span>)) <span class="keyword">return</span> y -x;</span><br><span class="line">            <span class="keyword">if</span>(token.equals(<span class="string">&quot;*&quot;</span>)) <span class="keyword">return</span> x *y;</span><br><span class="line">            <span class="keyword">if</span> (token.equals(<span class="string">&quot;/&quot;</span>)) <span class="keyword">return</span> y /x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="柱状图中最大的矩形"><a href="#柱状图中最大的矩形" class="headerlink" title="柱状图中最大的矩形"></a>柱状图中最大的矩形</h2><p><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">LC84题目链接</a></p>
<p>单调栈算法, 维护一个单调递增高度的栈，当一个新的高度低于当前栈顶时，单调性被破坏，需要将被破坏的栈元素逐个出栈，直到入栈新元素时单调性恢复。出栈元素的宽度元素叠加到accumulatedWidth中，以被后面的元素可以计算矩形面积。时间复杂度时O(n)。</p>
<h3 id="思维套路"><a href="#思维套路" class="headerlink" title="思维套路"></a>思维套路</h3><ul>
<li>确定递增递减——关键在于考虑“前面不能影响到后面”的条件</li>
<li>本题中若h[i-1]&gt;h[i], 则h[i-1]这个高度就无法影响到后面，自然可以单独计算了</li>
</ul>
<h3 id="代码套路"><a href="#代码套路" class="headerlink" title="代码套路"></a>代码套路</h3><ul>
<li>for每个元素<ul>
<li>while（栈顶与新元素不满足单调性）{弹栈，更新答案，累加“宽度”}</li>
<li>入栈</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">            Stack&lt;Rect&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= heights.length; i ++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> i == heights.length ? <span class="number">0</span> : heights[i]; <span class="comment">// 末尾补零，从而清空栈。</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">accumulatedWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 新的元素破坏单调性</span></span><br><span class="line">                <span class="keyword">while</span>(!s.isEmpty() &amp;&amp; s.peek().height &gt; h) &#123;</span><br><span class="line">                    accumulatedWidth += s.peek().width;</span><br><span class="line">                    result = Math.max(result, s.peek().height * accumulatedWidth);</span><br><span class="line">                    s.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                s.push(<span class="keyword">new</span> <span class="title class_">Rect</span>(accumulatedWidth + <span class="number">1</span>, h));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Rect</span> &#123;</span><br><span class="line">            <span class="type">int</span> width;</span><br><span class="line">            <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">            Rect (<span class="type">int</span> width, <span class="type">int</span> height)&#123;</span><br><span class="line">                <span class="built_in">this</span>.width = width;</span><br><span class="line">                <span class="built_in">this</span>.height = height;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/">LC42题目链接</a></p>
<h3 id="思维套路-1"><a href="#思维套路-1" class="headerlink" title="思维套路"></a>思维套路</h3><ul>
<li>确定递增递减——关键在于考虑“前面不能影响到后面”的条件</li>
<li>本题中若h[i-1]&lt; h[i], 则h[i-1]这个高度就无法影响到后面，自然可以单独计算了</li>
</ul>
<p>单调递减栈算法：维护一个单调递减的栈，当栈顶高度小于新入栈元素的高度时，弹出所有小于新入栈元素的元素，然后累计弹出元素的横条面积，其中横条面积是一个以栈顶为底和宽度，栈顶元素前后的最小值为高的长方形。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heights.length; i++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">accumulatedWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> heights[i];</span><br><span class="line">                <span class="keyword">while</span>(!s.isEmpty() &amp;&amp; s.peek().height &lt;= height) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">bottom</span> <span class="operator">=</span> s.peek().height;</span><br><span class="line">                    accumulatedWidth += s.peek().width;</span><br><span class="line">                    s.pop();</span><br><span class="line">                    <span class="comment">// 以bottom为底，accumulatedWidth为宽度，（左右两侧较小者）up为顶的长方形是累积的雨水横条</span></span><br><span class="line">                    <span class="comment">// 如果栈空，则高度为bottom，增加面积为0</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> s.isEmpty() ? bottom : Math.min(height, s.peek().height);</span><br><span class="line"></span><br><span class="line">                    result += accumulatedWidth * (up - bottom);</span><br><span class="line">                &#125;</span><br><span class="line">                s.push(<span class="keyword">new</span> <span class="title class_">Rect</span>( accumulatedWidth + <span class="number">1</span>, height ));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Rect</span> &#123;</span><br><span class="line">        <span class="type">int</span> width;</span><br><span class="line">        <span class="type">int</span> height;</span><br><span class="line">        Rect(<span class="type">int</span> width, <span class="type">int</span> height)&#123;</span><br><span class="line">                <span class="built_in">this</span>.width = width;</span><br><span class="line">                <span class="built_in">this</span>.height = height;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Rect&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/">LC20题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(o.isEmpty() || !cleanUp(<span class="string">&quot;(&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(o.isEmpty() || !cleanUp(<span class="string">&quot;&#123;&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(o.isEmpty() || !cleanUp(<span class="string">&quot;[&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> o.push(String.valueOf(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(o.isEmpty()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">cleanUp</span><span class="params">(String match)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!o.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> o.pop();</span><br><span class="line">            <span class="keyword">if</span>(x.equals(match)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;String&gt; o = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h2><p><a href="https://leetcode.cn/problems/min-stack/">LC155题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 单调递减栈</span></span><br><span class="line">        <span class="keyword">if</span>(min.isEmpty() || (!min.isEmpty() &amp;&amp; min.peek() &gt;= val)) &#123;</span><br><span class="line">            min.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">        s.push(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.pop().equals(min.peek())) min.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单调递减栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; min = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 原栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(val);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="队"><a href="#队" class="headerlink" title="队"></a>队</h1><h2 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/">LC139题目链接</a></p>
<h3 id="思维套路-2"><a href="#思维套路-2" class="headerlink" title="思维套路"></a>思维套路</h3><ul>
<li>单调队列维护的是一个候选集和，前面的较旧，后边比较新（时间有单调性）</li>
<li>候选项的某个属性也具有单调性（比如整数值）</li>
<li>确定递增递减的方法——考虑任意连个候选项j1&lt; j2，写出j1比j2优的条件</li>
</ul>
<p>排除冗余的关键：若j1比j2差（nums[j1]&lt; nums[j2]，且j1的生命周期比j2短，那j1就没有留在队列中的意义。</p>
<p>单调递减队列：需要维护一个单调递减队列，队尾插入新元素，当新元素大于队尾元素时，队尾元素出栈，直到满足单调条件。队首元素需要满足索引大于i-k条件。 </p>
<h3 id="代码套路-1"><a href="#代码套路-1" class="headerlink" title="代码套路"></a>代码套路</h3><ul>
<li>for每个元素<ol>
<li>while(队头过期) 队头出队</li>
<li>取队头为最佳选项，计算答案</li>
<li>while（队尾与新元素不满足单调性）队尾出队</li>
<li>新元素入队</li>
</ol>
</li>
</ul>
<p>2和3的顺序取决于i是不是候选项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[Math.max(nums.length - k + <span class="number">1</span>, <span class="number">1</span> )];</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                <span class="keyword">while</span>(!q.isEmpty() &amp;&amp; nums[q.peekFirst()] &lt;= i - k) q.removeFirst();</span><br><span class="line">                <span class="keyword">while</span>(!q.isEmpty() &amp;&amp; nums[q.peekLast()] &lt; number) q.removeLast();</span><br><span class="line"></span><br><span class="line">                q.add(i);</span><br><span class="line">                <span class="comment">// 单调递减队列，队首是最大值</span></span><br><span class="line">                <span class="keyword">if</span>(i &gt;= k-<span class="number">1</span>)  result[cur++] = nums[q.peekFirst()];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="设计循环双端队列"><a href="#设计循环双端队列" class="headerlink" title="设计循环双端队列"></a>设计循环双端队列</h2><p><a href="https://leetcode.cn/problems/design-circular-deque/">LC641题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularDeque</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCircularDeque</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">            q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">            capacity = k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertFront</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(q.size() == capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            q.addFirst(value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertLast</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(q.size() == capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            q.addLast(value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteFront</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(q.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            q.removeFirst();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteLast</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(q.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            q.removeLast();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFront</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> q.isEmpty()? -<span class="number">1</span> : q.peekFirst();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRear</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> q.isEmpty()? -<span class="number">1</span> : q.peekLast();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> q.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> q.size() == capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> LinkedList&lt;Integer&gt; q ;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularDeque object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularDeque obj = new MyCircularDeque(k);</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.insertFront(value);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.insertLast(value);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.deleteFront();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.deleteLast();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj.getFront();</span></span><br><span class="line"><span class="comment"> * int param_6 = obj.getRear();</span></span><br><span class="line"><span class="comment"> * boolean param_7 = obj.isEmpty();</span></span><br><span class="line"><span class="comment"> * boolean param_8 = obj.isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最大矩形"><a href="#最大矩形" class="headerlink" title="最大矩形"></a>最大矩形</h2><p><a href="https://leetcode.cn/problems/maximal-rectangle/">LC85题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalRectangle</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造纵向连续1和二维数组S[rows][cols]</span></span><br><span class="line">        <span class="comment">// S[p][] 是一组子矩阵的纵向柱状图，求出最大矩形</span></span><br><span class="line">        <span class="comment">// 遍历所有p，得出最大矩阵所包含的最大矩形</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length, cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] S = <span class="keyword">new</span> <span class="title class_">int</span>[rows+<span class="number">1</span>][cols];</span><br><span class="line">        <span class="type">int</span>[] max = <span class="keyword">new</span> <span class="title class_">int</span>[rows];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt;= rows; r ++) &#123;            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; cols; c++) &#123;</span><br><span class="line">                <span class="keyword">if</span>( r == <span class="number">0</span> || matrix[r-<span class="number">1</span>][c] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    S[r][c] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> S[r][c] = S[r-<span class="number">1</span>][c]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">1</span>; r &lt;= rows; r++) &#123;</span><br><span class="line">                max[r-<span class="number">1</span>] = largestRectangleArea(S[r]);</span><br><span class="line">                ans = Math.max(ans, max[r-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">            Stack&lt;Rect&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= heights.length; i ++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> i == heights.length ? <span class="number">0</span> : heights[i];  <span class="comment">// 末尾补零，从而清空栈。</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">accumulatedWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 新的元素破坏单调性</span></span><br><span class="line">                <span class="keyword">while</span>(!s.isEmpty() &amp;&amp; s.peek().height &gt; h) &#123;</span><br><span class="line">                    accumulatedWidth += s.peek().width;</span><br><span class="line">                    result = Math.max(result, s.peek().height * accumulatedWidth);</span><br><span class="line">                    s.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                s.push(<span class="keyword">new</span> <span class="title class_">Rect</span>(accumulatedWidth + <span class="number">1</span>, h));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Rect</span> &#123;</span><br><span class="line">            <span class="type">int</span> width;</span><br><span class="line">            <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">            Rect (<span class="type">int</span> width, <span class="type">int</span> height)&#123;</span><br><span class="line">                <span class="built_in">this</span>.width = width;</span><br><span class="line">                <span class="built_in">this</span>.height = height;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>前缀和思想是运用前缀和数组作为桥梁，取解决数组的各种子数组优化问题。已知数组A[ i]，</p>
<p>s[ i] &#x3D; s[ i - 1] + A[ i]</p>
<p>字段和从l 到 r则表达为：</p>
<p>sum(l, r) &#x3D; s[ r] - s[ l - 1]</p>
<p>当A中都是非负数时，前缀和数组s单调递增。这样子数组和问题就转化成了s数组元素的问题。</p>
<h2 id="统计优美子数组"><a href="#统计优美子数组" class="headerlink" title="统计优美子数组"></a>统计优美子数组</h2><p><a href="https://leetcode.cn/problems/count-number-of-nice-subarrays/">LC1248题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] s = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        count[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; count.length; i ++) count[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">            s[i] = s[i-<span class="number">1</span>] + nums[i-<span class="number">1</span>]%<span class="number">2</span>;</span><br><span class="line">            count[s[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存入count[s[i]]的个数</span></span><br><span class="line">        <span class="comment">// s[i] - s[j] == k 等价于</span></span><br><span class="line">        <span class="comment">// count[s[i] - k] 的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt;=k ) result += count[s[i] - k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h2><p><a href="https://leetcode.cn/problems/maximum-subarray/">LC53题目链接</a></p>
<h3 id="解题思路一-1"><a href="#解题思路一-1" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>通过维护前缀和数组，和前缀最小和数组，两者差为子数组和，求最大值问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] s = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        s[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] preMin = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        preMin[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            s[i+<span class="number">1</span>] = s[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">10000</span>;</span><br><span class="line">        <span class="comment">// preMin 是前缀和最小值，那么s[i] - preMin[j]则为最大子数组和。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length; i ++) &#123;</span><br><span class="line">            preMin[i] = Math.min(preMin[i -<span class="number">1</span>], s[i]);</span><br><span class="line">            <span class="comment">// 更新最大和 = s[i] - preMin[i-1] 至少包含第i个元素</span></span><br><span class="line">            result = Math.max(result, s[i] - preMin[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="解题思路二-1"><a href="#解题思路二-1" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>通过贪心算法，维护双指针，当子数组和为负数，立即舍弃，慢指针前进，否则快指针已知前进直到数组尾。</p>
<h1 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h1><p>二维数组A (m*n)，其前缀和s[i]s[j]为第i行第j列元素左上角、子矩阵的各个元素之和。</p>
<p>递推关系</p>
<p>s[i][j]&#x3D; s[i-1][j] +s[i][j-1] - s[i-1]s[j-1] + A[i][j]</p>
<p>子矩阵和</p>
<p>以[p][q]为左上角元素，[i][j]为右下角元素的子矩阵的元素和。</p>
<p>递推关系</p>
<p>sum(p,q,i,j) &#x3D; s[i][j] +s[i][q-1] - s[p-1]s[j] + s[p-1][q-1]</p>
<p>其中，p，q总是需要减一。</p>
<h2 id="二位区域和检索——矩阵不可变"><a href="#二位区域和检索——矩阵不可变" class="headerlink" title="二位区域和检索——矩阵不可变"></a>二位区域和检索——矩阵不可变</h2><p><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/">LC304题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        n = matrix.length;<span class="comment">//row number;</span></span><br><span class="line">        m = matrix[<span class="number">0</span>].length; <span class="comment">// col number;</span></span><br><span class="line">        sum = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 二维数组前缀和</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j-<span class="number">1</span>] -sum[i-<span class="number">1</span>][j-<span class="number">1</span>]+ matrix[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> &#123;</span><br><span class="line">        row1++;</span><br><span class="line">        row2++;</span><br><span class="line">        col1++;</span><br><span class="line">        col2++;</span><br><span class="line">        <span class="comment">// 索引加一，符合前缀和数组1开头算法。</span></span><br><span class="line">        <span class="keyword">return</span> sum[row2][col2] - sum[row1-<span class="number">1</span>][col2] - sum[row2][col1-<span class="number">1</span>] + sum[row1-<span class="number">1</span>][col1-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum[][];</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumMatrix object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumMatrix obj = new NumMatrix(matrix);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.sumRegion(row1,col1,row2,col2);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><p>差分数组B是由数组的元素差组成的，其中第i元素等于原数组A第i元素与第i-1元素或0的差。</p>
<p>递推关系</p>
<p>B[1] &#x3D; A[1]</p>
<p>B[i] &#x3D; A[i -1]</p>
<ul>
<li>差分数组的前缀和就是原数组</li>
<li>把A数组的第l到第r元素均加d，对应的B变化为B[l]加d，B[r+1]减d。</li>
</ul>
<h2 id="航班预定统计"><a href="#航班预定统计" class="headerlink" title="航班预定统计"></a>航班预定统计</h2><p><a href="https://leetcode.cn/problems/corporate-flight-bookings/">LC1109题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] corpFlightBookings(<span class="type">int</span>[][] bookings, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] delta = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n+<span class="number">2</span>; i ++) delta[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bookings.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span>[] booking = bookings[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> booking[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> booking[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">seats</span> <span class="operator">=</span> booking[<span class="number">2</span>];</span><br><span class="line">            delta[first] += seats; <span class="comment">// += 纵向累加delta，seats是diff booking[][first] - booking[first-1]</span></span><br><span class="line">            delta[last+<span class="number">1</span>] += -seats;  <span class="comment">// -seats 是 booking[]last+1] - booking[last] </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n; i++) sum[i] = delta[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            sum[i] =  sum[i-<span class="number">1</span>] + delta[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* O(m+n)</span></span><br><span class="line"><span class="comment">1  2  3  4  5</span></span><br><span class="line"><span class="comment">10   -10</span></span><br><span class="line"><span class="comment">   20   -20</span></span><br><span class="line"><span class="comment">   25</span></span><br><span class="line"><span class="comment">10 55 45 25 25</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="双指针扫描"><a href="#双指针扫描" class="headerlink" title="双指针扫描"></a>双指针扫描</h1><h2 id="两数之和II-——-输入有序数组"><a href="#两数之和II-——-输入有序数组" class="headerlink" title="两数之和II —— 输入有序数组"></a>两数之和II —— 输入有序数组</h2><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">LC167题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> numbers.length -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; numbers[i] + numbers[j] &gt; target) j--;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j &amp;&amp; numbers[i] + numbers[j] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i+<span class="number">1</span>, j+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="comment">// 2 7 11 15 17 target = 18</span></span><br><span class="line"><span class="comment">// i         j 小于18停止左移动j，检查</span></span><br><span class="line"><span class="comment">//   i j     </span></span><br><span class="line"><span class="comment">//     i  j    小于18停止左移动j，检查</span></span><br><span class="line"><span class="comment">// i 移动时，j单调递减、递增。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p><a href="https://leetcode.cn/problems/two-sum/">LC1题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">            Pair[] sorted = <span class="keyword">new</span> <span class="title class_">Pair</span>[nums.length];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++) sorted[i]= <span class="keyword">new</span> <span class="title class_">Pair</span>(i, nums[i]);</span><br><span class="line">            Arrays.sort(sorted);</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; sorted[i].value + sorted[j].value &gt; target) j--;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j &amp;&amp; sorted[i].value + sorted[j].value == target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;sorted[i].index, sorted[j].index&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Pair&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> index;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Pair other)</span> &#123;</span><br><span class="line">            <span class="comment">//multiplied to -1 as the author need descending sort order</span></span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(<span class="built_in">this</span>.value).compareTo(other.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/">LC15题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">            Arrays.sort(nums);<span class="comment">// 顺序不再重要</span></span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;<span class="comment">// 去除第一位重复</span></span><br><span class="line">                List&lt;List&lt;Integer&gt;&gt; twoSumResults = twoSum(nums, i + <span class="number">1</span>, -nums[i]);</span><br><span class="line">                <span class="keyword">for</span>(List&lt;Integer&gt; twoSumResult : twoSumResults)&#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], twoSumResult.get(<span class="number">0</span>), twoSumResult.get(<span class="number">1</span>)));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != start &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;<span class="comment">// 去除第二位重复</span></span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] + nums[j] &gt; target) j--;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j &amp;&amp; nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    List&lt;Integer&gt; finding = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    finding.add(nums[i]);</span><br><span class="line">                    finding.add(nums[j]);</span><br><span class="line">                    result.add(finding);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h2><p><a href="https://leetcode.cn/problems/container-with-most-water/">LC11题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = height.length-<span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( i &lt; j)&#123;</span><br><span class="line">            ans = Math.max(ans, Math.min(height[i], height[j])* (j-i));</span><br><span class="line">            <span class="comment">// i j 两个指针相遇问题，如果height[i]较矮，则前进i寻找更高的，否则前进j</span></span><br><span class="line">            <span class="keyword">if</span>(height[i] &lt; height[j]) i++; <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归的三个关键：</p>
<ul>
<li>定义需要递归的问题（重叠子问题）—— 数学归纳法思想</li>
<li>确定递归边界</li>
<li>保护与还原现场</li>
</ul>
<p>递归实现的“暴力搜索”或者叫枚举、回溯方法的基本复杂度为：</p>
<table>
<thead>
<tr>
<th align="center">递归形式</th>
<th align="center">时间复杂度规模</th>
<th align="left">问题举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">指数型</td>
<td align="center">k^n</td>
<td align="left">子集、大体积背包</td>
</tr>
<tr>
<td align="center">排列型</td>
<td align="center">n!</td>
<td align="left">全排列、旅行商、N皇后</td>
</tr>
<tr>
<td align="center">组合型</td>
<td align="center">n!&#x2F;(m!(n-m)!)</td>
<td align="left">组合选数</td>
</tr>
</tbody></table>
<h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p><a href="https://leetcode.cn/problems/subsets/">LC78题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        recur(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recur</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="comment">// 递归边界</span></span><br><span class="line">        <span class="keyword">if</span>(i == n) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(chosen));<span class="comment">// 不可加入引用必须复制副本</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i 不选</span></span><br><span class="line">        recur(nums, i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i 选中</span></span><br><span class="line">        chosen.add(nums[i]);</span><br><span class="line">        recur(nums, i+<span class="number">1</span>);</span><br><span class="line">        chosen.remove(chosen.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">    List&lt;Integer&gt; chosen = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p><a href="https://leetcode.cn/problems/combinations/">LC77题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        recur(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recur</span><span class="params">( <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(chosen.size() &gt; k || chosen.size() + (n -i + <span class="number">1</span>) &lt;k ) <span class="keyword">return</span>; <span class="comment">// *** 提早退出，剪枝，已经超过k个，或者剩下全选也不够k个</span></span><br><span class="line">        <span class="comment">// 递归边界</span></span><br><span class="line">        <span class="keyword">if</span>(i == n+<span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(chosen.size() == k) ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(chosen));<span class="comment">// 不可加入引用必须复制副本</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i 不选</span></span><br><span class="line">        recur(i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i 选中</span></span><br><span class="line">        chosen.add(i);</span><br><span class="line">        recur(i+<span class="number">1</span>);</span><br><span class="line">        chosen.remove(chosen.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n, k;</span><br><span class="line">    List&lt;Integer&gt; chosen = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p><a href="https://leetcode.cn/problems/permutations/">LC46题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = nums.length;</span><br><span class="line">        <span class="built_in">this</span>.used = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        recur(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recur</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">        <span class="comment">// pos 为选中的数字个数</span></span><br><span class="line">        <span class="keyword">if</span>(pos == n) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">                a.add(nums[i]);</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                recur(nums, pos +<span class="number">1</span> );</span><br><span class="line">                <span class="comment">// 还原，从而其他递归分支可以继续计算。</span></span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">                a.remove(a.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line">    List&lt;Integer&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="全排列II"><a href="#全排列II" class="headerlink" title="全排列II"></a>全排列II</h2><p><a href="https://leetcode.cn/problems/permutations-ii/">LC47题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = nums.length;</span><br><span class="line">        <span class="built_in">this</span>.used = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// nums 排序，则在used统计中，要检查所有同样的数字的used情况</span></span><br><span class="line">        <span class="comment">// 拆分成第一个数，和剩下的全排列</span></span><br><span class="line">        <span class="comment">// 如果已经算过该数了，则跳过</span></span><br><span class="line">        recur(nums, <span class="number">0</span>);       </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recur</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">        <span class="comment">// pos 为选中的数字个数</span></span><br><span class="line">        <span class="keyword">if</span>(pos == n) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//if(!used[i])&#123;</span></span><br><span class="line">            <span class="keyword">if</span> (used[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            recur(nums, pos +<span class="number">1</span> );</span><br><span class="line">            <span class="comment">// 还原，从而其他递归分支可以继续计算。</span></span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">            a.remove(a.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line">    List&lt;Integer&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n, first;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Integer, Boolean&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="反转二叉树"><a href="#反转二叉树" class="headerlink" title="反转二叉树"></a>反转二叉树</h2><p><a href="https://leetcode.cn/problems/invert-binary-tree/">LC226题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cache</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = cache;</span><br><span class="line"></span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h2><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">LC98题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">         <span class="comment">// 注意Integer.MIN_VALUE-1 与Integer.MAX_VALUE+1越界问题，用long</span></span><br><span class="line">            <span class="keyword">return</span> isValidBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root, <span class="type">long</span> low, <span class="type">long</span> up)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(root == <span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (root.val &gt; up || root.val &lt; low) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> isValidBST(root.left, low, (<span class="type">long</span>)root.val -<span class="number">1</span>) &amp;&amp; isValidBST(root.right, (<span class="type">long</span>)root.val + <span class="number">1</span>, up);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二叉树的最大、最小深度"><a href="#二叉树的最大、最小深度" class="headerlink" title="二叉树的最大、最小深度"></a>二叉树的最大、最小深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">LC104题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">LC111题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) <span class="keyword">return</span> minDepth(root.right)+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="literal">null</span>) <span class="keyword">return</span> minDepth(root.left)+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.min(minDepth(root.left), minDepth(root.right)) +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h1><p>把原问题划分成若干个同类子问题，分别解决后，再把结果合并起来。</p>
<p>关键点：<br>原问题和各个子问题都是重复的（同类的）——递归定义<br>除了向下递归“问题”，还要向上合并“结果”</p>
<p>分治算法一般用递归实现，分为三步骤：</p>
<ul>
<li>递归边界定义</li>
<li>split：分解成多个子问题</li>
<li>merge：合并子问题结果</li>
</ul>
<h2 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x,n)"></a>Pow(x,n)</h2><p><a href="https://leetcode.cn/problems/powx-n/">LC50题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 边界问题</span></span><br><span class="line">        <span class="comment">// 停止</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 负数边界，必须再负数之前，否则StackOverflow</span></span><br><span class="line">        <span class="keyword">if</span> (n == Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">1.0</span>/ (myPow(x, -(n + <span class="number">1</span>)) *x);</span><br><span class="line">         <span class="comment">// 负数</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>/ myPow(x, -n);</span><br><span class="line">        <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> myPow(x, n/<span class="number">2</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">ans</span> <span class="operator">=</span> temp * temp;</span><br><span class="line">        <span class="comment">// 奇数，除以2取整，然后补一个*x</span></span><br><span class="line">        <span class="comment">// 偶数，直接相乘</span></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">1</span>) ans *= x;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成</h2><p><a href="https://leetcode.cn/problems/generate-parentheses/">LC22题目链接</a></p>
<p>组合型递归问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// boundary</span></span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;);</span><br><span class="line">            <span class="keyword">if</span> (store.containsKey(n)) <span class="keyword">return</span> store.get(n);</span><br><span class="line">            <span class="comment">// split</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">1</span>; k &lt;= n; k++ )&#123; <span class="comment">// 加法原理</span></span><br><span class="line">                List&lt;String&gt; A = generateParenthesis(k-<span class="number">1</span>);</span><br><span class="line">                store.put(k-<span class="number">1</span>, A);</span><br><span class="line">                List&lt;String&gt; B = generateParenthesis(n-k);</span><br><span class="line">                store.put(n-k, B);</span><br><span class="line">                <span class="comment">// S=(A)B merge</span></span><br><span class="line">                <span class="comment">// 乘法原理</span></span><br><span class="line">                <span class="keyword">for</span>(String a : A )&#123;</span><br><span class="line">                    <span class="keyword">for</span>(String b: B) &#123;</span><br><span class="line">                        ans.add(<span class="string">&quot;(&quot;</span> + a + <span class="string">&quot;)&quot;</span> + b);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, List&lt;String&gt;&gt; store = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">n = 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">((()))</span></span><br><span class="line"><span class="comment">(()())</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(())()</span></span><br><span class="line"><span class="comment">()()()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">n = 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重复问题</span></span><br><span class="line"><span class="comment">--|---- ()(()) ()()()</span></span><br><span class="line"><span class="comment">----|-- (())() ()()()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决办法：找到第一个不可划分的整体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">左侧第一个被一组括号包住，左侧k个括号则为(k-1个括号组合)n-k个括号组合</span></span><br><span class="line"><span class="comment">S (A) B</span></span><br><span class="line"><span class="comment">n k-1 n-k</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">k=1 (A) A=0对括号       B=n-k=2对括号 ()() (())</span></span><br><span class="line"><span class="comment">()()()  ()(())</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">k=2 (A) A=1对括号 (())  B=n-k=1对括号 ()</span></span><br><span class="line"><span class="comment">(())()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">k=3 (A) A=2对括号 (()())  ((()))  B=n-k=0对括号</span></span><br><span class="line"><span class="comment">(()())   ((()))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总共2+1+2=5种</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="搜索二维矩阵"><a href="#搜索二维矩阵" class="headerlink" title="搜索二维矩阵"></a>搜索二维矩阵</h2><p><a href="https://leetcode.cn/problems/search-a-2d-matrix/">LC74题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 按行搜索直到 target&gt;= matrix[i-1][0] &amp;&amp; target &lt;= matrix[i][0]</span></span><br><span class="line">        <span class="comment">// 按列搜索直到 target == matrix[i-1][j]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( ;i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(target &gt;= matrix[i][<span class="number">0</span>] &amp;&amp; ( i == matrix.length -<span class="number">1</span> || target &lt; matrix[i+<span class="number">1</span>][<span class="number">0</span>])) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; matrix.length &amp;&amp; target == matrix[i][j]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="合并K个升序链表"><a href="#合并K个升序链表" class="headerlink" title="合并K个升序链表"></a>合并K个升序链表</h2><p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">LC23题目链接</a></p>
<p>拆分问题，先合成两个k&#x2F;2组成的链表,把这两个链表合成k个组成的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> merge(lists, <span class="number">0</span>, lists.length -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">merge</span><span class="params">(ListNode[] lists, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( start == end) <span class="keyword">return</span> lists[start];</span><br><span class="line">        <span class="keyword">if</span> ( start &gt; end ) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) /<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(merge(lists, start, mid), merge(lists, mid +<span class="number">1</span>, end));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur1</span> <span class="operator">=</span> list1, cur2 = list2, nextHead2 = <span class="literal">null</span>, protect = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, list1),lastHead1 = protect;</span><br><span class="line">        <span class="keyword">while</span>(cur1 != <span class="literal">null</span> || cur2 != <span class="literal">null</span>) &#123;           </span><br><span class="line">            <span class="comment">// 更新节点</span></span><br><span class="line">            <span class="keyword">if</span>(cur1 == <span class="literal">null</span> || (cur2 != <span class="literal">null</span> &amp;&amp; cur1.val &gt; cur2.val))&#123; <span class="comment">// 取list2节点,cur2 推进</span></span><br><span class="line">                <span class="comment">// 先缓存即将推进的节点</span></span><br><span class="line">                nextHead2 = cur2.next;</span><br><span class="line">                <span class="comment">// cur2 插入在cur1之前,lastHead1之后       </span></span><br><span class="line">                cur2.next = cur1;               </span><br><span class="line">                lastHead1.next = cur2;</span><br><span class="line">                <span class="comment">// 更新lastHead1 和cur2 指针          </span></span><br><span class="line">                lastHead1 = cur2;</span><br><span class="line">                cur2 = nextHead2;                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//取list1节点，cur1直接推进</span></span><br><span class="line">                lastHead1 = cur1;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> protect.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="为运算表达式设计优先级"><a href="#为运算表达式设计优先级" class="headerlink" title="为运算表达式设计优先级"></a>为运算表达式设计优先级</h2><p><a href="https://leetcode.cn/problems/different-ways-to-add-parentheses/">LC241题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADDITION</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SUBTRACTION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MULTIPLICATION</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">diffWaysToCompute</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; ops = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 创建操作数数组 [ 2, -, 1, -, 1]</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; expression.length();) &#123;</span><br><span class="line">                <span class="keyword">if</span>(expression.charAt(i) == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                    ops.add(ADDITION);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (expression.charAt(i) == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                    ops.add(SUBTRACTION);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (expression.charAt(i) == <span class="string">&#x27;*&#x27;</span> )&#123;</span><br><span class="line">                    ops.add(MULTIPLICATION);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(i &lt; expression.length() &amp;&amp; expression.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; expression.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> )&#123;</span><br><span class="line">                        <span class="comment">// 表达式要正确</span></span><br><span class="line">                        number = <span class="number">10</span> * number +  expression.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ops.add(number);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分治法合并表达式</span></span><br><span class="line">            <span class="comment">// split 拆分成两个子数组, [start, mid] [mid + 2, end] 分别得到结果</span></span><br><span class="line">            <span class="comment">// merge 用 mid +1 的符号合并左右子数组的所有可能结果</span></span><br><span class="line">            <span class="comment">// 对于每一层，共有 (start + end )/2 种拆分方式，每次步长为2</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 缓存结果达到剪枝效果</span></span><br><span class="line">            <span class="comment">// 注意for循环时候不能修改dp本身</span></span><br><span class="line"></span><br><span class="line">            List&lt;Integer&gt;[][] dp = <span class="keyword">new</span> <span class="title class_">List</span>[ops.size()][ops.size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ops.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ops.size(); j++) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dfs(dp, <span class="number">0</span>, ops.size() -<span class="number">1</span>, ops);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">dfs</span><span class="params">(List&lt;Integer&gt;[][] dp, <span class="type">int</span> start, <span class="type">int</span> end, List&lt;Integer&gt; ops)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( start &gt; end) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span>(!dp[start][end].isEmpty()) <span class="keyword">return</span> dp[start][end];</span><br><span class="line">            <span class="comment">// boundary</span></span><br><span class="line">            <span class="keyword">if</span>( start == end) &#123;</span><br><span class="line">                dp[start][end].add(ops.get(start));</span><br><span class="line">                <span class="keyword">return</span> Arrays.asList(ops.get(start));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// split</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start; mid &lt; end; mid+=<span class="number">2</span>)&#123;</span><br><span class="line">                List&lt;Integer&gt; leftResults = dfs(dp, start, mid, ops);</span><br><span class="line">                List&lt;Integer&gt; rightResults = dfs(dp, mid+<span class="number">2</span>, end, ops);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// merge</span></span><br><span class="line">                <span class="keyword">for</span>(Integer left : leftResults)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(Integer right : rightResults)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ops.get(mid+<span class="number">1</span>) == ADDITION) dp[start][end].add(left + right);</span><br><span class="line">                        <span class="keyword">if</span>(ops.get(mid+<span class="number">1</span>) == SUBTRACTION) dp[start][end].add(left - right);</span><br><span class="line">                        <span class="keyword">if</span>(ops.get(mid+<span class="number">1</span>) == MULTIPLICATION) dp[start][end].add(left * right);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[start][end];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="给表达式添加运算符"><a href="#给表达式添加运算符" class="headerlink" title="给表达式添加运算符"></a>给表达式添加运算符</h2><p><a href="https://leetcode.cn/problems/expression-add-operators/">LC282题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> n, target;</span><br><span class="line">        String num;</span><br><span class="line">        <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">addOperators</span><span class="params">(String num, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.n = num.length();</span><br><span class="line">            <span class="built_in">this</span>.target = target;</span><br><span class="line">            <span class="built_in">this</span>.num = num;</span><br><span class="line">            <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line">            dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">long</span> sum, <span class="type">long</span> pre, String exp, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">            <span class="comment">//boundary</span></span><br><span class="line">            <span class="keyword">if</span>(start == n) &#123;</span><br><span class="line">                <span class="keyword">if</span>(sum == target)</span><br><span class="line">                    ans.add(exp);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// main logic, loop from start to n-1 with sum = xxx</span></span><br><span class="line">            <span class="comment">// 右操作数有四种选择</span></span><br><span class="line">            <span class="comment">// 直接拼接</span></span><br><span class="line">            <span class="comment">// + - *</span></span><br><span class="line">            <span class="comment">// int val 会有越界问题</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="comment">// 开头是0 (num.charAt(start) 则不处理拼接的情况。</span></span><br><span class="line">                <span class="keyword">if</span>(i != start &amp;&amp; num.charAt(start) == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                val = val* <span class="number">10</span> + num.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(start == <span class="number">0</span>) &#123;</span><br><span class="line">                    dfs(val, val, exp + val, i+<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// sum[i] =  sum[i-1] + val</span></span><br><span class="line">                    dfs(sum + val, val, exp + <span class="string">&quot;+&quot;</span> + String.valueOf(val), i+<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// sum[i] =  sum[i-1] - val</span></span><br><span class="line">                    dfs(sum - val, -val, exp + <span class="string">&quot;-&quot;</span> + String.valueOf(val), i+<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// sum[i] =  sum[i-1] - pre + val*pre</span></span><br><span class="line">                    dfs(sum - pre + pre * val, pre * val, exp + <span class="string">&quot;*&quot;</span> + String.valueOf(val), i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  递归法解决问题：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  num拆分成字符串，长度为n。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  第i-1层到第i层递进递归：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  1. 边界</span></span><br><span class="line"><span class="comment">    如果start == n 及 存入满足target条件的表达式。</span></span><br><span class="line"><span class="comment">  2. split</span></span><br><span class="line"><span class="comment">    需要知道当前层的和，i-1 层的乘积，当前表达式，把运算结果直接当参数传入下层，从而减轻解析计算复杂度。</span></span><br><span class="line"><span class="comment">    dfs(long sum, long pre, String exp, int start)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    123 为例 展开为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1 + f(23)</span></span><br><span class="line"><span class="comment">    1 + f(2) + f(3)</span></span><br><span class="line"><span class="comment">    12 + f(3)</span></span><br><span class="line"><span class="comment">// 提示：</span></span><br><span class="line"><span class="comment">具体来说，我们枚举连续数字(即一个数字段)的长度(长度大于111，即中间什么都不插入)，然后考虑和上一段数字之间中间的二元运算符是什么。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">假如递归枚举到第iii段数字的时候，考虑二元运算符三种情况。设前i−1i-1i−1段数字的表达式和为sumsumsum。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第一种，中间是+++，则sumsumsum加上第iii段数字。</span></span><br><span class="line"><span class="comment">第二种，中间是−-−，则sumsumsum减去第iii段数字。</span></span><br><span class="line"><span class="comment">第三种，中间是×××，则sumsumsum减去上一段连续乘的值(因此我们需要在递归的时候记录上一段的值，对于第iii段数字，即记录第i−1i-1i−1的数字是多少)，再加上 第i−1i-1i−1段数字×第iii段数字。(例如，1+2×3×41+2×3×41+2×3×4，假设当前枚举3和4之间的运算符，是×运算符，则sumsumsum减去2×3=62×3=62×3=6，然后加上2×3×4=242×3×4=242×3×4=24)。</span></span><br><span class="line"><span class="comment">注意，连续000的情况要特殊处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数组中的第K个最大元素"><a href="#数组中的第K个最大元素" class="headerlink" title="数组中的第K个最大元素"></a>数组中的第K个最大元素</h2><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">LC215题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Pair[] sorted = <span class="keyword">new</span> <span class="title class_">Pair</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length ; i++) sorted[i] =  <span class="keyword">new</span> <span class="title class_">Pair</span>(i, nums[i]);</span><br><span class="line">        Arrays.sort(sorted);</span><br><span class="line">        <span class="keyword">return</span> sorted[k-<span class="number">1</span>].value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Pair&gt;&#123;</span><br><span class="line">        <span class="type">int</span> index, value;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Pair other)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> other.value - <span class="built_in">this</span>.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="综合习题"><a href="#综合习题" class="headerlink" title="综合习题"></a>综合习题</h1><h2 id="和为-K-的子数组"><a href="#和为-K-的子数组" class="headerlink" title="和为 K 的子数组"></a>和为 K 的子数组</h2><p><a href="https://leetcode.cn/problems/subarray-sum-equals-k/">LC560题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] s = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; count = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        count.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 前缀和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">            s[i] = s[i-<span class="number">1</span>] + nums[i-<span class="number">1</span>];            </span><br><span class="line">            <span class="comment">// !!必须在没有全部s数组前机型计算，避免各种边界，例如i&lt; j, k =0 之类</span></span><br><span class="line">            result += count.getOrDefault(s[i] - k, <span class="number">0</span>);</span><br><span class="line">            count.put(s[i], count.getOrDefault(s[i], <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存入count[s[i]]的个数</span></span><br><span class="line">        <span class="comment">// s[i] - s[j] == k 等价于</span></span><br><span class="line">        <span class="comment">// count[s[i] - k] 的个数</span></span><br><span class="line">        <span class="comment">// i 必须 &gt;= j</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最接近原点的-K-个点"><a href="#最接近原点的-K-个点" class="headerlink" title="最接近原点的 K 个点"></a>最接近原点的 K 个点</h2><p><a href="https://leetcode.cn/problems/k-closest-points-to-origin/">LC973题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] kClosest(<span class="type">int</span>[][] points, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="comment">// this.k = k;</span></span><br><span class="line">        sorted = <span class="keyword">new</span> <span class="title class_">Pair</span>[points.length];</span><br><span class="line">        <span class="comment">// 存入所有distance，排序后取前k个。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            enqueue(points, i);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(sorted);</span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[k][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; k;j++)&#123;</span><br><span class="line">            result[current][<span class="number">0</span>] = points[sorted[j].index][<span class="number">0</span>];</span><br><span class="line">            result[current][<span class="number">1</span>] = points[sorted[j].index][<span class="number">1</span>];</span><br><span class="line">            current ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span>[][] points, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> getDistance(points, index);</span><br><span class="line">        sorted[index] = <span class="keyword">new</span> <span class="title class_">Pair</span>(index, distance);</span><br><span class="line">        <span class="comment">//dMap.put(index, distance);</span></span><br><span class="line">        <span class="comment">// 算法超时： // 找到第一个小于的位置放入，保证队列不找过k个元素。</span></span><br><span class="line">        <span class="comment">// int r;</span></span><br><span class="line">        <span class="comment">// for(r = 0; r &lt; q.size() &amp;&amp; !q.isEmpty(); r++) &#123;</span></span><br><span class="line">        <span class="comment">//     if(distance &lt;= dMap.get(q.get(r))) &#123;</span></span><br><span class="line">        <span class="comment">//         q.add(r, index);</span></span><br><span class="line">        <span class="comment">//         if(q.size() &gt; k) q.removeLast();</span></span><br><span class="line">        <span class="comment">//         break;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// if(q.isEmpty()) q.add(index);</span></span><br><span class="line">        <span class="comment">// if(q.size() &lt; k &amp;&amp; r == q.size()) q.addLast(index);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getDistance</span><span class="params">(<span class="type">int</span>[][] points, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> points[index][<span class="number">0</span>]*points[index][<span class="number">0</span>] + points[index][<span class="number">1</span>]*points[index][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单调递减队列，只有k个容量</span></span><br><span class="line">    LinkedList&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// Map&lt;Integer,Double&gt; dMap = new HashMap&lt;&gt;();</span></span><br><span class="line">    Pair[] sorted;</span><br><span class="line">    <span class="comment">// int k ;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Pair&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> index;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Pair other)</span> &#123;</span><br><span class="line">            <span class="comment">//multiplied to -1 as the author need descending sort order</span></span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(<span class="built_in">this</span>.value).compareTo(other.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="鸡蛋掉落"><a href="#鸡蛋掉落" class="headerlink" title="鸡蛋掉落"></a>鸡蛋掉落</h2><p><a href="https://leetcode.cn/problems/super-egg-drop/">LC887题目链接</a></p>
<p>解题思路：</p>
<ol>
<li>回溯：递归展开，dp归纳法得出最优解</li>
<li>记忆化剪枝优化</li>
<li>根据其单调性二分查找快速定位最大值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">superEggDrop</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> recur(k, n); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">recur</span><span class="params">(<span class="type">int</span> K, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">        <span class="comment">// boundary</span></span><br><span class="line">        <span class="comment">// K == 1 needs tranverse every floor with the only egg</span></span><br><span class="line">        <span class="comment">// N == 0 or 1 needs 1 time to do</span></span><br><span class="line">        <span class="keyword">if</span>(K == <span class="number">1</span> || N == <span class="number">0</span> || N == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Pair key = new Pair(K, N);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">1000</span>*N +K;</span><br><span class="line">        <span class="keyword">if</span>(memo2.containsKey(key)) <span class="keyword">return</span> memo2.get(key);</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="comment">/* transition function</span></span><br><span class="line"><span class="comment">        searchTime(K, N) = max( searchTime(K-1, X-1), searchTime(K, N-X) )</span></span><br><span class="line"><span class="comment">        min = min(searchTime(K, N), min)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//int min = N;    // inital max is N</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// recur(K -1, X-1) means egg breaks</span></span><br><span class="line">        <span class="comment">// recur(K, N - X) means egg not break</span></span><br><span class="line">        <span class="comment">// sequential search time exceeded!</span></span><br><span class="line">        <span class="comment">// binary search as recur(K-1, X-1) monolithic increasing with X grow</span></span><br><span class="line">        <span class="comment">// max KN should be around middle</span></span><br><span class="line">        <span class="comment">//for(int X = 1; X &lt;= N; X++)&#123;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>, high = N;</span><br><span class="line">        <span class="type">int</span> <span class="variable">X</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low +<span class="number">1</span> &lt; high)&#123;</span><br><span class="line">            X = (low + high)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">KNlow</span> <span class="operator">=</span> recur(K-<span class="number">1</span>, X-<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">KNhigh</span> <span class="operator">=</span> recur(K, N-X);</span><br><span class="line">            <span class="keyword">if</span>(KNlow &lt; KNhigh) low = X;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(KNlow &gt; KNhigh) high = X;</span><br><span class="line">            <span class="keyword">else</span> low = high = X;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">KN</span> <span class="operator">=</span> Math.max( recur(K-<span class="number">1</span>, low-<span class="number">1</span>), recur(K, N-low) );</span><br><span class="line">        <span class="type">int</span> <span class="variable">KN2</span> <span class="operator">=</span> Math.max(recur(K-<span class="number">1</span>, high-<span class="number">1</span>), recur(K, N-high));</span><br><span class="line">        <span class="comment">// KN + 1 means executed once;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(KN, KN2)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// K = 2, N = 3</span></span><br><span class="line">        <span class="comment">// X = 1; r(1, 0)=0 r(2, 2)=? 2</span></span><br><span class="line">        <span class="comment">// X = 2; r(1, 1)=1 r(2, 1)=1</span></span><br><span class="line">        <span class="comment">// K = 2, N = 2</span></span><br><span class="line">        <span class="comment">// X = 1; r(1, 0)=1 r(2, 1)=2</span></span><br><span class="line">        <span class="comment">// X = 2; r(1, 1)=2 r(2, 0)=1</span></span><br><span class="line">        <span class="comment">// r(2, 2) = 1</span></span><br><span class="line">        <span class="comment">// cache result </span></span><br><span class="line">        memo2.put(key, min);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Map&lt;Pair, Integer&gt; memo = new HashMap&lt;&gt;();</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; memo2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static class Pair&#123;</span></span><br><span class="line">    <span class="comment">//     int K, N;</span></span><br><span class="line">    <span class="comment">//     public Pair(int K, int N)&#123;</span></span><br><span class="line">    <span class="comment">//         this.K = K;</span></span><br><span class="line">    <span class="comment">//         this.N = N;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//     @Override</span></span><br><span class="line">    <span class="comment">//     public int hashCode()&#123;</span></span><br><span class="line">    <span class="comment">//         return 100 * N + K;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
      </tags>
  </entry>
  <entry>
    <title>UI In Depth</title>
    <url>/2021/09/16/%E6%9E%B6%E6%9E%84/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Optimus-UI-In-Depth/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9c0e5c01557b53de02e81b4869c3218e8bc7b1ee3323af9f9b85afb061e7e952"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>肉肉</tag>
        <tag>技术日志</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain Driven Design Pattern Bitemporality</title>
    <url>/2024/04/29/%E6%9E%B6%E6%9E%84/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/Domain-Driven-Design-Pattern-Bitemporal/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2da79e92670937c94e3010d97daaff943554b6d8176dad9637d9f2eef803a5c6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这是一篇加密文章，请提供密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
        <category>领域模型</category>
      </categories>
      <tags>
        <tag>技术日志</tag>
      </tags>
  </entry>
</search>
